{"version":3,"sources":["node_modules/browser-pack/_prelude.js","node_modules/add-px-to-style/index.js","node_modules/dom-css/index.js","node_modules/prefix-style/index.js","node_modules/to-camel-case/index.js","node_modules/to-no-case/index.js","node_modules/to-space-case/index.js","src/dust.js","src/gui.js","src/main.js","src/utils/webgl-detect.js","src/vendor/cellauto.js","src/worlds.js"],"names":["e","t","n","r","s","o","u","a","require","i","f","Error","code","l","exports","call","length","1","module","IS_UNITLESS","animationIterationCount","boxFlex","boxFlexGroup","boxOrdinalGroup","columnCount","flex","flexGrow","flexPositive","flexShrink","flexNegative","flexOrder","gridRow","gridColumn","fontWeight","lineClamp","lineHeight","opacity","order","orphans","tabSize","widows","zIndex","zoom","fillOpacity","stopOpacity","strokeDashoffset","strokeOpacity","strokeWidth","name","value","style","element","property","camel","cache","detect","undefined","addPxToStyle","each","properties","k","hasOwnProperty","cssProp","toCamelCase","result","prefix","set","arguments","cssText","float","get","Array","isArray","reduce","obj","prop","div","prefixes","document","createElement","titleCase","charAt","toUpperCase","slice","string","space","replace","matches","letter","toNoCase","hasSpace","test","toLowerCase","hasSeparator","unseparate","hasCamel","uncamelize","separatorSplitter","m","next","camelSplitter","previous","uppers","split","join","toSpaceCase","clean","match","trim","_cellauto","_worlds","FrameCounter","Dust","container","initFinishedCallback","_this","this","_classCallCheck","worldNames","Object","keys","Worlds","worldOptions","Math","random","app","PIXI","Application","antialias","transparent","resolution","width","offsetWidth","height","offsetHeight","autoResize","appendChild","view","ticker","add","delta","OnUpdate","framecounter","stop","loader","load","res","loadedResources","Setup","start","world","err","frameFrequency","recommendedFrameFrequency","settings","SCALE_MODE","SCALE_MODES","NEAREST","stage","scale","Point","renderer","backgroundColor","textureCanvas","textureCtx","getContext","baseTexture","BaseTexture","fromCanvas","sprite","Sprite","Texture","Rectangle","x","y","anchor","filter","Filter","fragShader","data","filters","removeChildren","addChild","UpdateTexture","IncrementFrame","uniforms","time","step","render","index","ctx","fillStyle","fillRect","pix","createImageData","paletteIndex","grid","getColor","colorRGBA","palette","putImageData","update","frameLimit","frameCount","passedFrames","GUI","dust","guify","console","log","panel","title","theme","root","barMode","align","Register","type","label","min","max","object","options","getOwnPropertyNames","onChange","action","gui","_webglDetect","_dust","_gui","Init","getElementById","Detector","HasWebGL","innerHTML","GetErrorHTML","classList","readyState","window","onload","WebGLRenderingContext","canvas","names","context","getParameter","message","CellAutoCell","locX","locY","delays","CAWorld","wrap","TOPLEFT","TOP","TOPRIGHT","LEFT","RIGHT","BOTTOMLEFT","BOTTOM","BOTTOMRIGHT","randomGenerator","neighborhood","hexTiles","reset","fillNeighbors","cell","process","steps","splice","NEIGHBORLOCS","diffX","diffY","flatTopped","neighbors","neighborX","neighborY","initialize","arrayTypeDist","sort","b","distribution","totalDist","cellTypes","registerCellType","cellOptions","init","key","_typeof","JSON","parse","stringify","prototype","create","constructor","cellType","countSurroundingCellsWithValue","surrounding","delay","numSteps","fn","push","getSurroundingCellsAverageValue","summed","initializeFromGrid","values","initGrid","gridValue","createGridFromValues","defaultValue","newGrid","hasProperty","CellAuto","World","Cell","define","amd","Elementary","processRule","leftAlive","centerAlive","rightAlive","rule","toString","alive","getWasAlive","neighbor","wasAlive","floor","LifeLike","distributionFunc","B","includes","S","RandomRule","rules","Life","Mazecetric","Diamoeba","Anneal","Lava","colors","v","sin","PI","droplet","prev","avg","CyclicRainbows","state","changing","CavesWithWater","open","wasOpen","clearRect","water","amt","_i","_amt","ceil","_i2","_amt2","isSolid","lighted","Rain","_i3","_amt3","_i4","_amt4","Splashes","Wolfram","choice","seedList","neighborOnes","item","newState","seed","minX","maxX","minY","maxY","BelousovZhabotinsky","kernel","reverse","gray","healthy","infected","ill","sumStates","_i5","numStates"],"mappings":"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AAK,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAAK,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAAK,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,MACnG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAAK,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAAK,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAAK,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,MACnG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAAK,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAAK,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAAK,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,MACnG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAAK,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAAK,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAAK,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,MACnG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAAK,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAAK,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAAK,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,MACnG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAAK,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAAK,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAAK,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,MACnG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAAK,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAAK,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAAK,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,MACnG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAAK,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAAK,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAAK,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,MACnG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAAK,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAAK,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAAK,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,MACnG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAAK,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAAK,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAAK,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,MACnG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAAK,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAAK,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAAK,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,MACnG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAAK,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAAK,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAAK,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,MACnG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAAK,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAAK,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAAK,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,MACnG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAAK,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAAK,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAAK,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,MACnG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAAK,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAAK,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAAK,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,MACnG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAAK,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAAK,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAAK,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,MACnG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAAK,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAAK,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAAK,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,MACnG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAAK,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAAK,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAAK,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,MACnG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAAK,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAAK,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAAK,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,MACnG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAAK,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAAK,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAAK,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,MACnG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAAK,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAAK,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAAK,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,MACnG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAAK,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAAK,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAAK,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,MACnG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAAK,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAAK,EAAG,EAAG,EAAG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","file":"dust.min.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","/* The following list is defined in React's core */\nvar IS_UNITLESS = {\n  animationIterationCount: true,\n  boxFlex: true,\n  boxFlexGroup: true,\n  boxOrdinalGroup: true,\n  columnCount: true,\n  flex: true,\n  flexGrow: true,\n  flexPositive: true,\n  flexShrink: true,\n  flexNegative: true,\n  flexOrder: true,\n  gridRow: true,\n  gridColumn: true,\n  fontWeight: true,\n  lineClamp: true,\n  lineHeight: true,\n  opacity: true,\n  order: true,\n  orphans: true,\n  tabSize: true,\n  widows: true,\n  zIndex: true,\n  zoom: true,\n\n  // SVG-related properties\n  fillOpacity: true,\n  stopOpacity: true,\n  strokeDashoffset: true,\n  strokeOpacity: true,\n  strokeWidth: true\n};\n\nmodule.exports = function(name, value) {\n  if(typeof value === 'number' && !IS_UNITLESS[ name ]) {\n    return value + 'px';\n  } else {\n    return value;\n  }\n};","var prefix = require('prefix-style')\nvar toCamelCase = require('to-camel-case')\nvar cache = { 'float': 'cssFloat' }\nvar addPxToStyle = require('add-px-to-style')\n\nfunction style (element, property, value) {\n  var camel = cache[property]\n  if (typeof camel === 'undefined') {\n    camel = detect(property)\n  }\n\n  // may be false if CSS prop is unsupported\n  if (camel) {\n    if (value === undefined) {\n      return element.style[camel]\n    }\n\n    element.style[camel] = addPxToStyle(camel, value)\n  }\n}\n\nfunction each (element, properties) {\n  for (var k in properties) {\n    if (properties.hasOwnProperty(k)) {\n      style(element, k, properties[k])\n    }\n  }\n}\n\nfunction detect (cssProp) {\n  var camel = toCamelCase(cssProp)\n  var result = prefix(camel)\n  cache[camel] = cache[cssProp] = cache[result] = result\n  return result\n}\n\nfunction set () {\n  if (arguments.length === 2) {\n    if (typeof arguments[1] === 'string') {\n      arguments[0].style.cssText = arguments[1]\n    } else {\n      each(arguments[0], arguments[1])\n    }\n  } else {\n    style(arguments[0], arguments[1], arguments[2])\n  }\n}\n\nmodule.exports = set\nmodule.exports.set = set\n\nmodule.exports.get = function (element, properties) {\n  if (Array.isArray(properties)) {\n    return properties.reduce(function (obj, prop) {\n      obj[prop] = style(element, prop || '')\n      return obj\n    }, {})\n  } else {\n    return style(element, properties || '')\n  }\n}\n","var div = null\nvar prefixes = [ 'Webkit', 'Moz', 'O', 'ms' ]\n\nmodule.exports = function prefixStyle (prop) {\n  // re-use a dummy div\n  if (!div) {\n    div = document.createElement('div')\n  }\n\n  var style = div.style\n\n  // prop exists without prefix\n  if (prop in style) {\n    return prop\n  }\n\n  // borderRadius -> BorderRadius\n  var titleCase = prop.charAt(0).toUpperCase() + prop.slice(1)\n\n  // find the vendor-prefixed prop\n  for (var i = prefixes.length; i >= 0; i--) {\n    var name = prefixes[i] + titleCase\n    // e.g. WebkitBorderRadius or webkitBorderRadius\n    if (name in style) {\n      return name\n    }\n  }\n\n  return false\n}\n","\nvar space = require('to-space-case')\n\n/**\n * Export.\n */\n\nmodule.exports = toCamelCase\n\n/**\n * Convert a `string` to camel case.\n *\n * @param {String} string\n * @return {String}\n */\n\nfunction toCamelCase(string) {\n  return space(string).replace(/\\s(\\w)/g, function (matches, letter) {\n    return letter.toUpperCase()\n  })\n}\n","\n/**\n * Export.\n */\n\nmodule.exports = toNoCase\n\n/**\n * Test whether a string is camel-case.\n */\n\nvar hasSpace = /\\s/\nvar hasSeparator = /(_|-|\\.|:)/\nvar hasCamel = /([a-z][A-Z]|[A-Z][a-z])/\n\n/**\n * Remove any starting case from a `string`, like camel or snake, but keep\n * spaces and punctuation that may be important otherwise.\n *\n * @param {String} string\n * @return {String}\n */\n\nfunction toNoCase(string) {\n  if (hasSpace.test(string)) return string.toLowerCase()\n  if (hasSeparator.test(string)) return (unseparate(string) || string).toLowerCase()\n  if (hasCamel.test(string)) return uncamelize(string).toLowerCase()\n  return string.toLowerCase()\n}\n\n/**\n * Separator splitter.\n */\n\nvar separatorSplitter = /[\\W_]+(.|$)/g\n\n/**\n * Un-separate a `string`.\n *\n * @param {String} string\n * @return {String}\n */\n\nfunction unseparate(string) {\n  return string.replace(separatorSplitter, function (m, next) {\n    return next ? ' ' + next : ''\n  })\n}\n\n/**\n * Camelcase splitter.\n */\n\nvar camelSplitter = /(.)([A-Z]+)/g\n\n/**\n * Un-camelcase a `string`.\n *\n * @param {String} string\n * @return {String}\n */\n\nfunction uncamelize(string) {\n  return string.replace(camelSplitter, function (m, previous, uppers) {\n    return previous + ' ' + uppers.toLowerCase().split('').join(' ')\n  })\n}\n","\nvar clean = require('to-no-case')\n\n/**\n * Export.\n */\n\nmodule.exports = toSpaceCase\n\n/**\n * Convert a `string` to space case.\n *\n * @param {String} string\n * @return {String}\n */\n\nfunction toSpaceCase(string) {\n  return clean(string).replace(/[\\W_]+(.|$)/g, function (matches, match) {\n    return match ? ' ' + match : ''\n  }).trim()\n}\n","import * as CellAuto from \"./vendor/cellauto.js\";\nimport { Worlds } from \"./worlds.js\";\nlet css = require(\"dom-css\");\n\nexport class Dust {\n    constructor(container, initFinishedCallback) {\n        this.container = container;\n\n        let worldNames = Object.keys(Worlds);\n        this.worldOptions = {\n            name: worldNames[worldNames.length * Math.random() << 0], // Random startup world\n            //width: 128, // Can force a width/height here\n            //height: 128,\n        }\n\n        // Create the app and put its canvas into `container`\n        this.app = new PIXI.Application(\n            {\n                antialias: false, \n                transparent: false,\n                resolution: 1,\n                width: this.container.offsetWidth,\n                height: this.container.offsetHeight,\n                //powerPreference: \"high-performance\"\n                autoResize: true,\n            }\n        );\n        this.container.appendChild(this.app.view);\n\n        // Start the update loop\n        this.app.ticker.add((delta) => {\n            this.OnUpdate(delta);\n        });\n\n        this.framecounter = new FrameCounter(1, null);\n\n        // Stop application and wait for setup to finish\n        this.app.stop();\n\n        // Load resources needed for the program to run\n        PIXI.loader\n            .add('fragShader', '../resources/dust.frag')\n            .load((loader, res) => {\n                // Loading has finished\n                this.loadedResources = res;\n                this.Setup();\n                this.app.start();\n                initFinishedCallback();\n            });\n    }\n\n    /**\n     * Reusable method for setting up the simulation from `this.worldOptions`.\n     * Also works as a reset function if you call this without changing\n     * `this.worldOptions.name` beforehand.\n     */\n    Setup() {\n\n        // Create the world from the string\n        try {\n            this.world = Worlds[this.worldOptions.name].call(this, this.worldOptions.width, this.worldOptions.height);\n        } catch (err) {\n            throw \"World with the name \" + this.worldOptions.name + \" does not exist!\";\n        }\n        this.framecounter.frameFrequency = this.world.recommendedFrameFrequency || 1;\n\n        PIXI.settings.SCALE_MODE = PIXI.SCALE_MODES.NEAREST;\n        this.app.stage.scale = new PIXI.Point(this.container.offsetWidth / this.world.width, this.container.offsetHeight / this.world.height);\n\n        //this.app.renderer.view.style.border = \"1px dashed green\";\n        this.app.renderer.view.style.width = \"100%\";\n        this.app.renderer.view.style.height = \"100%\";\n        this.app.renderer.backgroundColor = 0xffffff;\n\n        // Create a sprite from a blank canvas\n        this.textureCanvas = document.createElement('canvas');\n        this.textureCanvas.width = this.world.width;\n        this.textureCanvas.height = this.world.height;\n        this.textureCtx = this.textureCanvas.getContext('2d'); // Used later to update texture\n\n        this.baseTexture = new PIXI.BaseTexture.fromCanvas(this.textureCanvas);\n        this.sprite = new PIXI.Sprite(\n            new PIXI.Texture(this.baseTexture, new PIXI.Rectangle(0, 0, this.world.width, this.world.height))\n        );\n\n        // Center the sprite\n        this.sprite.x = this.world.width / 2;\n        this.sprite.y = this.world.height / 2;\n        this.sprite.anchor.set(0.5);\n\n        // Create the shader for the sprite\n        this.filter = new PIXI.Filter(null, this.loadedResources.fragShader.data);\n        this.sprite.filters = [this.filter];\n\n        this.app.stage.removeChildren(); // Remove any attached children (for case where changing presets)\n        this.app.stage.addChild(this.sprite);\n\n        // Update the texture from the initial state of the world\n        this.UpdateTexture();\n    }\n\n    /**\n     * Called every frame. Continues indefinitely after being called once.\n     */\n    OnUpdate(delta) {\n        let noskip = this.framecounter.IncrementFrame();\n        if(noskip) {\n            this.filter.uniforms.time += delta;\n            this.world.step();\n            this.UpdateTexture();\n            this.app.render();\n        }\n\n    }\n\n    /**\n     * Updates the texture representing the world.\n     * Writes cell colors to the texture canvas and updates `baseTexture` from it,\n     * which makes Pixi update the sprite.\n     */\n    UpdateTexture() {\n        \n        let index = 0;\n        let ctx = this.textureCtx;\t\t\n        ctx.fillStyle = \"black\";\n        ctx.fillRect(0, 0, this.textureCanvas.width, this.textureCanvas.height);\n        let pix = ctx.createImageData(this.textureCanvas.width, this.textureCanvas.height);\t\t\n        for (let y = 0; y < this.textureCanvas.height; y++) {\t\t\t\n            for (let x = 0; x < this.textureCanvas.width; x++) {\n                let paletteIndex = this.world.grid[y][x].getColor();\n                let colorRGBA = this.world.palette[paletteIndex];\n                if(colorRGBA != null) {\n                    pix.data[index++] = colorRGBA[0];\t\t\t\t\n                    pix.data[index++] = colorRGBA[1];\t\t\t\t\n                    pix.data[index++] = colorRGBA[2];\t\t\t\t\n                    pix.data[index++] = colorRGBA[3];\t\n                } else {\n                    throw \"Palette index out of bounds: \" + paletteIndex;\n                }\n            }\t\t\n        } \t\t\n        ctx.putImageData(pix, 0, 0);\n\n        // Tell Pixi to update the texture referenced by this ctx.\n        this.baseTexture.update();\n\n    }\n\n}\n\n/**\n * Convenience class for restricting the refresh rate of the simulation.\n */\nclass FrameCounter {\n    constructor(frameFrequency, frameLimit = null) {\n        // The number of frames ingested\n        this.frameCount = 0;\n\n        // The number of frames allowed to run\n        this.passedFrames = 0;\n\n        // Frame will run every `frameFrequency` frames that pass\n        this.frameFrequency = frameFrequency;\n\n        // If set, class will stop allowing frames after `frameLimit` \n        // passedFrames have been allowed.\n        this.frameLimit = frameLimit;\n    }\n\n    /**\n     * Returns true once every `frameFrequency` times it is called.\n     */\n    IncrementFrame(){\n        this.frameCount += 1;\n        if(this.frameCount % this.frameFrequency == 0) {\n            // If we've reached the frame limit\n            if(this.frameLimit != null && this.passedFrames >= this.frameLimit)\n                return false;\n\n            this.frameCount = 0;\n            this.passedFrames += 1;\n            return true;\n        }\n        return false;\n    }\n}","import { Worlds } from \"./worlds.js\";\n\nclass GUI {\n\n    Init(dust, container){\n\n        if(!guify) {\n            console.log(\"Guify not found! Import it on your page to enable the GUI for this program.\");\n            return;\n        }\n\n        this.panel = new guify.GUI({\n            title: \"Dust\", \n            theme: \"dark\", \n            root: container,\n            width: 300,\n            barMode: \"above\",\n            align: \"right\",\n            opacity: \"0.95\",\n        });\n\n        this.panel.Register({\n            type: \"range\", label: \"Frame Frequency\",\n            min: 1, max: 30, step: 1,\n            object: dust.framecounter, property: \"frameFrequency\"\n        });\n\n        this.panel.Register({\n            type: \"select\", label: \"Preset\",\n            options: Object.getOwnPropertyNames(Worlds),\n            object: dust.worldOptions, property: \"name\",\n            onChange: () => dust.Setup()\n        });\n\n        this.panel.Register({\n            type: \"button\", label: \"Reset\",\n            action: () => dust.Setup()\n        });\n\n    }\n\n}\n\nexport let gui = new GUI();","import { Detector } from \"./utils/webgl-detect.js\";\nimport { Dust } from \"./dust.js\";\nimport { gui } from \"./gui.js\";\n\nlet Init = () => {\n    let container = document.getElementById(\"dust-container\");\n    if(!container) throw new Error(\"No #dust-container was found\");\n    \n    if ( !Detector.HasWebGL() ) {\n        //exit(\"WebGL is not supported on this browser.\");\n        console.log(\"WebGL is not supported on this browser.\");\n        container.innerHTML = Detector.GetErrorHTML();\n        container.classList.add(\"no-webgl\");\n    }\n    else {\n        let dust = new Dust(container, () => {\n            // Dust is now fully loaded\n            gui.Init(dust, container);\n        });\n    }\n}\n\nif (document.readyState === 'complete') {\n    Init();\n} else {\n    window.onload = () => {\n        Init();\n    }\n}","class Detector {\n\n    //http://stackoverflow.com/questions/11871077/proper-way-to-detect-webgl-support\n    static HasWebGL() {\n        if (!!window.WebGLRenderingContext) {\n            var canvas = document.createElement(\"canvas\"),\n                    names = [\"webgl\", \"experimental-webgl\", \"moz-webgl\", \"webkit-3d\"],\n                context = false;\n\n            for(var i=0;i<4;i++) {\n                try {\n                    context = canvas.getContext(names[i]);\n                    if (context && typeof context.getParameter == \"function\") {\n                        // WebGL is enabled\n                        return true;\n                    }\n                } catch(e) {}\n            }\n\n            // WebGL is supported, but disabled\n            return false;\n        }\n        // WebGL not supported\n        return false;\n    }\n\n    static GetErrorHTML(message = null){\n        if(message == null){\n            message = `Your graphics card does not seem to support \n                        <a href=\"http://khronos.org/webgl/wiki/Getting_a_WebGL_Implementation\">WebGL</a>. <br>\n                        Find out how to get it <a href=\"http://get.webgl.org/\">here</a>.`;\n        }\n        return `\n        <div class=\"no-webgl-support\">\n        <p style=\"text-align: center;\">${message}</p>\n        </div>\n        `\n    }\n\n}\n\nexport { Detector };","function CellAutoCell(locX, locY) {\n\tthis.x = locX;\n\tthis.y = locY;\n\n\tthis.delays = [];\n}\n\nCellAutoCell.prototype.process = function(neighbors) {\n\treturn;\n};\nCellAutoCell.prototype.countSurroundingCellsWithValue = function(neighbors, value) {\n\tvar surrounding = 0;\n\tfor (var i = 0; i < neighbors.length; i++) {\n\t\tif (neighbors[i] !== null && neighbors[i][value]) {\n\t\t\tsurrounding++;\n\t\t}\n\t}\n\treturn surrounding;\n};\nCellAutoCell.prototype.delay = function(numSteps, fn) {\n\tthis.delays.push({ steps: numSteps, action: fn });\n};\n\nCellAutoCell.prototype.reset = function(neighbors) {\n\treturn;\n};\n\nCellAutoCell.prototype.getSurroundingCellsAverageValue = function(neighbors, value) {\n\tvar summed = 0.0;\n\tfor (var i = 0; i < neighbors.length; i++) {\n\t\tif (neighbors[i] !== null && (neighbors[i][value] || neighbors[i][value] === 0)) {\n\t\t\tsummed += neighbors[i][value];\n\t\t}\n\t}\n\treturn summed / neighbors.length;//cnt;\n};\nfunction CAWorld(options) {\n\n\tthis.width = 24;\n\tthis.height = 24;\n\tthis.options = options;\n\n\tthis.wrap = false;\n\n\tthis.TOPLEFT        = { index: 0, x: -1, y: -1 };\n\tthis.TOP            = { index: 1, x:  0, y: -1 };\n\tthis.TOPRIGHT       = { index: 2, x:  1, y: -1 };\n\tthis.LEFT           = { index: 3, x: -1, y:  0 };\n\tthis.RIGHT          = { index: 4, x:  1, y:  0 };\n\tthis.BOTTOMLEFT     = { index: 5, x: -1, y:  1 };\n\tthis.BOTTOM         = { index: 6, x:  0, y:  1 };\n\tthis.BOTTOMRIGHT    = { index: 7, x:  1, y:  1 };\n\t\n\tthis.randomGenerator = Math.random;\n\n\t// square tiles by default, eight sides\n\tvar neighborhood = [null, null, null, null, null, null, null, null];\n\n\tif (this.options.hexTiles) {\n\t\t// six sides\n\t\tneighborhood = [null, null, null, null, null, null];\n\t}\n\tthis.step = function() {\n\t\tvar y, x;\n\t\tfor (y=0; y<this.height; y++) {\n\t\t\tfor (x=0; x<this.width; x++) {\n\t\t\t\tthis.grid[y][x].reset();\n\t\t\t}\n\t\t}\n\n\t\t// bottom up, left to right processing\n\t\tfor (y=this.height-1; y>=0; y--) {\n\t\t\tfor (x=this.width-1; x>=0; x--) {\n\t\t\t\tthis.fillNeighbors(neighborhood, x, y);\n\t\t\t\tvar cell = this.grid[y][x];\n\t\t\t\tcell.process(neighborhood);\n\n\t\t\t\t// perform any delays\n\t\t\t\tfor (var i=0; i<cell.delays.length; i++) {\n\t\t\t\t\tcell.delays[i].steps--;\n\t\t\t\t\tif (cell.delays[i].steps <= 0) {\n\t\t\t\t\t\t// perform action and remove delay\n\t\t\t\t\t\tcell.delays[i].action(cell);\n\t\t\t\t\t\tcell.delays.splice(i, 1);\n\t\t\t\t\t\ti--;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t};\n\n\t//var NEIGHBORLOCS = [{x:-1, y:-1}, {x:0, y:-1}, {x:1, y:-1}, {x:-1, y:0}, {x:1, y:0},{x:-1, y:1}, {x:0, y:1}, {x:1, y:1}];\n\t// square tiles by default\n\tvar NEIGHBORLOCS = [\n\t\t{ diffX : function() { return -1; }, diffY: function() { return -1; }},  // top left\n\t\t{ diffX : function() { return 0; }, diffY: function() { return -1; }},  // top\n\t\t{ diffX : function() { return 1; }, diffY: function() { return -1; }},  // top right\n\t\t{ diffX : function() { return -1; }, diffY: function() { return 0; }},  // left\n\t\t{ diffX : function() { return 1; }, diffY: function() { return 0; }},  // right\n\t\t{ diffX : function() { return -1; }, diffY: function() { return 1; }},  // bottom left\n\t\t{ diffX : function() { return 0; }, diffY: function() { return 1; }},  // bottom\n\t\t{ diffX : function() { return 1; }, diffY: function() { return 1; }}  // bottom right\n\t];\n\tif (this.options.hexTiles) {\n\t\tif (this.options.flatTopped) {\n\t\t\t// flat topped hex map,  function requires column to be passed\n\t\t\tNEIGHBORLOCS = [\n\t\t\t\t{ diffX : function() { return -1; }, diffY: function(x) { return x%2 ? -1 : 0; }},  // top left\n\t\t\t\t{ diffX : function() { return 0; }, diffY: function() { return -1; }},  // top\n\t\t\t\t{ diffX : function() { return 1; }, diffY: function(x) { return x%2 ? -1 : 0; }},  // top right\n\t\t\t\t{ diffX : function() { return 1; }, diffY: function(x) { return x%2 ? 0 : 1; }},  // bottom right\n\t\t\t\t{ diffX : function() { return 0; }, diffY: function() { return 1; }},  // bottom\n\t\t\t\t{ diffX : function() { return -1; }, diffY: function(x) { return x%2 ? 0 : 1; }}  // bottom left\n\t\t\t];\n\t\t}\n\t\telse {\n\t\t\t// pointy topped hex map, function requires row to be passed\n\t\t\tNEIGHBORLOCS = [\n\t\t\t\t{ diffX : function(x, y) { return y%2 ? 0 : -1; }, diffY: function() { return -1; }},  // top left\n\t\t\t\t{ diffX : function(x, y) { return y%2 ? 1 : 0; }, diffY: function() { return -1; }},  // top right\n\t\t\t\t{ diffX : function() { return -1; }, diffY: function() { return 0; }},  // left\n\t\t\t\t{ diffX : function() { return 1; }, diffY: function() { return 0; }},  // right\n\t\t\t\t{ diffX : function(x, y) { return y%2 ? 0 : -1; }, diffY: function() { return 1; }},  // bottom left\n\t\t\t\t{ diffX : function(x, y) { return y%2 ? 1 : 0; }, diffY: function() { return 1; }}  // bottom right\n\t\t\t];\n\t\t}\n\n\t}\n\tthis.fillNeighbors = function(neighbors, x, y) {\n\t\tfor (var i=0; i<NEIGHBORLOCS.length; i++) {\n\t\t\tvar neighborX = x + NEIGHBORLOCS[i].diffX(x, y);\n\t\t\tvar neighborY = y + NEIGHBORLOCS[i].diffY(x, y);\n\t\t\tif (this.wrap) {\n\t\t\t\t// TODO: hex map support for wrapping\n\t\t\t\tneighborX = (neighborX + this.width) % this.width;\n\t\t\t\tneighborY = (neighborY + this.height) % this.height;\n\t\t\t}\n\t\t\tif (!this.wrap && (neighborX < 0 || neighborY < 0 || neighborX >= this.width || neighborY >= this.height)) {\n\t\t\t\tneighbors[i] = null;\n\t\t\t}\n\t\t\telse {\n\t\t\t\tneighbors[i] = this.grid[neighborY][neighborX];\n\t\t\t}\n\t\t}\n\t};\n\n\tthis.initialize = function(arrayTypeDist) {\n\n\t\t// sort the cell types by distribution\n\t\tarrayTypeDist.sort(function(a, b) {\n\t\t\treturn a.distribution > b.distribution ? 1 : -1;\n\t\t});\n\n\t\tvar totalDist = 0;\n\t\t// add all distributions together\n\t\tfor (var i=0; i<arrayTypeDist.length; i++) {\n\t\t\ttotalDist += arrayTypeDist[i].distribution;\n\t\t\tarrayTypeDist[i].distribution = totalDist;\n\t\t}\n\n\t\tthis.grid = [];\n\t\tfor (var y=0; y<this.height; y++) {\n\t\t\tthis.grid[y] = [];\n\t\t\tfor (var x=0; x<this.width; x++) {\n\t\t\t\tvar random = this.randomGenerator() * 100;\n\n\t\t\t\tfor (i=0; i<arrayTypeDist.length; i++) {\n\t\t\t\t\tif (random <= arrayTypeDist[i].distribution) {\n\t\t\t\t\t\tthis.grid[y][x] = new this.cellTypes[arrayTypeDist[i].name](x, y);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t};\n\n\tthis.cellTypes = {};\n\tthis.registerCellType = function(name, cellOptions, init) {\n\t\tthis.cellTypes[name] = function(x, y) {\n\t\t\tCellAutoCell.call(this, x, y);\n\n\t\t\tif (init) {\n\t\t\t\tinit.call(this, x, y);\n\t\t\t}\n\n\t\t\tif (cellOptions) {\n\t\t\t\tfor (var key in cellOptions) {\n\t\t\t\t\tif (typeof cellOptions[key] !== 'function') {\n\t\t\t\t\t\t// properties get instance\n\t\t\t\t\t\tif (typeof cellOptions[key] === 'object') {\n\t\t\t\t\t\t\t// objects must be cloned\n\t\t\t\t\t\t\tthis[key] = JSON.parse(JSON.stringify(cellOptions[key]));\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse {\n\t\t\t\t\t\t\t// primitive\n\t\t\t\t\t\t\tthis[key] = cellOptions[key];\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t\tthis.cellTypes[name].prototype = Object.create(CellAutoCell.prototype);\n\t\tthis.cellTypes[name].prototype.constructor = this.cellTypes[name];\n\t\tthis.cellTypes[name].prototype.cellType = name;\n\n\t\tif (cellOptions) {\n\t\t\tfor (var key in cellOptions) {\n\t\t\t\tif (typeof cellOptions[key] === 'function') {\n\t\t\t\t\t// functions get prototype\n\t\t\t\t\tthis.cellTypes[name].prototype[key] = cellOptions[key];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t};\n\n\t// apply options\n\tif (options) {\n\t\tfor (var key in options) {\n\t\t\tthis[key] = options[key];\n\t\t}\n\t}\n\n}\n\nCAWorld.prototype.initializeFromGrid  = function(values, initGrid) {\n\n\tthis.grid = [];\n\tfor (var y=0; y<this.height; y++) {\n\t\tthis.grid[y] = [];\n\t\tfor (var x=0; x<this.width; x++) {\n\t\t\tfor (var i=0; i<values.length; i++) {\n\t\t\t\tif (values[i].gridValue === initGrid[y][x]) {\n\t\t\t\t\tthis.grid[y][x] = new this.cellTypes[values[i].name](x, y);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n};\n\nCAWorld.prototype.createGridFromValues = function(values, defaultValue) {\n\tvar newGrid = [];\n\n\tfor (var y=0; y<this.height; y++) {\n\t\tnewGrid[y] = [];\n\t\tfor (var x = 0; x < this.width; x++) {\n\t\t\tnewGrid[y][x] = defaultValue;\n\t\t\tvar cell = this.grid[y][x];\n\t\t\tfor (var i=0; i<values.length; i++) {\n\t\t\t\tif (cell.cellType == values[i].cellType && cell[values[i].hasProperty]) {\n\t\t\t\t\tnewGrid[y][x] = values[i].value;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\treturn newGrid;\n};\n\n;(function() {\n  var CellAuto = {\n    World: CAWorld,\n    Cell: CellAutoCell\n  };\n\n  if (typeof define === 'function' && define.amd) {\n    define('CellAuto', function () {\n      return CellAuto;\n    });\n  } else if (typeof module !== 'undefined' && module.exports) {\n    module.exports = CellAuto;\n  } else {\n    window.CellAuto = CellAuto;\n  }\n})();","import * as CellAuto from \"./vendor/cellauto.js\";\n\nexport let Worlds = {\n\n    /**\n     * Chooses a random elementary automata from a list.\n     */\n    RandomRule: function (width = 128, height = 128) {\n        let rules = [\n            18, 22, 26, 54, 60, 90, 94, 110, 126, 150\n        ];\n        let options = {\n            width: width,\n            height: height,\n            rule: rules[rules.length * Math.random() << 0], // Random rule from list\n            palette: [\n                [68, 36, 52, 255],\n                [255, 255, 255, 255]\n            ],\n            wrap: true\n        }\n        return Elementary(options);\n    },\n\n    /**\n     * Conway's Game of Life\n     * B3/S23\n     */\n    Life: function (width = 128, height = 128) {\n        let options = {\n            width: width,\n            height: height,\n            B: [3],\n            S: [2, 3],\n            palette: [\n                [68, 36, 52, 255],\n                [255, 255, 255, 255]\n            ],\n            recommendedFrameFrequency: 2,\n        }\n        return LifeLike(options);\n    },\n\n    /**\n     * Generates a maze-like structure.\n     * Based on rule B3/S1234 (Mazecetric).\n     */\n    Mazecetric: function(width = 96, height = 96) {\n        let options = {\n            width: width,\n            height: height,\n            B: [3],\n            S: [1, 2, 3, 4],\n            palette: [\n                [68, 36, 52, 255],\n                [255, 255, 255, 255]\n            ],\n            recommendedFrameFrequency: 5,\n        }\n        return LifeLike(options, (x, y) => {\n            // Distribution function\n            return Math.random() < 0.1;\n        });\n    },\n\n    /**\n     * B35678/S5678\n     */\n    Diamoeba: function(width = 96, height = 96) {\n        let options = {\n            width: width,\n            height: height,\n            B: [3, 5, 6, 7, 8],\n            S: [5, 6, 7, 8],\n            palette: [\n                [68, 36, 52, 255],\n                [255, 255, 255, 255]\n            ],\n            recommendedFrameFrequency: 3\n        }\n        return LifeLike(options, (x, y) => {\n            // Distribution function\n            return Math.random() < 0.2;\n        });\n    },\n\n    /**\n     * B4678/S35678\n     */\n    Anneal: function(width = 96, height = 96) {\n        let options = {\n            width: width,\n            height: height,\n            B: [4, 6, 7, 8],\n            S: [3, 5, 6, 7, 8],\n            palette: [\n                [68, 36, 52, 255],\n                [255, 255, 255, 255]\n            ],\n            recommendedFrameFrequency: 3\n        }\n        return LifeLike(options, (x, y) => {\n            // Distribution function\n            return Math.random() < 0.3;\n        });\n    },\n\n    /**\n     * CA that looks like lava.\n     * \n     * From https://sanojian.github.io/cellauto\n     */\n    Lava: function (width = 128, height = 128) {\n        // thanks to TheLastBanana on TIGSource\n\n        let world = new CellAuto.World({\n            width: width,\n            height: height,\n            wrap: true\n        });\n\n        world.palette = [\n            [34,10,21,255], [68,17,26,255], [123,16,16,255],\n            [190,45,16,255], [244,102,20,255], [254,212,97,255]\n        ];\n\n        let colors = [];\n        let index = 0;\n        for (; index < 18; ++index) { colors[index] = 1; }\n        for (; index < 22; ++index) { colors[index] = 0; }\n        for (; index < 25; ++index) { colors[index] = 1; }\n        for (; index < 27; ++index) { colors[index] = 2; }\n        for (; index < 29; ++index) { colors[index] = 3; }\n        for (; index < 32; ++index) { colors[index] = 2; }\n        for (; index < 35; ++index) { colors[index] = 0; }\n        for (; index < 36; ++index) { colors[index] = 2; }\n        for (; index < 38; ++index) { colors[index] = 4; }\n        for (; index < 42; ++index) { colors[index] = 5; }\n        for (; index < 44; ++index) { colors[index] = 4; }\n        for (; index < 46; ++index) { colors[index] = 2; }\n        for (; index < 56; ++index) { colors[index] = 1; }\n        for (; index < 64; ++index) { colors[index] = 0; }\n\n        world.registerCellType('lava', {\n            getColor: function () {\n                let v = this.value + 0.5\n                    + Math.sin(this.x / world.width * Math.PI) * 0.04\n                    + Math.sin(this.y / world.height * Math.PI) * 0.04\n                    - 0.05;\n                v = Math.min(1.0, Math.max(0.0, v));\n\n                return colors[Math.floor(colors.length * v)];\n            },\n            process: function (neighbors) {\n                if(this.droplet === true) {\n                    for (let i = 0; i < neighbors.length; i++) {\n                        if (neighbors[i] !== null && neighbors[i].value) {\n                            neighbors[i].value = 0.5 *this.value;\n                            neighbors[i].prev = 0.5 *this.prev;\n                        }\n                    }\n                    this.droplet = false;\n                    return true;\n                }\n                let avg = this.getSurroundingCellsAverageValue(neighbors, 'value');\n                this.next = 0.998 * (2 * avg - this.prev);\n\n                return true;\n            },\n            reset: function () {\n                if(Math.random() > 0.99993) {\n                    this.value = -0.25 + 0.3*Math.random();\n                    this.prev = this.value;\n                    this.droplet = true;\n                }\n                else {\n                    this.prev = this.value;\n                    this.value = this.next;\n                }\n                this.value = Math.min(0.5, Math.max(-0.5, this.value));\n                return true;\n            }\n        }, function () {\n            //init\n            this.value = 0.0;\n            this.prev = this.value;\n            this.next = this.value;\n        });\n\n        world.initialize([\n            { name: 'lava', distribution: 100 }\n        ]);\n\n        return world;\n\n    },\n\n    /**\n     * Cyclic rainbow automata.\n     * \n     * From https://sanojian.github.io/cellauto\n     */\n    CyclicRainbows: function(width = 128, height = 128) {\n        let world = new CellAuto.World({\n            width: width,\n            height: height\n        });\n\n        world.recommendedFrameFrequency = 1;\n\n        world.palette = [\n            [255,0,0,1 * 255], [255,96,0,1 * 255], [255,191,0,1 * 255], [223,255,0,1 * 255],\n            [128,255,0,1 * 255], [32,255,0,1 * 255], [0,255,64,1 * 255], [0,255,159,1 * 255],\n            [0,255,255,1 * 255], [0,159,255,1 * 255], [0,64,255,1 * 255], [32,0,255,1 * 255],\n            [127,0,255,1 * 255], [223,0,255,1 * 255], [255,0,191,1 * 255], [255,0,96,1 * 255]\n        ];\n\n        world.registerCellType('cyclic', {\n            getColor: function () {\n                return this.state;\n            },\n            process: function (neighbors) {\n                let next = (this.state + Math.floor(Math.random()*2)) % 16;\n\n                let changing = false;\n                for (let i = 0; i < neighbors.length; i++) {\n                    if (neighbors[i] !== null) {\n                        changing = changing || neighbors[i].state === next;\n                    }\n                }\n                if (changing) this.state = next;\n                return true;\n            }\n        }, function () {\n            //init\n            this.state = Math.floor(Math.random() * 16);\n        });\n\n        world.initialize([\n            { name: 'cyclic', distribution: 100 }\n        ]);\n\n        return world;\n    },\n\n    /**\n     * Simulates caves and water movement.\n     * \n     * From https://sanojian.github.io/cellauto\n     */\n    CavesWithWater: function(width = 128, height = 128) {\n        // FIRST CREATE CAVES\n        let world = new CellAuto.World({\n            width: width,\n            height: height\n        });\n\n        world.registerCellType('wall', {\n            process: function (neighbors) {\n                let surrounding = this.countSurroundingCellsWithValue(neighbors, 'wasOpen');\n                this.open = (this.wasOpen && surrounding >= 4) || surrounding >= 6;\n            },\n            reset: function () {\n                this.wasOpen = this.open;\n            }\n        }, function () {\n            //init\n            this.open = Math.random() > 0.40;\n        });\n\n        world.initialize([\n            { name: 'wall', distribution: 100 }\n        ]);\n\n        // generate our cave, 10 steps aught to do it\n        for (let i=0; i<10; i++) {\n            world.step();\n        }\n\n        let grid = world.createGridFromValues([\n            { cellType: 'wall', hasProperty: 'open', value: 0 }\n        ], 1);\n\n        // NOW USE OUR CAVES TO CREATE A NEW WORLD CONTAINING WATER\n        world = new CellAuto.World({\n            width: width,\n            height: height,\n            clearRect: true\n        });\n\n        world.palette = [\n            [89, 125, 206, 0 * 255],\n            [89, 125, 206, 1/9 * 255],\n            [89, 125, 206, 2/9 * 255],\n            [89, 125, 206, 3/9 * 255],\n            [89, 125, 206, 4/9 * 255],\n            [89, 125, 206, 5/9 * 255],\n            [89, 125, 206, 6/9 * 255],\n            [89, 125, 206, 7/9 * 255],\n            [89, 125, 206, 8/9 * 255],\n            [89, 125, 206, 1 * 255],\n            [109, 170, 44, 1 * 255],\n            [68, 36, 52, 1 * 255]\n        ];\n\n        world.registerCellType('water', {\n            getColor: function() {\n                //return 0x597DCE44;\n                return this.water;\n            },\n            process: function(neighbors) {\n                if (this.water === 0) {\n                    // already empty\n                    return;\n                }\n                // push my water out to my available neighbors\n\n                // cell below me will take all it can\n                if (neighbors[world.BOTTOM.index] !== null && this.water && neighbors[world.BOTTOM.index].water < 9) {\n                    let amt = Math.min(this.water, 9 - neighbors[world.BOTTOM.index].water);\n                    this.water-= amt;\n                    neighbors[world.BOTTOM.index].water += amt;\n                    return;\n                }\n\n                // bottom two corners take half of what I have\n                for (let i=5; i<=7; i++) {\n                    if (i!=world.BOTTOM.index && neighbors[i] !== null && this.water && neighbors[i].water < 9) {\n                        let amt = Math.min(this.water, Math.ceil((9 - neighbors[i].water)/2));\n                        this.water-= amt;\n                        neighbors[i].water += amt;\n                        return;\n                    }\n                }\n                // sides take a third of what I have\n                for (let i=3; i<=4; i++) {\n                    if (neighbors[i] !== null && neighbors[i].water < this.water) {\n                        let amt = Math.min(this.water, Math.ceil((9 - neighbors[i].water)/3));\n                        this.water-= amt;\n                        neighbors[i].water += amt;\n                        return;\n                    }\n                }\n            }\n        }, function() {\n            //init\n            this.water = Math.floor(Math.random() * 9);\n        });\n\n        world.registerCellType('rock', {\n            isSolid: true,\n            getColor: function() {\n                return this.lighted ? 10 : 11;\n            },\n            process: function(neighbors) {\n                this.lighted = neighbors[world.TOP.index] && !(neighbors[world.TOP.index].water === 9) && !neighbors[world.TOP.index].isSolid\n                    && neighbors[world.BOTTOM.index] && neighbors[world.BOTTOM.index].isSolid;\n            }\n        });\n\n        // pass in our generated cave data\n        world.initializeFromGrid([\n            { name: 'rock', gridValue: 1 },\n            { name: 'water', gridValue: 0 }\n        ], grid);\n\n        return world;\n    },\n\n    Rain: function(width = 128, height = 128) {\n        // FIRST CREATE CAVES\n        let world = new CellAuto.World({\n            width: width,\n            height: height\n        });\n\n        world.registerCellType('wall', {\n            process: function (neighbors) {\n                let surrounding = this.countSurroundingCellsWithValue(neighbors, 'wasOpen');\n                this.open = (this.wasOpen && surrounding >= 4) || surrounding >= 6;\n            },\n            reset: function () {\n                this.wasOpen = this.open;\n            }\n        }, function () {\n            //init\n            this.open = Math.random() > 0.40;\n        });\n\n        world.initialize([\n            { name: 'wall', distribution: 100 }\n        ]);\n\n        // generate our cave, 10 steps aught to do it\n        for (let i=0; i<10; i++) {\n            world.step();\n        }\n\n        let grid = world.createGridFromValues([\n            { cellType: 'wall', hasProperty: 'open', value: 0 }\n        ], 1);\n\n        // cut the top half of the caves off\n        for (let y=0; y<Math.floor(world.height/2); y++) {\n            for (let x=0; x<world.width; x++) {\n                grid[y][x] = 0;\n            }\n        }\n\n        // NOW USE OUR CAVES TO CREATE A NEW WORLD CONTAINING WATER\n        world = new CellAuto.World({\n            width: width,\n            height: height,\n            clearRect: true\n        });\n\n        world.palette = [\n            [89, 125, 206, 1],\n            [89, 125, 206, 1/9 * 255],\n            [89, 125, 206, 2/9 * 255],\n            [89, 125, 206, 3/9 * 255],\n            [89, 125, 206, 4/9 * 255],\n            [89, 125, 206, 5/9 * 255],\n            [89, 125, 206, 6/9 * 255],\n            [89, 125, 206, 7/9 * 255],\n            [89, 125, 206, 8/9 * 255],\n            [89, 125, 206, 255],\n            [109, 170, 44, 255],\n            [68, 36, 52, 255]\n        ];\n\n        world.registerCellType('air', {\n            getColor: function() {\n                //return '89, 125, 206, ' + (this.water ? Math.max(0.3, this.water/9) : 0);\n                return this.water;\n            },\n            process: function(neighbors) {\n                // rain on the top row\n                if (neighbors[world.TOP.index] === null && Math.random() < 0.02) {\n                    this.water = 5;\n                }\n                else if (this.water === 0) {\n                    // already empty\n                    return;\n                }\n\n                // push my water out to my available neighbors\n\n                // cell below me will take all it can\n                if (neighbors[world.BOTTOM.index] !== null && this.water && neighbors[world.BOTTOM.index].water < 9) {\n                    let amt = Math.min(this.water, 9 - neighbors[world.BOTTOM.index].water);\n                    this.water-= amt;\n                    neighbors[world.BOTTOM.index].water += amt;\n                    return;\n                }\n\n                // bottom two corners take half of what I have\n                for (let i=5; i<=7; i++) {\n                    if (i!=world.BOTTOM.index && neighbors[i] !== null && this.water && neighbors[i].water < 9) {\n                        let amt = Math.min(this.water, Math.ceil((9 - neighbors[i].water)/2));\n                        this.water-= amt;\n                        neighbors[i].water += amt;\n                        return;\n                    }\n                }\n                // sides take a third of what I have\n                for (let i=3; i<=4; i++) {\n                    if (neighbors[i] !== null && neighbors[i].water < this.water) {\n                        let amt = Math.min(this.water, Math.ceil((9 - neighbors[i].water)/3));\n                        this.water-= amt;\n                        neighbors[i].water += amt;\n                        return;\n                    }\n                }\n            }\n        }, function() {\n            //init\n            this.water = 0;\n        });\n\n        world.registerCellType('rock', {\n            isSolid: true,\n            getColor: function() {\n                return this.lighted ? 10 : 11;\n            },\n            process: function(neighbors) {\n                this.lighted = neighbors[world.TOP.index] && !(neighbors[world.TOP.index].water === 9) && !neighbors[world.TOP.index].isSolid\n                    && neighbors[world.BOTTOM.index] && neighbors[world.BOTTOM.index].isSolid;\n            }\n        });\n\n        // pass in our generated cave data\n        world.initializeFromGrid([\n            { name: 'rock', gridValue: 1 },\n            { name: 'air', gridValue: 0 }\n        ], grid);\n\n        return world;\n    },\n\n    /**\n     * Simulates splashing water.\n     * \n     * From https://sanojian.github.io/cellauto\n     */\n    Splashes: function(width = 128, height = 128) {\n        let world = new CellAuto.World({\n            width: width,\n            height: height\n        });\n\n        world.palette = [];\n        let colors = [];\n        for (let index=0; index<64; index++) {\n            world.palette.push([89, 125, 206, (index/64) * 255]);\n            colors[index] = 63 - index;\n        }\n\n        world.registerCellType('water', {\n            getColor: function () {\n                let v = (Math.max(2 * this.value + 0.02, 0) - 0.02) + 0.5;\n                return colors[Math.floor(colors.length * v)];\n            },\n            process: function (neighbors) {\n                if(this.droplet == true) {\n                    for (let i = 0; i < neighbors.length; i++) {\n                        if (neighbors[i] !== null && neighbors[i].value) {\n                            neighbors[i].value = 0.5 *this.value;\n                            neighbors[i].prev = 0.5 *this.prev;\n                        }\n                    }\n                    this.droplet = false;\n                    return true;\n                }\n                let avg = this.getSurroundingCellsAverageValue(neighbors, 'value');\n                this.next = 0.99 * (2 * avg - this.prev);\n                return true;\n            },\n            reset: function () {\n                if(Math.random() > 0.9999) {\n                    this.value = -0.2 + 0.25*Math.random();\n                    this.prev = this.value;\n                    this.droplet = true;\n                }\n                else {\n                    this.prev = this.value;\n                    this.value = this.next;\n                }\n                return true;\n            }\n        }, function () {\n            //init\n            this.water = true;\n            this.value = 0.0;\n            this.prev = this.value;\n            this.next = this.value;\n        });\n\n        world.initialize([\n            { name: 'water', distribution: 100 }\n        ]);\n\n        return world;\n    },\n\n    /**\n     * Rule 52928 - the CA used for Wolfram Alpha's loading animations\n     * \n     * Resources:\n     * https://www.quora.com/What-is-Wolfram-Alphas-loading-screen-a-depiction-of\n     * http://jsfiddle.net/hungrycamel/9UrzJ/\n     */\n    Wolfram: function(width = 96, height = 96) {\n        let world = new CellAuto.World({\n            width: width,\n            height: height,\n            wrap: true\n        });\n\n        world.recommendedFrameFrequency = 2;\n\n        world.palette = [\n            [255, 255, 255, 255], // Background color\n            [255, 110, 0  , 255], // dark orange\n            [255, 130, 0  , 255], //      |\n            [255, 150, 0  , 255], //      |\n            [255, 170, 0  , 255], //      V\n            [255, 180, 0  , 255]  // light orange\n        ];\n\n        let choice = Math.random();\n\n        let seedList = [\n            [\n                [0, 0, 0, 1, 0, 0, 0, 0, 0, 0], \n                [0, 2, 1, 1, 1, 1, 0, 0, 0, 0], \n                [1, 1, 3, 4, 2, 1, 1, 0, 0, 0], \n                [0, 1, 1, 1, 4, 1, 1, 0, 0, 0], \n                [0, 1, 2, 0, 1, 1, 1, 1, 0, 0], \n                [0, 1, 1, 1, 0, 0, 2, 2, 0, 0], \n                [0, 0, 2, 2, 0, 0, 1, 1, 1, 0], \n                [0, 0, 1, 1, 1, 1, 0, 2, 1, 0], \n                [0, 0, 0, 1, 1, 4, 1, 1, 1, 0], \n                [0, 0, 0, 1, 1, 2, 4, 3, 1, 1], \n                [0, 0, 0, 0, 1, 1, 1, 1, 2, 0], \n                [0, 0, 0, 0, 0, 0, 1, 0, 0, 0]\n            ], \n            [[0, 0, 0, 0, 0, 0, 1, 0], [1, 1, 1, 1, 0, 0, 1, 0], [0, 1, 0, 0, 1, 1, 1, 1], [0, 1, 0, 0, 0, 0, 0, 0]], \n            [[0, 0, 0, 0, 0, 0, 1, 1], [0, 0, 1, 1, 1, 0, 1, 1], [1, 1, 0, 1, 1, 1, 0, 0], [1, 1, 0, 0, 0, 0, 0, 0]], \n            [[0, 0, 0, 0, 0, 0, 1, 1], [0, 1, 1, 1, 1, 1, 0, 0], [0, 0, 1, 1, 1, 1, 1, 0], [1, 1, 0, 0, 0, 0, 0, 0]], \n            [[0, 0, 0, 0, 0, 0, 1, 1], [1, 0, 0, 0, 1, 1, 1, 0], [0, 1, 1, 1, 0, 0, 0, 1], [1, 1, 0, 0, 0, 0, 0, 0]], \n            [[0, 0, 0, 0, 0, 0, 1, 1], [1, 0, 0, 1, 1, 0, 1, 1], [1, 1, 0, 1, 1, 0, 0, 1], [1, 1, 0, 0, 0, 0, 0, 0]], \n            [[0, 0, 0, 0, 1, 1, 1, 0], [1, 1, 1, 0, 1, 1, 1, 1], [1, 1, 1, 1, 0, 1, 1, 1], [0, 1, 1, 1, 0, 0, 0, 0]], \n            [[0, 0, 1, 1, 1, 1, 1, 1], [1, 0, 1, 1, 0, 1, 1, 1], [1, 1, 1, 0, 1, 1, 0, 1], [1, 1, 1, 1, 1, 1, 0, 0]], \n            [[0, 1, 0, 0, 0, 1, 1, 1], [1, 0, 1, 1, 0, 1, 1, 1], [1, 1, 1, 0, 1, 1, 0, 1], [1, 1, 1, 0, 0, 0, 1, 0]], \n            [[0, 1, 1, 0, 1, 1, 1, 1], [0, 1, 0, 1, 0, 0, 1, 0], [0, 1, 0, 0, 1, 0, 1, 0], [1, 1, 1, 1, 0, 1, 1, 0]], \n            [[1, 1, 1, 0, 1, 1, 1, 0], [0, 1, 0, 0, 1, 1, 1, 0], [0, 1, 1, 1, 0, 0, 1, 0], [0, 1, 1, 1, 0, 1, 1, 1]], \n            [[1, 1, 1, 0, 1, 1, 1, 1], [1, 1, 0, 1, 1, 1, 1, 0], [0, 1, 1, 1, 1, 0, 1, 1], [1, 1, 1, 1, 0, 1, 1, 1]], \n            [[1, 1, 1, 1, 0, 0, 0, 1], [1, 1, 0, 1, 1, 0, 0, 1], [1, 0, 0, 1, 1, 0, 1, 1], [1, 0, 0, 0, 1, 1, 1, 1]], \n            [[1, 1, 1, 1, 0, 0, 1, 0], [0, 0, 1, 0, 1, 1, 0, 1], [1, 0, 1, 1, 0, 1, 0, 0], [0, 1, 0, 0, 1, 1, 1, 1]], \n            [[1, 1, 1, 1, 0, 0, 1, 0], [1, 0, 0, 1, 1, 0, 1, 1], [1, 1, 0, 1, 1, 0, 0, 1], [0, 1, 0, 0, 1, 1, 1, 1]], \n            [[1, 1, 1, 1, 0, 0, 1, 0], [1, 1, 1, 0, 1, 0, 0, 1], [1, 0, 0, 1, 0, 1, 1, 1], [0, 1, 0, 0, 1, 1, 1, 1]], \n            [[1, 1, 1, 1, 0, 0, 1, 0], [1, 1, 1, 0, 1, 1, 0, 1], [1, 0, 1, 1, 0, 1, 1, 1], [0, 1, 0, 0, 1, 1, 1, 1]], \n            [[1, 1, 1, 1, 0, 0, 1, 0], [1, 1, 1, 1, 0, 0, 1, 1], [1, 1, 0, 0, 1, 1, 1, 1], [0, 1, 0, 0, 1, 1, 1, 1]], \n            [[1, 1, 1, 1, 0, 1, 0, 1], [1, 1, 1, 0, 0, 1, 0, 0], [0, 0, 1, 0, 0, 1, 1, 1], [1, 0, 1, 0, 1, 1, 1, 1]], \n            [[1, 1, 1, 1, 0, 1, 1, 0], [0, 0, 0, 0, 0, 1, 1, 0], [0, 1, 1, 0, 0, 0, 0, 0], [0, 1, 1, 0, 1, 1, 1, 1]], \n            [[1, 1, 1, 1, 0, 1, 1, 0], [0, 1, 0, 0, 1, 0, 1, 0], [0, 1, 0, 1, 0, 0, 1, 0], [0, 1, 1, 0, 1, 1, 1, 1]], \n            [[1, 1, 1, 1, 0, 1, 1, 0], [1, 1, 1, 0, 0, 1, 1, 0], [0, 1, 1, 0, 0, 1, 1, 1], [0, 1, 1, 0, 1, 1, 1, 1]], \n            [[1, 1, 1, 1, 1, 0, 0, 0], [0, 0, 1, 1, 1, 1, 0, 0], [0, 0, 1, 1, 1, 1, 0, 0], [0, 0, 0, 1, 1, 1, 1, 1]], \n            [[1, 1, 1, 1, 1, 0, 0, 0], [1, 1, 0, 1, 1, 1, 1, 0], [0, 1, 1, 1, 1, 0, 1, 1], [0, 0, 0, 1, 1, 1, 1, 1]], \n            [[1, 1, 1, 1, 1, 0, 1, 1], [0, 0, 1, 1, 1, 0, 0, 0], [0, 0, 0, 1, 1, 1, 0, 0], [1, 1, 0, 1, 1, 1, 1, 1]], \n            [[1, 1, 1, 1, 1, 0, 1, 1], [0, 1, 1, 1, 1, 1, 0, 1], [1, 0, 1, 1, 1, 1, 1, 0], [1, 1, 0, 1, 1, 1, 1, 1]], \n            [[1, 1, 1, 1, 1, 0, 1, 1], [1, 1, 0, 1, 0, 1, 1, 0], [0, 1, 1, 0, 1, 0, 1, 1], [1, 1, 0, 1, 1, 1, 1, 1]], \n            [[1, 1, 1, 1, 1, 0, 1, 1], [1, 1, 1, 1, 0, 0, 1, 1], [1, 1, 0, 0, 1, 1, 1, 1], [1, 1, 0, 1, 1, 1, 1, 1]], \n            [[1, 1, 1, 1, 1, 1, 0, 0], [0, 0, 1, 0, 0, 1, 1, 1], [1, 1, 1, 0, 0, 1, 0, 0], [0, 0, 1, 1, 1, 1, 1, 1]], \n            [[1, 1, 1, 1, 1, 1, 0, 0], [0, 1, 1, 1, 1, 1, 1, 0], [0, 1, 1, 1, 1, 1, 1, 0], [0, 0, 1, 1, 1, 1, 1, 1]], \n            [[1, 1, 1, 1, 1, 1, 1, 0], [0, 0, 1, 0, 1, 0, 1, 1], [1, 1, 0, 1, 0, 1, 0, 0], [0, 1, 1, 1, 1, 1, 1, 1]]\n        ];\n\n        world.registerCellType('living', {\n            getColor: function () {\n                return this.state;\n            },\n            process: function (neighbors) {\n\n                let neighborOnes = neighbors.filter(function(item){\n                    return item.state == 1;\n                }).length;\n\n                if(this.state == 0) {\n                    if(neighborOnes == 3 || neighborOnes == 5 || neighborOnes == 7) \n                        this.newState = 1;\n                } else if (this.state == 1) {\n                    if(neighborOnes == 0 || neighborOnes == 1 || neighborOnes == 2 || neighborOnes == 6 || neighborOnes == 8)\n                        this.newState = 2;\n                } else if (this.state == 2) {\n                    this.newState = 3;\n                } else if (this.state == 3) {\n                    this.newState = 4;\n                } else if (this.state == 4) {\n                    this.newState = 0;\n                }\n            },\n            reset: function () {\n                this.state = this.newState;\n            }\n        }, function (x, y) {\n            // Init \n\n            // 50% chance to use a seed\n            if(choice < 0.5){\n                let seed;\n                // 25% chance to use a random seed\n                if(choice < 0.25) {\n                    seed = seedList[Math.floor(Math.random() * seedList.length)];\n                }\n                // 25% chance to use the Wolfram seed\n                else {\n                    seed = seedList[0];\n                }\n\n                let minX = Math.floor(width / 2) - Math.floor(seed[0].length / 2);\n                let maxX = Math.floor(width / 2) + Math.floor(seed[0].length / 2);\n                let minY = Math.floor(height / 2) - Math.floor(seed.length / 2);\n                let maxY = Math.floor(height / 2) + Math.floor(seed.length / 2);\n\n                this.state = 0;\n\n                // If the cell is inside of the seed array (centered in the world), then use its value\n                if (x >= minX && x < maxX && y >= minY && y < maxY) {\n                    this.state = seed[y - minY][x - minX];\n                }\n            } \n            // 50% chance to initialize with noise\n            else {\n                this.state = Math.random() < 0.15 ? 1 : 0;\n            }\n            this.newState = this.state;\n        });\n\n        world.initialize([\n           { name: 'living', distribution: 100 },\n        ]);\n\n        return world;\n    },\n\n    /**\n     * Simulates a Belousov-Zhabotinsky reaction (approximately).\n     * This one's still a little messed up, so consider it experimental.\n     * \n     * Resources:\n     * http://ccl.northwestern.edu/netlogo/models/B-ZReaction\n     * http://www.fractaldesign.net/automataalgorithm.aspx\n     */\n    BelousovZhabotinsky: function(width = 128, height = 128) {\n        let world = new CellAuto.World({\n            width: width,\n            height: height,\n            wrap: true\n        });\n\n        // Override frame frequency for this setup\n        world.recommendedFrameFrequency = 10;\n\n        // Config letiables\n        let kernel = [ // weights for neighbors. First index is for self weight\n         0, 1, 1, 1,\n            1,    1,\n            1, 1, 1\n        ].reverse();\n        let k1 = 5; // Lower gives higher tendency for a cell to be sickened by ill neighbors\n        let k2 = 1; // Lower gives higher tendency for a cell to be sickened by infected neighbors\n        let g = 5;\n        let numStates = 255;\n\n        world.palette = [];\n        for (let i = 0; i < numStates; i++) {\n            let gray = Math.floor((255 / numStates) * i);\n            world.palette.push([gray, gray, gray, 255]);\n        }\n\n        world.registerCellType('bz', {\n            getColor: function () {\n                return this.state;\n            },\n            process: function (neighbors) {\n                let healthy = 0;\n                let infected = 0;\n                let ill = 0;\n                let sumStates = this.state;\n    \n                for(let i = 0; i < neighbors.length + 1; i++) {\n                    let neighbor;\n                    if (i == 8) neighbor = this;\n                    else neighbor = neighbors[i];\n                    \n                    //if(neighbor !== null && neighbor.state){\n                        sumStates += neighbor.state * kernel[i];\n                        if(kernel[i] > 0) {\n                            if(neighbor.state == 0) healthy += 1;\n                            else if(neighbor.state < (numStates - 1)) infected += 1;\n                            else ill += 1;\n                        }\n                    //}\n                }\n\n                if(this.state == 0) {\n                    this.newState = (infected / k1) + (ill / k2);\n                } else if (this.state < (numStates) - 1) {\n                    this.newState = (sumStates / infected + ill + 1) + g;\n                    //this.newState = (sumStates / 9) + g;\n                } else {\n                    this.newState = 0;\n                }\n\n                // Make sure to set state to newstate in a second pass\n                this.newState = Math.max(0, Math.min(numStates - 1, Math.floor(this.newState)));\n\n            },\n            reset: function () {\n                this.state = this.newState;\n            }\n        }, function () {\n            // Init\n            // Generate a random state\n            this.state = Math.random() < 1.0 ? Math.floor(Math.random() * numStates) : 0;\n            this.newState = this.state;\n        });\n\n        world.initialize([\n            { name: 'bz', distribution: 100 }\n        ]);\n\n        return world;\n    }\n\n}\n\n\n/**\n * Simulates a 1D automata.\n * Expects a property `rule` in `options`, which is the integer rule of the CA.\n * \n * Not totally correct yet!\n * \n */\nfunction Elementary(options) {\n    let world = new CellAuto.World(options);\n\n    let rule = (options.rule >>> 0).toString(2);\n    while(rule.length < 8) {\n        rule = \"0\" + rule;\n    }\n\n    console.log(options.rule);\n\n    function processRule(leftAlive, centerAlive, rightAlive) {\n        let index = 0;\n        if(rightAlive) index += 1;\n        if(centerAlive) index += 2;\n        if(leftAlive) index += 4;\n        return rule[rule.length - 1 - index];\n    }\n    \n    function testRule() {\n        let lastIndex = rule.length - 1;\n        for(let i = 0; i < 8; i++) {\n            // Convert i to binary and use it to feed processRule\n            let bin = ((lastIndex - i) >>> 0).toString(2);\n            while(bin.length < 3) bin = \"0\" + bin;\n            let ruleOut = processRule(bin[0] == \"1\", bin[1] == \"1\", bin[2] == \"1\");\n\n            console.assert(ruleOut == rule[i], bin + \" \" + rule[i] + \" \" + (ruleOut == rule[i]).toString());\n        }\n    }\n    //testRule();\n\n    world.registerCellType('living', {\n        getColor: function () {\n            return this.alive ? 0 : 1;\n        },\n        process: function (neighbors) {\n            function getWasAlive(neighbor){\n                if(neighbor != null)\n                    return neighbor.wasAlive;\n                return false;\n            }\n            \n            // If the cell isn't active yet, determine its state based on its upper neighbors\n            if(!this.wasAlive) {\n                this.alive = processRule(getWasAlive(neighbors[0]), getWasAlive(neighbors[1]), getWasAlive(neighbors[2])) == \"1\";\n            }\n        },\n        reset: function () {\n            this.wasAlive = this.alive;\n        }\n    }, function (x, y) {\n        // Init\n        this.alive = (x == Math.floor(options.width / 2)) && (y == 1);\n        //this.alive = Math.random() < 0.01;\n        //this.wasAlive = this.alive;\n    });\n\n    world.initialize([\n        { name: 'living', distribution: 100 }\n    ]);\n\n    return world;\n}\n\n/**\n * Simulates a Life-like automata. Uses B/S notation.\n * See https://en.wikipedia.org/wiki/Life-like_cellular_automaton\n * \n * Expects two additional properties in `options`:\n * `B`: An array of ints representing the B component of the rule\n * `S`: An array of ints representing the S component of the rule\n */\nfunction LifeLike(options, distributionFunc) {\n    let world = new CellAuto.World(options);\n\n    world.registerCellType('living', {\n        getColor: function () {\n            return this.alive ? 0 : 1;\n        },\n        process: function (neighbors) {\n            let surrounding = this.countSurroundingCellsWithValue(neighbors, 'wasAlive');\n            this.alive = options.B.includes(surrounding) || options.S.includes(surrounding) && this.alive;\n        },\n        reset: function () {\n            this.wasAlive = this.alive;\n        }\n    }, function (x, y) {\n        // Init\n        if(distributionFunc)\n            this.alive = distributionFunc(x, y);\n        else   \n            this.alive = Math.random() < 0.5;\n    });\n\n    world.initialize([\n        { name: 'living', distribution: 100 }\n    ]);\n\n    return world;\n}"]}