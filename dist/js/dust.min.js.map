{"version":3,"sources":["node_modules/browser-pack/_prelude.js","src/dust.js","src/gui.js","src/main.js","src/utils/webgl-detect.js","src/vendor/cellauto.js","src/worlds.js"],"names":["e","t","n","r","s","o","u","a","require","i","f","Error","code","l","exports","call","length","1","module","_cellauto","_worlds","FrameCounter","Dust","container","initFinishedCallback","_this","this","_classCallCheck","worldNames","Object","keys","Worlds","worldOptions","name","Math","random","app","PIXI","Application","antialias","transparent","resolution","appendChild","view","ticker","add","delta","OnUpdate","framecounter","stop","loader","load","res","loadedResources","Setup","start","world","width","height","err","frameFrequency","recommendedFrameFrequency","renderer","resize","style","cssText","border","backgroundColor","textureCanvas","document","createElement","textureCtx","getContext","baseTexture","BaseTexture","fromCanvas","sprite","Sprite","Texture","Rectangle","x","y","anchor","set","filter","Filter","fragShader","data","filters","stage","removeChildren","addChild","UpdateTexture","IncrementFrame","uniforms","time","step","render","index","ctx","fillStyle","fillRect","pix","createImageData","paletteIndex","grid","getColor","colorRGBA","palette","putImageData","update","frameLimit","arguments","undefined","frameCount","passedFrames","GUI","dust","dat","console","warn","gui","min","max","listen","getOwnPropertyNames","onChange","_webglDetect","_dust","_gui","getElementById","Detector","HasWebGL","Init","log","innerHTML","GetErrorHTML","classList","window","WebGLRenderingContext","canvas","names","context","getParameter","message","CellAutoCell","locX","locY","delays","CAWorld","options","wrap","TOPLEFT","TOP","TOPRIGHT","LEFT","RIGHT","BOTTOMLEFT","BOTTOM","BOTTOMRIGHT","randomGenerator","neighborhood","hexTiles","reset","fillNeighbors","cell","process","steps","action","splice","NEIGHBORLOCS","diffX","diffY","flatTopped","neighbors","neighborX","neighborY","initialize","arrayTypeDist","sort","b","distribution","totalDist","cellTypes","registerCellType","cellOptions","init","key","_typeof","JSON","parse","stringify","prototype","create","constructor","cellType","countSurroundingCellsWithValue","value","surrounding","delay","numSteps","fn","push","getSurroundingCellsAverageValue","summed","initializeFromGrid","values","initGrid","gridValue","createGridFromValues","defaultValue","newGrid","hasProperty","CellAuto","World","Cell","define","amd","Elementary","processRule","leftAlive","centerAlive","rightAlive","rule","toString","alive","getWasAlive","neighbor","wasAlive","floor","LifeLike","distributionFunc","B","includes","S","RandomRule","rules","Life","Mazecetric","Diamoeba","Anneal","Lava","colors","v","sin","PI","droplet","prev","avg","next","CyclicRainbows","state","changing","CavesWithWater","open","wasOpen","clearRect","water","amt","_i","_amt","ceil","_i2","_amt2","isSolid","lighted","Rain","_i3","_amt3","_i4","_amt4","Splashes","Wolfram","choice","seedList","neighborOnes","item","newState","seed","minX","maxX","minY","maxY","BelousovZhabotinsky","kernel","reverse","gray","healthy","infected","ill","sumStates","_i5","numStates"],"mappings":"CAAA,QAAAA,GAAAC,EAAAC,EAAAC,GAAA,QAAAC,GAAAC,EAAAC,GAAA,IAAAJ,EAAAG,GAAA,CAAA,IAAAJ,EAAAI,GAAA,CAAA,GAAAE,GAAA,kBAAAC,UAAAA,OAAA,KAAAF,GAAAC,EAAA,MAAAA,GAAAF,GAAA,EAAA,IAAAI,EAAA,MAAAA,GAAAJ,GAAA,EAAA,IAAAK,GAAA,GAAAC,OAAA,uBAAAN,EAAA,IAAA,MAAAK,GAAAE,KAAA,mBAAAF,EAAA,GAAAG,GAAAX,EAAAG,IAAAS,WAAAb,GAAAI,GAAA,GAAAU,KAAAF,EAAAC,QAAA,SAAAd,GAAA,GAAAE,GAAAD,EAAAI,GAAA,GAAAL,EAAA,OAAAI,GAAAF,GAAAF,IAAAa,EAAAA,EAAAC,QAAAd,EAAAC,EAAAC,EAAAC,GAAA,MAAAD,GAAAG,GAAAS,QAAA,IAAA,GAAAL,GAAA,kBAAAD,UAAAA,QAAAH,EAAA,EAAAA,EAAAF,EAAAa,OAAAX,IAAAD,EAAAD,EAAAE,GAAA,OAAAD,KAAAa,GAAA,SAAAT,EAAAU,EAAAJ,saCAAK,EAAAX,EAAA,wBACAY,qJAAAZ,EAAA,gBA4JMa,KA1JOC,gBACT,QAAAA,GAAYC,EAAWC,GAAsB,GAAAC,GAAAC,IAAAC,GAAAD,KAAAJ,GACzCI,KAAKH,UAAYA,CAEjB,IAAIK,GAAaC,OAAOC,KAAPV,EAAAW,OACjBL,MAAKM,cACDC,KAAML,EAAWA,EAAWZ,OAASkB,KAAKC,UAAY,IAM1DT,KAAKU,IAAM,GAAIC,MAAKC,aAEZC,WAAW,EACXC,aAAa,EACbC,WAAY,IAGpBf,KAAKH,UAAUmB,YAAYhB,KAAKU,IAAIO,MAGpCjB,KAAKU,IAAIQ,OAAOC,IAAI,SAACC,GACjBrB,EAAKsB,SAASD,KAGlBpB,KAAKsB,aAAe,GAAI3B,GAAa,EAAG,MAGxCK,KAAKU,IAAIa,OAGTZ,KAAKa,OACAL,IAAI,aAAc,0BAClBM,KAAK,SAACD,EAAQE,GAEX3B,EAAK4B,gBAAkBD,EACvB3B,EAAK6B,QACL7B,EAAKW,IAAImB,QACT/B,gDAYR,IACIE,KAAK8B,MAAQpC,EAAAW,OAAOL,KAAKM,aAAaC,MAAMlB,KAAKW,KAAMA,KAAKM,aAAayB,MAAO/B,KAAKM,aAAa0B,QACpG,MAAOC,GACL,KAAM,uBAAyBjC,KAAKM,aAAaC,KAAO,mBAE5DP,KAAKsB,aAAaY,eAAiBlC,KAAK8B,MAAMK,2BAA6B,EAE3EnC,KAAKU,IAAI0B,SAASC,OAAOrC,KAAK8B,MAAMC,MAAO/B,KAAK8B,MAAME,QAGtDhC,KAAKU,IAAI0B,SAASnB,KAAKqB,MAAMC,QAA7B,yWASAvC,KAAKU,IAAI0B,SAASnB,KAAKqB,MAAME,OAAS,mBACtCxC,KAAKU,IAAI0B,SAASnB,KAAKqB,MAAMP,MAAQ,OACrC/B,KAAKU,IAAI0B,SAASnB,KAAKqB,MAAMN,OAAS,OACtChC,KAAKU,IAAI0B,SAASK,gBAAkB,SAGpCzC,KAAK0C,cAAgBC,SAASC,cAAc,UAC5C5C,KAAK0C,cAAcX,MAAQ/B,KAAK8B,MAAMC,MACtC/B,KAAK0C,cAAcV,OAAShC,KAAK8B,MAAME,OACvChC,KAAK6C,WAAa7C,KAAK0C,cAAcI,WAAW,MAEhD9C,KAAK+C,YAAc,GAAIpC,MAAKqC,YAAYC,WAAWjD,KAAK0C,eACxD1C,KAAKkD,OAAS,GAAIvC,MAAKwC,OACnB,GAAIxC,MAAKyC,QAAQpD,KAAK+C,YAAa,GAAIpC,MAAK0C,UAAU,EAAG,EAAGrD,KAAK8B,MAAMC,MAAO/B,KAAK8B,MAAME,UAI7FhC,KAAKkD,OAAOI,EAAItD,KAAK8B,MAAMC,MAAQ,EACnC/B,KAAKkD,OAAOK,EAAIvD,KAAK8B,MAAME,OAAS,EACpChC,KAAKkD,OAAOM,OAAOC,IAAI,IAGvBzD,KAAK0D,OAAS,GAAI/C,MAAKgD,OAAO,KAAM3D,KAAK2B,gBAAgBiC,WAAWC,MACpE7D,KAAKkD,OAAOY,SAAW9D,KAAK0D,QAE5B1D,KAAKU,IAAIqD,MAAMC,iBACfhE,KAAKU,IAAIqD,MAAME,SAASjE,KAAKkD,QAG7BlD,KAAKkE,iDAMA9C,GACQpB,KAAKsB,aAAa6C,mBAE3BnE,KAAK0D,OAAOU,SAASC,MAAQjD,EAC7BpB,KAAK8B,MAAMwC,OACXtE,KAAKkE,gBACLlE,KAAKU,IAAI6D,kDAYb,GAAIC,GAAQ,EACRC,EAAMzE,KAAK6C,UACf4B,GAAIC,UAAY,QAChBD,EAAIE,SAAS,EAAG,EAAG3E,KAAK0C,cAAcX,MAAO/B,KAAK0C,cAAcV,OAEhE,KAAK,GADD4C,GAAMH,EAAII,gBAAgB7E,KAAK0C,cAAcX,MAAO/B,KAAK0C,cAAcV,QAClEuB,EAAI,EAAGA,EAAIvD,KAAK0C,cAAcV,OAAQuB,IAC3C,IAAK,GAAID,GAAI,EAAGA,EAAItD,KAAK0C,cAAcX,MAAOuB,IAAK,CAC/C,GAAIwB,GAAe9E,KAAK8B,MAAMiD,KAAKxB,GAAGD,GAAG0B,WACrCC,EAAYjF,KAAK8B,MAAMoD,QAAQJ,EACnC,IAAgB,MAAbG,EAMC,KAAM,gCAAkCH,CALxCF,GAAIf,KAAKW,KAAWS,EAAU,GAC9BL,EAAIf,KAAKW,KAAWS,EAAU,GAC9BL,EAAIf,KAAKW,KAAWS,EAAU,GAC9BL,EAAIf,KAAKW,KAAWS,EAAU,GAM1CR,EAAIU,aAAaP,EAAK,EAAG,GAGzB5E,KAAK+C,YAAYqC,6BAUrB,QAAAzF,GAAYuC,GAAmC,GAAnBmD,GAAmBC,UAAAhG,OAAA,OAAAiG,KAAAD,UAAA,GAAAA,UAAA,GAAN,IAAMrF,GAAAD,KAAAL,GAE3CK,KAAKwF,WAAa,EAGlBxF,KAAKyF,aAAe,EAGpBzF,KAAKkC,eAAiBA,EAItBlC,KAAKqF,WAAaA,qDAQlB,MADArF,MAAKwF,YAAc,EAChBxF,KAAKwF,WAAaxF,KAAKkC,gBAAkB,MAElB,MAAnBlC,KAAKqF,YAAsBrF,KAAKyF,cAAgBzF,KAAKqF,cAGxDrF,KAAKwF,WAAa,EAClBxF,KAAKyF,cAAgB,GACd,gfCzLnB/F,EAAAZ,EAAA,iBAEa4G,kFAKGC,GACR,GAAmB,mBAATC,KAEN,WADAC,SAAQC,KAAK,yDAIjB,IAAIC,GAAM,GAAIH,KAAIF,GAElBK,GAAI5E,IAAIwE,EAAKrE,aAAc,kBAAkB0E,IAAI,GAAGC,IAAI,IAAI3B,KAAK,GAAG4B,SAEpEH,EAAI5E,IAAIwE,EAAKrF,aAAc,OAAQH,OAAOgG,oBAAPzG,EAAAW,SAAoC+F,SAAS,WAC5ET,EAAK/D,UACNrB,KAAK,UAERwF,EAAI5E,IAAIwE,EAAM,SAASpF,KAAK,qECrBpC,IAAA8F,GAAAvH,EAAA,2BACAwH,EAAAxH,EAAA,aACAyH,EAAAzH,EAAA,YAEIe,EAAY8C,SAAS6D,eAAe,iBAExC,IAAMH,EAAAI,SAASC,WAOX,GAAIf,GAAO,GAAAW,GAAA1G,KAASC,EAAW,WAE3B0G,EAAAb,IAAIiB,KAAKhB,SAPbE,SAAQe,IAAI,2CACZ/G,EAAUgH,UAAYR,EAAAI,SAASK,eAC/BjH,EAAUkH,UAAU5F,IAAI,+eCVtBsF,sFAIE,GAAMO,OAAOC,sBAAuB,CAKhC,IAAI,GAJAC,GAASvE,SAASC,cAAc,UAC5BuE,GAAS,QAAS,qBAAsB,YAAa,aACzDC,GAAU,EAENrI,EAAE,EAAEA,EAAE,EAAEA,IACZ,IAEI,IADAqI,EAAUF,EAAOpE,WAAWqE,EAAMpI,MACY,kBAAxBqI,GAAQC,aAE1B,OAAO,EAEb,MAAM/I,IAIZ,OAAO,EAGX,OAAO,yCAGwB,GAAfgJ,GAAehC,UAAAhG,OAAA,OAAAiG,KAAAD,UAAA,GAAAA,UAAA,GAAL,IAM1B,OALc,OAAXgC,IACCA,EAAA,0PAIJ,oFAEiCA,EAFjC,4CASCb,SAAAA,sCCzCT,SAASc,GAAaC,EAAMC,GAC3BzH,KAAKsD,EAAIkE,EACTxH,KAAKuD,EAAIkE,EAETzH,KAAK0H,UAgCN,QAASC,GAAQC,GAEhB5H,KAAK+B,MAAQ,GACb/B,KAAKgC,OAAS,GACdhC,KAAK4H,QAAUA,EAEf5H,KAAK6H,MAAO,EAEZ7H,KAAK8H,SAAmBtD,MAAO,EAAGlB,GAAI,EAAGC,GAAI,GAC7CvD,KAAK+H,KAAmBvD,MAAO,EAAGlB,EAAI,EAAGC,GAAI,GAC7CvD,KAAKgI,UAAmBxD,MAAO,EAAGlB,EAAI,EAAGC,GAAI,GAC7CvD,KAAKiI,MAAmBzD,MAAO,EAAGlB,GAAI,EAAGC,EAAI,GAC7CvD,KAAKkI,OAAmB1D,MAAO,EAAGlB,EAAI,EAAGC,EAAI,GAC7CvD,KAAKmI,YAAmB3D,MAAO,EAAGlB,GAAI,EAAGC,EAAI,GAC7CvD,KAAKoI,QAAmB5D,MAAO,EAAGlB,EAAI,EAAGC,EAAI,GAC7CvD,KAAKqI,aAAmB7D,MAAO,EAAGlB,EAAI,EAAGC,EAAI,GAE7CvD,KAAKsI,gBAAkB9H,KAAKC,MAG5B,IAAI8H,IAAgB,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAE1DvI,MAAK4H,QAAQY,WAEhBD,GAAgB,KAAM,KAAM,KAAM,KAAM,KAAM,OAE/CvI,KAAKsE,KAAO,WACX,GAAIf,GAAGD,CACP,KAAKC,EAAE,EAAGA,EAAEvD,KAAKgC,OAAQuB,IACxB,IAAKD,EAAE,EAAGA,EAAEtD,KAAK+B,MAAOuB,IACvBtD,KAAK+E,KAAKxB,GAAGD,GAAGmF,OAKlB,KAAKlF,EAAEvD,KAAKgC,OAAO,EAAGuB,GAAG,EAAGA,IAC3B,IAAKD,EAAEtD,KAAK+B,MAAM,EAAGuB,GAAG,EAAGA,IAAK,CAC/BtD,KAAK0I,cAAcH,EAAcjF,EAAGC,EACpC,IAAIoF,GAAO3I,KAAK+E,KAAKxB,GAAGD,EACxBqF,GAAKC,QAAQL,EAGb,KAAK,GAAIxJ,GAAE,EAAGA,EAAE4J,EAAKjB,OAAOpI,OAAQP,MACnC4J,EAAKjB,OAAO3I,GAAG8J,OACa,IAE3BF,EAAKjB,OAAO3I,GAAG+J,OAAOH,GACtBA,EAAKjB,OAAOqB,OAAOhK,EAAG,GACtBA,MASL,IAAIiK,KACDC,MAAQ,WAAa,OAAQ,GAAMC,MAAO,WAAa,OAAQ,KAC/DD,MAAQ,WAAa,MAAO,IAAMC,MAAO,WAAa,OAAQ,KAC9DD,MAAQ,WAAa,MAAO,IAAMC,MAAO,WAAa,OAAQ,KAC9DD,MAAQ,WAAa,OAAQ,GAAMC,MAAO,WAAa,MAAO,MAC9DD,MAAQ,WAAa,MAAO,IAAMC,MAAO,WAAa,MAAO,MAC7DD,MAAQ,WAAa,OAAQ,GAAMC,MAAO,WAAa,MAAO,MAC9DD,MAAQ,WAAa,MAAO,IAAMC,MAAO,WAAa,MAAO,MAC7DD,MAAQ,WAAa,MAAO,IAAMC,MAAO,WAAa,MAAO,KAmHhE,IAjHIlJ,KAAK4H,QAAQY,WAGfQ,EAFGhJ,KAAK4H,QAAQuB,aAGbF,MAAQ,WAAa,OAAQ,GAAMC,MAAO,SAAS5F,GAAK,MAAOA,GAAE,GAAK,EAAI,KAC1E2F,MAAQ,WAAa,MAAO,IAAMC,MAAO,WAAa,OAAQ,KAC9DD,MAAQ,WAAa,MAAO,IAAMC,MAAO,SAAS5F,GAAK,MAAOA,GAAE,GAAK,EAAI,KACzE2F,MAAQ,WAAa,MAAO,IAAMC,MAAO,SAAS5F,GAAK,MAAOA,GAAE,EAAI,EAAI,KACxE2F,MAAQ,WAAa,MAAO,IAAMC,MAAO,WAAa,MAAO,MAC7DD,MAAQ,WAAa,OAAQ,GAAMC,MAAO,SAAS5F,GAAK,MAAOA,GAAE,EAAI,EAAI,OAMzE2F,MAAQ,SAAS3F,EAAGC,GAAK,MAAOA,GAAE,EAAI,GAAK,GAAM2F,MAAO,WAAa,OAAQ,KAC7ED,MAAQ,SAAS3F,EAAGC,GAAK,MAAOA,GAAE,EAAI,EAAI,GAAM2F,MAAO,WAAa,OAAQ,KAC5ED,MAAQ,WAAa,OAAQ,GAAMC,MAAO,WAAa,MAAO,MAC9DD,MAAQ,WAAa,MAAO,IAAMC,MAAO,WAAa,MAAO,MAC7DD,MAAQ,SAAS3F,EAAGC,GAAK,MAAOA,GAAE,EAAI,GAAK,GAAM2F,MAAO,WAAa,MAAO,MAC5ED,MAAQ,SAAS3F,EAAGC,GAAK,MAAOA,GAAE,EAAI,EAAI,GAAM2F,MAAO,WAAa,MAAO,OAKhFlJ,KAAK0I,cAAgB,SAASU,EAAW9F,EAAGC,GAC3C,IAAK,GAAIxE,GAAE,EAAGA,EAAEiK,EAAa1J,OAAQP,IAAK,CACzC,GAAIsK,GAAY/F,EAAI0F,EAAajK,GAAGkK,MAAM3F,EAAGC,GACzC+F,EAAY/F,EAAIyF,EAAajK,GAAGmK,MAAM5F,EAAGC,EACzCvD,MAAK6H,OAERwB,GAAaA,EAAYrJ,KAAK+B,OAAS/B,KAAK+B,MAC5CuH,GAAaA,EAAYtJ,KAAKgC,QAAUhC,KAAKgC,SAEzChC,KAAK6H,OAASwB,EAAY,GAAKC,EAAY,GAAKD,GAAarJ,KAAK+B,OAASuH,GAAatJ,KAAKgC,QACjGoH,EAAUrK,GAAK,KAGfqK,EAAUrK,GAAKiB,KAAK+E,KAAKuE,GAAWD,KAKvCrJ,KAAKuJ,WAAa,SAASC,GAG1BA,EAAcC,KAAK,SAAS5K,EAAG6K,GAC9B,MAAO7K,GAAE8K,aAAeD,EAAEC,aAAe,GAAK,GAK/C,KAAK,GAFDC,GAAY,EAEP7K,EAAE,EAAGA,EAAEyK,EAAclK,OAAQP,IACrC6K,GAAaJ,EAAczK,GAAG4K,aAC9BH,EAAczK,GAAG4K,aAAeC,CAGjC5J,MAAK+E,OACL,KAAK,GAAIxB,GAAE,EAAGA,EAAEvD,KAAKgC,OAAQuB,IAAK,CACjCvD,KAAK+E,KAAKxB,KACV,KAAK,GAAID,GAAE,EAAGA,EAAEtD,KAAK+B,MAAOuB,IAAK,CAChC,GAAI7C,GAAkC,IAAzBT,KAAKsI,iBAElB,KAAKvJ,EAAE,EAAGA,EAAEyK,EAAclK,OAAQP,IACjC,GAAI0B,GAAU+I,EAAczK,GAAG4K,aAAc,CAC5C3J,KAAK+E,KAAKxB,GAAGD,GAAK,GAAItD,MAAK6J,UAAUL,EAAczK,GAAGwB,MAAM+C,EAAGC,EAC/D,WAOLvD,KAAK6J,aACL7J,KAAK8J,iBAAmB,SAASvJ,EAAMwJ,EAAaC,GA4BnD,GA3BAhK,KAAK6J,UAAUtJ,GAAQ,SAAS+C,EAAGC,GAOlC,GANAgE,EAAalI,KAAKW,KAAMsD,EAAGC,GAEvByG,GACHA,EAAK3K,KAAKW,KAAMsD,EAAGC,GAGhBwG,EACH,IAAK,GAAIE,KAAOF,GACiB,kBAArBA,GAAYE,KAEU,WAA5BC,EAAOH,EAAYE,IAEtBjK,KAAKiK,GAAOE,KAAKC,MAAMD,KAAKE,UAAUN,EAAYE,KAIlDjK,KAAKiK,GAAOF,EAAYE,KAM7BjK,KAAK6J,UAAUtJ,GAAM+J,UAAYnK,OAAOoK,OAAOhD,EAAa+C,WAC5DtK,KAAK6J,UAAUtJ,GAAM+J,UAAUE,YAAcxK,KAAK6J,UAAUtJ,GAC5DP,KAAK6J,UAAUtJ,GAAM+J,UAAUG,SAAWlK,EAEtCwJ,EACH,IAAK,GAAIE,KAAOF,GACiB,kBAArBA,GAAYE,KAEtBjK,KAAK6J,UAAUtJ,GAAM+J,UAAUL,GAAOF,EAAYE,KAOlDrC,EACH,IAAK,GAAIqC,KAAOrC,GACf5H,KAAKiK,GAAOrC,EAAQqC,kNAnNvB1C,GAAa+C,UAAU1B,QAAU,SAASQ,KAG1C7B,EAAa+C,UAAUI,+BAAiC,SAAStB,EAAWuB,GAE3E,IAAK,GADDC,GAAc,EACT7L,EAAI,EAAGA,EAAIqK,EAAU9J,OAAQP,IAChB,OAAjBqK,EAAUrK,IAAeqK,EAAUrK,GAAG4L,IACzCC,GAGF,OAAOA,IAERrD,EAAa+C,UAAUO,MAAQ,SAASC,EAAUC,GACjD/K,KAAK0H,OAAOsD,MAAOnC,MAAOiC,EAAUhC,OAAQiC,KAG7CxD,EAAa+C,UAAU7B,MAAQ,SAASW,KAIxC7B,EAAa+C,UAAUW,gCAAkC,SAAS7B,EAAWuB,GAE5E,IAAK,GADDO,GAAS,EACJnM,EAAI,EAAGA,EAAIqK,EAAU9J,OAAQP,IAChB,OAAjBqK,EAAUrK,KAAgBqK,EAAUrK,GAAG4L,IAAkC,IAAxBvB,EAAUrK,GAAG4L,KACjEO,GAAU9B,EAAUrK,GAAG4L,GAGzB,OAAOO,GAAS9B,EAAU9J,QA8L3BqI,EAAQ2C,UAAUa,mBAAsB,SAASC,EAAQC,GAExDrL,KAAK+E,OACL,KAAK,GAAIxB,GAAE,EAAGA,EAAEvD,KAAKgC,OAAQuB,IAAK,CACjCvD,KAAK+E,KAAKxB,KACV,KAAK,GAAID,GAAE,EAAGA,EAAEtD,KAAK+B,MAAOuB,IAC3B,IAAK,GAAIvE,GAAE,EAAGA,EAAEqM,EAAO9L,OAAQP,IAC9B,GAAIqM,EAAOrM,GAAGuM,YAAcD,EAAS9H,GAAGD,GAAI,CAC3CtD,KAAK+E,KAAKxB,GAAGD,GAAK,GAAItD,MAAK6J,UAAUuB,EAAOrM,GAAGwB,MAAM+C,EAAGC,EACxD,UAQLoE,EAAQ2C,UAAUiB,qBAAuB,SAASH,EAAQI,GAGzD,IAAK,GAFDC,MAEKlI,EAAE,EAAGA,EAAEvD,KAAKgC,OAAQuB,IAAK,CACjCkI,EAAQlI,KACR,KAAK,GAAID,GAAI,EAAGA,EAAItD,KAAK+B,MAAOuB,IAAK,CACpCmI,EAAQlI,GAAGD,GAAKkI,CAEhB,KAAK,GADD7C,GAAO3I,KAAK+E,KAAKxB,GAAGD,GACfvE,EAAE,EAAGA,EAAEqM,EAAO9L,OAAQP,IAC1B4J,EAAK8B,UAAYW,EAAOrM,GAAG0L,UAAY9B,EAAKyC,EAAOrM,GAAG2M,eACzDD,EAAQlI,GAAGD,GAAK8H,EAAOrM,GAAG4L,QAM9B,MAAOc,IAGP,WACC,GAAIE,IACFC,MAAOjE,EACPkE,KAAMtE,EAGc,mBAAXuE,SAAyBA,OAAOC,IACzCD,OAAO,WAAY,WACjB,MAAOH,SAEkB,KAAXnM,GAA0BA,EAAOJ,QACjDI,EAAOJ,QAAUuM,EAEjB3E,OAAO2E,SAAWA,yCCqhBtB,SAASK,GAAWpE,GAUhB,QAASqE,GAAYC,EAAWC,EAAaC,GACzC,GAAI5H,GAAQ,CAIZ,OAHG4H,KAAY5H,GAAS,GACrB2H,IAAa3H,GAAS,GACtB0H,IAAW1H,GAAS,GAChB6H,EAAKA,EAAK/M,OAAS,EAAIkF,GAXlC,IAHA,GAAI1C,GAAQ,GAAI6J,GAASC,MAAMhE,GAE3ByE,GAAQzE,EAAQyE,OAAS,GAAGC,SAAS,GACnCD,EAAK/M,OAAS,GAChB+M,EAAO,IAAMA,CAwDjB,OArDAxG,SAAQe,IAAIgB,EAAQyE,MAuBpBvK,EAAMgI,iBAAiB,UACnB9E,SAAU,WACN,MAAOhF,MAAKuM,MAAQ,EAAI,GAE5B3D,QAAS,SAAUQ,GACf,QAASoD,GAAYC,GACjB,MAAe,OAAZA,GACQA,EAASC,SAKpB1M,KAAK0M,WACL1M,KAAKuM,MAAwG,KAAhGN,EAAYO,EAAYpD,EAAU,IAAKoD,EAAYpD,EAAU,IAAKoD,EAAYpD,EAAU,OAG7GX,MAAO,WACHzI,KAAK0M,SAAW1M,KAAKuM,QAE1B,SAAUjJ,EAAGC,GAEZvD,KAAKuM,MAASjJ,GAAK9C,KAAKmM,MAAM/E,EAAQ7F,MAAQ,IAAa,GAALwB,IAK1DzB,EAAMyH,aACAhJ,KAAM,SAAUoJ,aAAc,OAG7B7H,EAWX,QAAS8K,GAAShF,EAASiF,GACvB,GAAI/K,GAAQ,GAAI6J,GAASC,MAAMhE,EAyB/B,OAvBA9F,GAAMgI,iBAAiB,UACnB9E,SAAU,WACN,MAAOhF,MAAKuM,MAAQ,EAAI,GAE5B3D,QAAS,SAAUQ,GACf,GAAIwB,GAAc5K,KAAK0K,+BAA+BtB,EAAW,WACjEpJ,MAAKuM,MAAQ3E,EAAQkF,EAAEC,SAASnC,IAAgBhD,EAAQoF,EAAED,SAASnC,IAAgB5K,KAAKuM,OAE5F9D,MAAO,WACHzI,KAAK0M,SAAW1M,KAAKuM,QAE1B,SAAUjJ,EAAGC,GAGRvD,KAAKuM,MADNM,EACcA,EAAiBvJ,EAAGC,GAEpB/C,KAAKC,SAAW,KAGrCqB,EAAMyH,aACAhJ,KAAM,SAAUoJ,aAAc,OAG7B7H,kEAx4BX,IAAArC,GAAAX,EAAA,wBAAY6M,4JAEDvM,GAAAiB,QAKP4M,WAAY,WAAqC,GAA3BlL,GAA2BuD,UAAAhG,OAAA,OAAAiG,KAAAD,UAAA,GAAAA,UAAA,GAAnB,IAAKtD,EAAcsD,UAAAhG,OAAA,OAAAiG,KAAAD,UAAA,GAAAA,UAAA,GAAL,IACpC4H,GACA,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,IAAK,IAAK,IAY1C,OAAOlB,IATHjK,MAAOA,EACPC,OAAQA,EACRqK,KAAMa,EAAMA,EAAM5N,OAASkB,KAAKC,UAAY,GAC5CyE,UACK,GAAI,GAAI,GAAI,MACZ,IAAK,IAAK,IAAK,MAEpB2C,MAAM,KASdsF,KAAM,WAWF,MAAOP,IATH7K,MAFmCuD,UAAAhG,OAAA,OAAAiG,KAAAD,UAAA,GAAAA,UAAA,GAAnB,IAGhBtD,OAHmCsD,UAAAhG,OAAA,OAAAiG,KAAAD,UAAA,GAAAA,UAAA,GAAL,IAI9BwH,GAAI,GACJE,GAAI,EAAG,GACP9H,UACK,GAAI,GAAI,GAAI,MACZ,IAAK,IAAK,IAAK,SAU5BkI,WAAY,WAYR,MAAOR,IAVH7K,MAFsCuD,UAAAhG,OAAA,OAAAiG,KAAAD,UAAA,GAAAA,UAAA,GAAjB,GAGrBtD,OAHsCsD,UAAAhG,OAAA,OAAAiG,KAAAD,UAAA,GAAAA,UAAA,GAAJ,GAIlCwH,GAAI,GACJE,GAAI,EAAG,EAAG,EAAG,GACb9H,UACK,GAAI,GAAI,GAAI,MACZ,IAAK,IAAK,IAAK,MAEpB/C,0BAA2B,GAEN,SAACmB,EAAGC,GAEzB,MAAO/C,MAAKC,SAAW,MAO/B4M,SAAU,WAYN,MAAOT,IAVH7K,MAFoCuD,UAAAhG,OAAA,OAAAiG,KAAAD,UAAA,GAAAA,UAAA,GAAjB,GAGnBtD,OAHoCsD,UAAAhG,OAAA,OAAAiG,KAAAD,UAAA,GAAAA,UAAA,GAAJ,GAIhCwH,GAAI,EAAG,EAAG,EAAG,EAAG,GAChBE,GAAI,EAAG,EAAG,EAAG,GACb9H,UACK,GAAI,GAAI,GAAI,MACZ,IAAK,IAAK,IAAK,MAEpB/C,0BAA2B,GAEN,SAACmB,EAAGC,GAEzB,MAAO/C,MAAKC,SAAW,MAO/B6M,OAAQ,WAYJ,MAAOV,IAVH7K,MAFkCuD,UAAAhG,OAAA,OAAAiG,KAAAD,UAAA,GAAAA,UAAA,GAAjB,GAGjBtD,OAHkCsD,UAAAhG,OAAA,OAAAiG,KAAAD,UAAA,GAAAA,UAAA,GAAJ,GAI9BwH,GAAI,EAAG,EAAG,EAAG,GACbE,GAAI,EAAG,EAAG,EAAG,EAAG,GAChB9H,UACK,GAAI,GAAI,GAAI,MACZ,IAAK,IAAK,IAAK,MAEpB/C,0BAA2B,GAEN,SAACmB,EAAGC,GAEzB,MAAO/C,MAAKC,SAAW,MAS/B8M,KAAM,WAAqC,GAA3BxL,GAA2BuD,UAAAhG,OAAA,OAAAiG,KAAAD,UAAA,GAAAA,UAAA,GAAnB,IAAKtD,EAAcsD,UAAAhG,OAAA,OAAAiG,KAAAD,UAAA,GAAAA,UAAA,GAAL,IAG9BxD,EAAQ,GAAI6J,GAASC,OACrB7J,MAAOA,EACPC,OAAQA,EACR6F,MAAM,GAGV/F,GAAMoD,UACD,GAAG,GAAG,GAAG,MAAO,GAAG,GAAG,GAAG,MAAO,IAAI,GAAG,GAAG,MAC1C,IAAI,GAAG,GAAG,MAAO,IAAI,IAAI,GAAG,MAAO,IAAI,IAAI,GAAG,KAKnD,KAFA,GAAIsI,MACAhJ,EAAQ,EACLA,EAAQ,KAAMA,EAASgJ,EAAOhJ,GAAS,CAC9C,MAAOA,EAAQ,KAAMA,EAASgJ,EAAOhJ,GAAS,CAC9C,MAAOA,EAAQ,KAAMA,EAASgJ,EAAOhJ,GAAS,CAC9C,MAAOA,EAAQ,KAAMA,EAASgJ,EAAOhJ,GAAS,CAC9C,MAAOA,EAAQ,KAAMA,EAASgJ,EAAOhJ,GAAS,CAC9C,MAAOA,EAAQ,KAAMA,EAASgJ,EAAOhJ,GAAS,CAC9C,MAAOA,EAAQ,KAAMA,EAASgJ,EAAOhJ,GAAS,CAC9C,MAAOA,EAAQ,KAAMA,EAASgJ,EAAOhJ,GAAS,CAC9C,MAAOA,EAAQ,KAAMA,EAASgJ,EAAOhJ,GAAS,CAC9C,MAAOA,EAAQ,KAAMA,EAASgJ,EAAOhJ,GAAS,CAC9C,MAAOA,EAAQ,KAAMA,EAASgJ,EAAOhJ,GAAS,CAC9C,MAAOA,EAAQ,KAAMA,EAASgJ,EAAOhJ,GAAS,CAC9C,MAAOA,EAAQ,KAAMA,EAASgJ,EAAOhJ,GAAS,CAC9C,MAAOA,EAAQ,KAAMA,EAASgJ,EAAOhJ,GAAS,CAoD9C,OAlDA1C,GAAMgI,iBAAiB,QACnB9E,SAAU,WACN,GAAIyI,GAAIzN,KAAK2K,MAAQ,GAC4B,IAA3CnK,KAAKkN,IAAI1N,KAAKsD,EAAIxB,EAAMC,MAAQvB,KAAKmN,IACO,IAA5CnN,KAAKkN,IAAI1N,KAAKuD,EAAIzB,EAAME,OAASxB,KAAKmN,IACtC,GAGN,OAFAF,GAAIjN,KAAKwF,IAAI,EAAKxF,KAAKyF,IAAI,EAAKwH,IAEzBD,EAAOhN,KAAKmM,MAAMa,EAAOlO,OAASmO,KAE7C7E,QAAS,SAAUQ,GACf,IAAoB,IAAjBpJ,KAAK4N,QAAkB,CACtB,IAAK,GAAI7O,GAAI,EAAGA,EAAIqK,EAAU9J,OAAQP,IACb,OAAjBqK,EAAUrK,IAAeqK,EAAUrK,GAAG4L,QACtCvB,EAAUrK,GAAG4L,MAAQ,GAAK3K,KAAK2K,MAC/BvB,EAAUrK,GAAG8O,KAAO,GAAK7N,KAAK6N,KAItC,OADA7N,MAAK4N,SAAU,GACR,EAEX,GAAIE,GAAM9N,KAAKiL,gCAAgC7B,EAAW,QAG1D,OAFApJ,MAAK+N,KAAO,MAAS,EAAID,EAAM9N,KAAK6N,OAE7B,GAEXpF,MAAO,WAWH,MAVGjI,MAAKC,SAAW,QACfT,KAAK2K,MAAgB,GAAInK,KAAKC,SAAhB,IACdT,KAAK6N,KAAO7N,KAAK2K,MACjB3K,KAAK4N,SAAU,IAGf5N,KAAK6N,KAAO7N,KAAK2K,MACjB3K,KAAK2K,MAAQ3K,KAAK+N,MAEtB/N,KAAK2K,MAAQnK,KAAKwF,IAAI,GAAKxF,KAAKyF,KAAK,GAAKjG,KAAK2K,SACxC,IAEZ,WAEC3K,KAAK2K,MAAQ,EACb3K,KAAK6N,KAAO7N,KAAK2K,MACjB3K,KAAK+N,KAAO/N,KAAK2K,QAGrB7I,EAAMyH,aACAhJ,KAAM,OAAQoJ,aAAc,OAG3B7H,GASXkM,eAAgB,WAAoC,GAA3BjM,GAA2BuD,UAAAhG,OAAA,OAAAiG,KAAAD,UAAA,GAAAA,UAAA,GAAnB,IAAKtD,EAAcsD,UAAAhG,OAAA,OAAAiG,KAAAD,UAAA,GAAAA,UAAA,GAAL,IACvCxD,EAAQ,GAAI6J,GAASC,OACrB7J,MAAOA,EACPC,OAAQA,GAqCZ,OAlCAF,GAAMK,0BAA4B,EAElCL,EAAMoD,UACD,IAAI,EAAE,EAAE,MAAW,IAAI,GAAG,EAAE,MAAW,IAAI,IAAI,EAAE,MAAW,IAAI,IAAI,EAAE,MACtE,IAAI,IAAI,EAAE,MAAW,GAAG,IAAI,EAAE,MAAW,EAAE,IAAI,GAAG,MAAW,EAAE,IAAI,IAAI,MACvE,EAAE,IAAI,IAAI,MAAW,EAAE,IAAI,IAAI,MAAW,EAAE,GAAG,IAAI,MAAW,GAAG,EAAE,IAAI,MACvE,IAAI,EAAE,IAAI,MAAW,IAAI,EAAE,IAAI,MAAW,IAAI,EAAE,IAAI,MAAW,IAAI,EAAE,GAAG,MAG7EpD,EAAMgI,iBAAiB,UACnB9E,SAAU,WACN,MAAOhF,MAAKiO,OAEhBrF,QAAS,SAAUQ,GAIf,IAAK,GAHD2E,IAAQ/N,KAAKiO,MAAQzN,KAAKmM,MAAoB,EAAdnM,KAAKC,WAAe,GAEpDyN,GAAW,EACNnP,EAAI,EAAGA,EAAIqK,EAAU9J,OAAQP,IACb,OAAjBqK,EAAUrK,KACVmP,EAAWA,GAAY9E,EAAUrK,GAAGkP,QAAUF,EAItD,OADIG,KAAUlO,KAAKiO,MAAQF,IACpB,IAEZ,WAEC/N,KAAKiO,MAAQzN,KAAKmM,MAAsB,GAAhBnM,KAAKC,YAGjCqB,EAAMyH,aACAhJ,KAAM,SAAUoJ,aAAc,OAG7B7H,GAQXqM,eAAgB,WAAoC,GAA3BpM,GAA2BuD,UAAAhG,OAAA,OAAAiG,KAAAD,UAAA,GAAAA,UAAA,GAAnB,IAAKtD,EAAcsD,UAAAhG,OAAA,OAAAiG,KAAAD,UAAA,GAAAA,UAAA,GAAL,IAEvCxD,EAAQ,GAAI6J,GAASC,OACrB7J,MAAOA,EACPC,OAAQA,GAGZF,GAAMgI,iBAAiB,QACnBlB,QAAS,SAAUQ,GACf,GAAIwB,GAAc5K,KAAK0K,+BAA+BtB,EAAW,UACjEpJ,MAAKoO,KAAQpO,KAAKqO,SAAWzD,GAAe,GAAMA,GAAe,GAErEnC,MAAO,WACHzI,KAAKqO,QAAUrO,KAAKoO,OAEzB,WAECpO,KAAKoO,KAAO5N,KAAKC,SAAW,KAGhCqB,EAAMyH,aACAhJ,KAAM,OAAQoJ,aAAc,MAIlC,KAAK,GAAI5K,GAAE,EAAGA,EAAE,GAAIA,IAChB+C,EAAMwC,MAGV,IAAIS,GAAOjD,EAAMyJ,uBACXd,SAAU,OAAQiB,YAAa,OAAQf,MAAO,IACjD,EAqFH,OAlFA7I,GAAQ,GAAI6J,GAASC,OACjB7J,MAAOA,EACPC,OAAQA,EACRsM,WAAW,IAGfxM,EAAMoD,UACD,GAAI,IAAK,IAAK,IACd,GAAI,IAAK,IAAK,EAAE,EAAI,MACpB,GAAI,IAAK,IAAK,EAAE,EAAI,MACpB,GAAI,IAAK,IAAK,KACd,GAAI,IAAK,IAAK,EAAE,EAAI,MACpB,GAAI,IAAK,IAAK,EAAE,EAAI,MACpB,GAAI,IAAK,IAAK,MACd,GAAI,IAAK,IAAK,EAAE,EAAI,MACpB,GAAI,IAAK,IAAK,EAAE,EAAI,MACpB,GAAI,IAAK,IAAK,MACd,IAAK,IAAK,GAAI,MACd,GAAI,GAAI,GAAI,MAGjBpD,EAAMgI,iBAAiB,SACnB9E,SAAU,WAEN,MAAOhF,MAAKuO,OAEhB3F,QAAS,SAASQ,GACd,GAAmB,IAAfpJ,KAAKuO,MAAT,CAOA,GAAsC,OAAlCnF,EAAUtH,EAAMsG,OAAO5D,QAAmBxE,KAAKuO,OAASnF,EAAUtH,EAAMsG,OAAO5D,OAAO+J,MAAQ,EAAG,CACjG,GAAIC,GAAMhO,KAAKwF,IAAIhG,KAAKuO,MAAO,EAAInF,EAAUtH,EAAMsG,OAAO5D,OAAO+J,MAGjE,OAFAvO,MAAKuO,OAAQC,OACbpF,EAAUtH,EAAMsG,OAAO5D,OAAO+J,OAASC,GAK3C,IAAK,GAAIC,GAAE,EAAGA,GAAG,EAAGA,IAChB,GAAIA,GAAG3M,EAAMsG,OAAO5D,OAA0B,OAAjB4E,EAAUqF,IAAezO,KAAKuO,OAASnF,EAAUqF,GAAGF,MAAQ,EAAG,CACxF,GAAIG,GAAMlO,KAAKwF,IAAIhG,KAAKuO,MAAO/N,KAAKmO,MAAM,EAAIvF,EAAUqF,GAAGF,OAAO,GAGlE,OAFAvO,MAAKuO,OAAQG,OACbtF,EAAUqF,GAAGF,OAASG,GAK9B,IAAK,GAAIE,GAAE,EAAGA,GAAG,EAAGA,IAChB,GAAqB,OAAjBxF,EAAUwF,IAAexF,EAAUwF,GAAGL,MAAQvO,KAAKuO,MAAO,CAC1D,GAAIM,GAAMrO,KAAKwF,IAAIhG,KAAKuO,MAAO/N,KAAKmO,MAAM,EAAIvF,EAAUwF,GAAGL,OAAO,GAGlE,OAFAvO,MAAKuO,OAAQM,OACbzF,EAAUwF,GAAGL,OAASM,OAKnC,WAEC7O,KAAKuO,MAAQ/N,KAAKmM,MAAsB,EAAhBnM,KAAKC,YAGjCqB,EAAMgI,iBAAiB,QACnBgF,SAAS,EACT9J,SAAU,WACN,MAAOhF,MAAK+O,QAAU,GAAK,IAE/BnG,QAAS,SAASQ,GACdpJ,KAAK+O,QAAU3F,EAAUtH,EAAMiG,IAAIvD,UAAiD,IAArC4E,EAAUtH,EAAMiG,IAAIvD,OAAO+J,SAAiBnF,EAAUtH,EAAMiG,IAAIvD,OAAOsK,SAC/G1F,EAAUtH,EAAMsG,OAAO5D,QAAU4E,EAAUtH,EAAMsG,OAAO5D,OAAOsK,WAK9EhN,EAAMqJ,qBACA5K,KAAM,OAAQ+K,UAAW,IACzB/K,KAAM,QAAS+K,UAAW,IAC7BvG,GAEIjD,GAGXkN,KAAM,WAAoC,GAA3BjN,GAA2BuD,UAAAhG,OAAA,OAAAiG,KAAAD,UAAA,GAAAA,UAAA,GAAnB,IAAKtD,EAAcsD,UAAAhG,OAAA,OAAAiG,KAAAD,UAAA,GAAAA,UAAA,GAAL,IAE7BxD,EAAQ,GAAI6J,GAASC,OACrB7J,MAAOA,EACPC,OAAQA,GAGZF,GAAMgI,iBAAiB,QACnBlB,QAAS,SAAUQ,GACf,GAAIwB,GAAc5K,KAAK0K,+BAA+BtB,EAAW,UACjEpJ,MAAKoO,KAAQpO,KAAKqO,SAAWzD,GAAe,GAAMA,GAAe,GAErEnC,MAAO,WACHzI,KAAKqO,QAAUrO,KAAKoO,OAEzB,WAECpO,KAAKoO,KAAO5N,KAAKC,SAAW,KAGhCqB,EAAMyH,aACAhJ,KAAM,OAAQoJ,aAAc,MAIlC,KAAK,GAAI5K,GAAE,EAAGA,EAAE,GAAIA,IAChB+C,EAAMwC,MAQV,KAAK,GALDS,GAAOjD,EAAMyJ,uBACXd,SAAU,OAAQiB,YAAa,OAAQf,MAAO,IACjD,GAGMpH,EAAE,EAAGA,EAAE/C,KAAKmM,MAAM7K,EAAME,OAAO,GAAIuB,IACxC,IAAK,GAAID,GAAE,EAAGA,EAAExB,EAAMC,MAAOuB,IACzByB,EAAKxB,GAAGD,GAAK,CA4FrB,OAvFAxB,GAAQ,GAAI6J,GAASC,OACjB7J,MAAOA,EACPC,OAAQA,EACRsM,WAAW,IAGfxM,EAAMoD,UACD,GAAI,IAAK,IAAK,IACd,GAAI,IAAK,IAAK,EAAE,EAAI,MACpB,GAAI,IAAK,IAAK,EAAE,EAAI,MACpB,GAAI,IAAK,IAAK,KACd,GAAI,IAAK,IAAK,EAAE,EAAI,MACpB,GAAI,IAAK,IAAK,EAAE,EAAI,MACpB,GAAI,IAAK,IAAK,MACd,GAAI,IAAK,IAAK,EAAE,EAAI,MACpB,GAAI,IAAK,IAAK,EAAE,EAAI,MACpB,GAAI,IAAK,IAAK,MACd,IAAK,IAAK,GAAI,MACd,GAAI,GAAI,GAAI,MAGjBpD,EAAMgI,iBAAiB,OACnB9E,SAAU,WAEN,MAAOhF,MAAKuO,OAEhB3F,QAAS,SAASQ,GAEd,GAAmC,OAA/BA,EAAUtH,EAAMiG,IAAIvD,QAAmBhE,KAAKC,SAAW,IACvDT,KAAKuO,MAAQ,MAEZ,IAAmB,IAAfvO,KAAKuO,MAEV,MAMJ,IAAsC,OAAlCnF,EAAUtH,EAAMsG,OAAO5D,QAAmBxE,KAAKuO,OAASnF,EAAUtH,EAAMsG,OAAO5D,OAAO+J,MAAQ,EAAG,CACjG,GAAIC,GAAMhO,KAAKwF,IAAIhG,KAAKuO,MAAO,EAAInF,EAAUtH,EAAMsG,OAAO5D,OAAO+J,MAGjE,OAFAvO,MAAKuO,OAAQC,OACbpF,EAAUtH,EAAMsG,OAAO5D,OAAO+J,OAASC,GAK3C,IAAK,GAAIS,GAAE,EAAGA,GAAG,EAAGA,IAChB,GAAIA,GAAGnN,EAAMsG,OAAO5D,OAA0B,OAAjB4E,EAAU6F,IAAejP,KAAKuO,OAASnF,EAAU6F,GAAGV,MAAQ,EAAG,CACxF,GAAIW,GAAM1O,KAAKwF,IAAIhG,KAAKuO,MAAO/N,KAAKmO,MAAM,EAAIvF,EAAU6F,GAAGV,OAAO,GAGlE,OAFAvO,MAAKuO,OAAQW,OACb9F,EAAU6F,GAAGV,OAASW,GAK9B,IAAK,GAAIC,GAAE,EAAGA,GAAG,EAAGA,IAChB,GAAqB,OAAjB/F,EAAU+F,IAAe/F,EAAU+F,GAAGZ,MAAQvO,KAAKuO,MAAO,CAC1D,GAAIa,GAAM5O,KAAKwF,IAAIhG,KAAKuO,MAAO/N,KAAKmO,MAAM,EAAIvF,EAAU+F,GAAGZ,OAAO,GAGlE,OAFAvO,MAAKuO,OAAQa,OACbhG,EAAU+F,GAAGZ,OAASa,MAKnC,WAECpP,KAAKuO,MAAQ,IAGjBzM,EAAMgI,iBAAiB,QACnBgF,SAAS,EACT9J,SAAU,WACN,MAAOhF,MAAK+O,QAAU,GAAK,IAE/BnG,QAAS,SAASQ,GACdpJ,KAAK+O,QAAU3F,EAAUtH,EAAMiG,IAAIvD,UAAiD,IAArC4E,EAAUtH,EAAMiG,IAAIvD,OAAO+J,SAAiBnF,EAAUtH,EAAMiG,IAAIvD,OAAOsK,SAC/G1F,EAAUtH,EAAMsG,OAAO5D,QAAU4E,EAAUtH,EAAMsG,OAAO5D,OAAOsK,WAK9EhN,EAAMqJ,qBACA5K,KAAM,OAAQ+K,UAAW,IACzB/K,KAAM,MAAO+K,UAAW,IAC3BvG,GAEIjD,GAQXuN,SAAU,WAAoC,GAA3BtN,GAA2BuD,UAAAhG,OAAA,OAAAiG,KAAAD,UAAA,GAAAA,UAAA,GAAnB,IAAKtD,EAAcsD,UAAAhG,OAAA,OAAAiG,KAAAD,UAAA,GAAAA,UAAA,GAAL,IACjCxD,EAAQ,GAAI6J,GAASC,OACrB7J,MAAOA,EACPC,OAAQA,GAGZF,GAAMoD,UAEN,KAAK,GADDsI,MACKhJ,EAAM,EAAGA,EAAM,GAAIA,IACxB1C,EAAMoD,QAAQ8F,MAAM,GAAI,IAAK,IAAMxG,EAAM,GAAM,MAC/CgJ,EAAOhJ,GAAS,GAAKA,CA+CzB,OA5CA1C,GAAMgI,iBAAiB,SACnB9E,SAAU,WACN,GAAIyI,GAAKjN,KAAKyF,IAAI,EAAIjG,KAAK2K,MAAQ,IAAM,GAAK,IAAQ,EACtD,OAAO6C,GAAOhN,KAAKmM,MAAMa,EAAOlO,OAASmO,KAE7C7E,QAAS,SAAUQ,GACf,GAAmB,GAAhBpJ,KAAK4N,QAAiB,CACrB,IAAK,GAAI7O,GAAI,EAAGA,EAAIqK,EAAU9J,OAAQP,IACb,OAAjBqK,EAAUrK,IAAeqK,EAAUrK,GAAG4L,QACtCvB,EAAUrK,GAAG4L,MAAQ,GAAK3K,KAAK2K,MAC/BvB,EAAUrK,GAAG8O,KAAO,GAAK7N,KAAK6N,KAItC,OADA7N,MAAK4N,SAAU,GACR,EAEX,GAAIE,GAAM9N,KAAKiL,gCAAgC7B,EAAW,QAE1D,OADApJ,MAAK+N,KAAO,KAAQ,EAAID,EAAM9N,KAAK6N,OAC5B,GAEXpF,MAAO,WAUH,MATGjI,MAAKC,SAAW,OACfT,KAAK2K,MAAe,IAAKnK,KAAKC,SAAhB,GACdT,KAAK6N,KAAO7N,KAAK2K,MACjB3K,KAAK4N,SAAU,IAGf5N,KAAK6N,KAAO7N,KAAK2K,MACjB3K,KAAK2K,MAAQ3K,KAAK+N,OAEf,IAEZ,WAEC/N,KAAKuO,OAAQ,EACbvO,KAAK2K,MAAQ,EACb3K,KAAK6N,KAAO7N,KAAK2K,MACjB3K,KAAK+N,KAAO/N,KAAK2K,QAGrB7I,EAAMyH,aACAhJ,KAAM,QAASoJ,aAAc,OAG5B7H,GAUXwN,QAAS,WAAkC,GAAzBvN,GAAyBuD,UAAAhG,OAAA,OAAAiG,KAAAD,UAAA,GAAAA,UAAA,GAAjB,GAAItD,EAAasD,UAAAhG,OAAA,OAAAiG,KAAAD,UAAA,GAAAA,UAAA,GAAJ,GAC/BxD,EAAQ,GAAI6J,GAASC,OACrB7J,MAAOA,EACPC,OAAQA,EACR6F,MAAM,GAGV/F,GAAMK,0BAA4B,EAElCL,EAAMoD,UACD,IAAK,IAAK,IAAK,MACf,IAAK,IAAK,EAAK,MACf,IAAK,IAAK,EAAK,MACf,IAAK,IAAK,EAAK,MACf,IAAK,IAAK,EAAK,MACf,IAAK,IAAK,EAAK,KAGpB,IAAIqK,GAAS/O,KAAKC,SAEdnG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAAK,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAAK,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAAK,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,MACnG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAAK,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAAK,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAAK,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,MACnG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAAK,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAAK,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAAK,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,MACnG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAAK,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAAK,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAAK,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,MACnG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAAK,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAAK,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAAK,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,MACnG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAAK,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAAK,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAAK,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,MACnG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAAK,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAAK,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAAK,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,MACnG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAAK,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAAK,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAAK,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,MACnG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAAK,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAAK,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAAK,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,MACnG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAAK,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAAK,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAAK,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,MACnG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAAK,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAAK,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAAK,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,MACnG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAAK,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAAK,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAAK,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,MACnG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAAK,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAAK,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAAK,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,MACnG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAAK,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAAK,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAAK,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,MACnG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAAK,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAAK,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAAK,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,MACnG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAAK,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAAK,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAAK,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,MACnG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAAK,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAAK,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAAK,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,MACnG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAAK,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAAK,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAAK,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,MACnG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAAK,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAAK,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAAK,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,MACnG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAAK,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAAK,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAAK,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,MACnG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAAK,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAAK,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAAK,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,MACnG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAAK,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAAK,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAAK,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,MACnG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAAK,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAAK,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAAK,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,MACnG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAAK,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAAK,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAAK,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,MACnG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAAK,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAAK,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAAK,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,MACnG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAAK,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAAK,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAAK,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,MACnG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAAK,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAAK,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAAK,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,MACnG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAAK,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAAK,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAAK,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,MACnG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAAK,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAAK,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAAK,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAoEzG,OAjEA1N,GAAMgI,iBAAiB,UACnB9E,SAAU,WACN,MAAOhF,MAAKiO,OAEhBrF,QAAS,SAAUQ,GAEf,GAAIqG,GAAerG,EAAU1F,OAAO,SAASgM,GACzC,MAAqB,IAAdA,EAAKzB,QACb3O,MAEc,IAAdU,KAAKiO,MACe,GAAhBwB,GAAqC,GAAhBA,GAAqC,GAAhBA,IACzCzP,KAAK2P,SAAW,GACC,GAAd3P,KAAKiO,MACO,GAAhBwB,GAAqC,GAAhBA,GAAqC,GAAhBA,GAAqC,GAAhBA,GAAqC,GAAhBA,IACnFzP,KAAK2P,SAAW,GACC,GAAd3P,KAAKiO,MACZjO,KAAK2P,SAAW,EACK,GAAd3P,KAAKiO,MACZjO,KAAK2P,SAAW,EACK,GAAd3P,KAAKiO,QACZjO,KAAK2P,SAAW,IAGxBlH,MAAO,WACHzI,KAAKiO,MAAQjO,KAAK2P,WAEvB,SAAUrM,EAAGC,GAIZ,GAAGgM,EAAS,GAAI,CACZ,GAAIK,OAAA,EAGAA,GADDL,EAAS,IACDC,EAAShP,KAAKmM,MAAMnM,KAAKC,SAAW+O,EAASlQ,SAI7CkQ,EAAS,EAGpB,IAAIK,GAAOrP,KAAKmM,MAAM5K,EAAQ,GAAKvB,KAAKmM,MAAMiD,EAAK,GAAGtQ,OAAS,GAC3DwQ,EAAOtP,KAAKmM,MAAM5K,EAAQ,GAAKvB,KAAKmM,MAAMiD,EAAK,GAAGtQ,OAAS,GAC3DyQ,EAAOvP,KAAKmM,MAAM3K,EAAS,GAAKxB,KAAKmM,MAAMiD,EAAKtQ,OAAS,GACzD0Q,EAAOxP,KAAKmM,MAAM3K,EAAS,GAAKxB,KAAKmM,MAAMiD,EAAKtQ,OAAS,EAE7DU,MAAKiO,MAAQ,EAGT3K,GAAKuM,GAAQvM,EAAIwM,GAAQvM,GAAKwM,GAAQxM,EAAIyM,IAC1ChQ,KAAKiO,MAAQ2B,EAAKrM,EAAIwM,GAAMzM,EAAIuM,QAKpC7P,MAAKiO,MAAQzN,KAAKC,SAAW,IAAO,EAAI,CAE5CT,MAAK2P,SAAW3P,KAAKiO,QAGzBnM,EAAMyH,aACDhJ,KAAM,SAAUoJ,aAAc,OAG5B7H,GAWXmO,oBAAqB,WAAoC,GAA3BlO,GAA2BuD,UAAAhG,OAAA,OAAAiG,KAAAD,UAAA,GAAAA,UAAA,GAAnB,IAAKtD,EAAcsD,UAAAhG,OAAA,OAAAiG,KAAAD,UAAA,GAAAA,UAAA,GAAL,IAC5CxD,EAAQ,GAAI6J,GAASC,OACrB7J,MAAOA,EACPC,OAAQA,EACR6F,MAAM,GAIV/F,GAAMK,0BAA4B,EAGlC,IAAI+N,IACH,EAAG,EAAG,EAAG,EACN,EAAM,EACN,EAAG,EAAG,GACRC,SAMFrO,GAAMoD,UACN,KAAK,GAAInG,GAAI,EAAGA,EAHA,IAGeA,IAAK,CAChC,GAAIqR,GAAO5P,KAAKmM,MAAO,EAAmB5N,EAC1C+C,GAAMoD,QAAQ8F,MAAMoF,EAAMA,EAAMA,EAAM,MAuD1C,MApDAtO,GAAMgI,iBAAiB,MACnB9E,SAAU,WACN,MAAOhF,MAAKiO,OAEhBrF,QAAS,SAAUQ,GAMf,IAAI,GALAiH,GAAU,EACVC,EAAW,EACXC,EAAM,EACNC,EAAYxQ,KAAKiO,MAEbwC,EAAI,EAAGA,EAAIrH,EAAU9J,OAAS,EAAGmR,IAAK,CAC1C,GAAIhE,OAAA,EACQA,GAAH,GAALgE,EAAmBzQ,KACPoJ,EAAUqH,GAGtBD,GAAa/D,EAASwB,MAAQiC,EAAOO,GAClCP,EAAOO,GAAK,IACU,GAAlBhE,EAASwB,MAAYoC,GAAW,EAC3B5D,EAASwB,MAASyC,IAAgBJ,GAAY,EACjDC,GAAO,GAKP,GAAdvQ,KAAKiO,MACJjO,KAAK2P,SAAYW,EArCpB,EAqCsCC,EApCtC,EAqCUvQ,KAAKiO,MAASyC,IACrB1Q,KAAK2P,SAAYa,EAAYF,EAAWC,EAAM,EArClD,EAwCIvQ,KAAK2P,SAAW,EAIpB3P,KAAK2P,SAAWnP,KAAKyF,IAAI,EAAGzF,KAAKwF,IAAI0K,IAAelQ,KAAKmM,MAAM3M,KAAK2P,aAGxElH,MAAO,WACHzI,KAAKiO,MAAQjO,KAAK2P,WAEvB,WAGC3P,KAAKiO,MAAQzN,KAAKC,SAAW,EAAMD,KAAKmM,MApD5B,IAoDkCnM,KAAKC,UAAwB,EAC3ET,KAAK2P,SAAW3P,KAAKiO,QAGzBnM,EAAMyH,aACAhJ,KAAM,KAAMoJ,aAAc,OAGzB7H","file":"dust.min.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","import * as CellAuto from \"./vendor/cellauto.js\";\nimport { Worlds } from \"./worlds.js\";\n\nexport class Dust {\n    constructor(container, initFinishedCallback) {\n        this.container = container;\n\n        let worldNames = Object.keys(Worlds);\n        this.worldOptions = {\n            name: worldNames[worldNames.length * Math.random() << 0], // Random startup world\n            //width: 128, // Can force a width/height here\n            //height: 128,\n        }\n\n        // Create the app and put its canvas into `container`\n        this.app = new PIXI.Application(\n            {\n                antialias: false, \n                transparent: false, \n                resolution: 1\n            }\n        );\n        this.container.appendChild(this.app.view);\n\n        // Start the update loop\n        this.app.ticker.add((delta) => {\n            this.OnUpdate(delta);\n        });\n\n        this.framecounter = new FrameCounter(1, null);\n\n        // Stop application and wait for setup to finish\n        this.app.stop();\n\n        // Load resources needed for the program to run\n        PIXI.loader\n            .add('fragShader', '../resources/dust.frag')\n            .load((loader, res) => {\n                // Loading has finished\n                this.loadedResources = res;\n                this.Setup();\n                this.app.start();\n                initFinishedCallback();\n            });\n    }\n\n    /**\n     * Reusable method for setting up the simulation from `this.worldOptions`.\n     * Also works as a reset function if you call this without changing\n     * `this.worldOptions.name` beforehand.\n     */\n    Setup() {\n\n        // Create the world from the string\n        try {\n            this.world = Worlds[this.worldOptions.name].call(this, this.worldOptions.width, this.worldOptions.height);\n        } catch (err) {\n            throw \"World with the name \" + this.worldOptions.name + \" does not exist!\";\n        }\n        this.framecounter.frameFrequency = this.world.recommendedFrameFrequency || 1;\n\n        this.app.renderer.resize(this.world.width, this.world.height);\n\n        // Remove canvas filtering through css\n        this.app.renderer.view.style.cssText = ` \n            image-rendering: optimizeSpeed; \n            image-rendering: -moz-crisp-edges; \n            image-rendering: -webkit-optimize-contrast; \n            image-rendering: optimize-contrast;\n            image-rendering: -o-crisp-edges; \n            image-rendering: pixelated; \n            -ms-interpolation-mode: nearest-neighbor; \n        `;\n        this.app.renderer.view.style.border = \"1px dashed green\";\n        this.app.renderer.view.style.width = \"100%\";\n        this.app.renderer.view.style.height = \"100%\";\n        this.app.renderer.backgroundColor = 0xffffff;\n\n        // Create a sprite from a blank canvas\n        this.textureCanvas = document.createElement('canvas');\n        this.textureCanvas.width = this.world.width;\n        this.textureCanvas.height = this.world.height;\n        this.textureCtx = this.textureCanvas.getContext('2d'); // Used later to update texture\n\n        this.baseTexture = new PIXI.BaseTexture.fromCanvas(this.textureCanvas);\n        this.sprite = new PIXI.Sprite(\n            new PIXI.Texture(this.baseTexture, new PIXI.Rectangle(0, 0, this.world.width, this.world.height))\n        );\n\n        // Center the sprite\n        this.sprite.x = this.world.width / 2;\n        this.sprite.y = this.world.height / 2;\n        this.sprite.anchor.set(0.5);\n\n        // Create the shader for the sprite\n        this.filter = new PIXI.Filter(null, this.loadedResources.fragShader.data);\n        this.sprite.filters = [this.filter];\n\n        this.app.stage.removeChildren(); // Remove any attached children (for case where changing presets)\n        this.app.stage.addChild(this.sprite);\n\n        // Update the texture from the initial state of the world\n        this.UpdateTexture();\n    }\n\n    /**\n     * Called every frame. Continues indefinitely after being called once.\n     */\n    OnUpdate(delta) {\n        let noskip = this.framecounter.IncrementFrame();\n        if(noskip) {\n            this.filter.uniforms.time += delta;\n            this.world.step();\n            this.UpdateTexture();\n            this.app.render();\n        }\n\n    }\n\n    /**\n     * Updates the texture representing the world.\n     * Writes cell colors to the texture canvas and updates `baseTexture` from it,\n     * which makes Pixi update the sprite.\n     */\n    UpdateTexture() {\n        \n        let index = 0;\n        let ctx = this.textureCtx;\t\t\n        ctx.fillStyle = \"black\";\n        ctx.fillRect(0, 0, this.textureCanvas.width, this.textureCanvas.height);\n        let pix = ctx.createImageData(this.textureCanvas.width, this.textureCanvas.height);\t\t\n        for (let y = 0; y < this.textureCanvas.height; y++) {\t\t\t\n            for (let x = 0; x < this.textureCanvas.width; x++) {\n                let paletteIndex = this.world.grid[y][x].getColor();\n                let colorRGBA = this.world.palette[paletteIndex];\n                if(colorRGBA != null) {\n                    pix.data[index++] = colorRGBA[0];\t\t\t\t\n                    pix.data[index++] = colorRGBA[1];\t\t\t\t\n                    pix.data[index++] = colorRGBA[2];\t\t\t\t\n                    pix.data[index++] = colorRGBA[3];\t\n                } else {\n                    throw \"Palette index out of bounds: \" + paletteIndex;\n                }\n            }\t\t\n        } \t\t\n        ctx.putImageData(pix, 0, 0);\n\n        // Tell Pixi to update the texture referenced by this ctx.\n        this.baseTexture.update();\n\n    }\n\n}\n\n/**\n * Convenience class for restricting the refresh rate of the simulation.\n */\nclass FrameCounter {\n    constructor(frameFrequency, frameLimit = null) {\n        // The number of frames ingested\n        this.frameCount = 0;\n\n        // The number of frames allowed to run\n        this.passedFrames = 0;\n\n        // Frame will run every `frameFrequency` frames that pass\n        this.frameFrequency = frameFrequency;\n\n        // If set, class will stop allowing frames after `frameLimit` \n        // passedFrames have been allowed.\n        this.frameLimit = frameLimit;\n    }\n\n    /**\n     * Returns true once every `frameFrequency` times it is called.\n     */\n    IncrementFrame(){\n        this.frameCount += 1;\n        if(this.frameCount % this.frameFrequency == 0) {\n            // If we've reached the frame limit\n            if(this.frameLimit != null && this.passedFrames >= this.frameLimit)\n                return false;\n\n            this.frameCount = 0;\n            this.passedFrames += 1;\n            return true;\n        }\n        return false;\n    }\n}","import { Worlds } from \"./worlds.js\";\n\nexport class GUI {\n\n    /**\n     * Creates and attaches a GUI to the page if DAT.GUI is included.\n     */\n    static Init(dust){\n        if(typeof(dat) === \"undefined\"){\n            console.warn(\"No DAT.GUI instance found. Import on this page to use!\");\n            return;\n        }\n\n        let gui = new dat.GUI();\n\n        gui.add(dust.framecounter, 'frameFrequency').min(1).max(30).step(1).listen();\n\n        gui.add(dust.worldOptions, 'name', Object.getOwnPropertyNames(Worlds)).onChange(() => {\n            dust.Setup();\n        }).name(\"Preset\");\n\n        gui.add(dust, \"Setup\").name(\"Reset\");\n    }\n\n}","import { Detector } from \"./utils/webgl-detect.js\";\nimport { Dust } from \"./dust.js\";\nimport { GUI } from \"./gui.js\";\n\nlet container = document.getElementById(\"dust-container\");\n\nif ( !Detector.HasWebGL() ) {\n    //exit(\"WebGL is not supported on this browser.\");\n    console.log(\"WebGL is not supported on this browser.\");\n    container.innerHTML = Detector.GetErrorHTML();\n    container.classList.add(\"no-webgl\");\n}\nelse {\n    let dust = new Dust(container, () => {\n        // Dust is now fully loaded\n        GUI.Init(dust);\n    });\n}","class Detector {\n\n    //http://stackoverflow.com/questions/11871077/proper-way-to-detect-webgl-support\n    static HasWebGL() {\n        if (!!window.WebGLRenderingContext) {\n            var canvas = document.createElement(\"canvas\"),\n                    names = [\"webgl\", \"experimental-webgl\", \"moz-webgl\", \"webkit-3d\"],\n                context = false;\n\n            for(var i=0;i<4;i++) {\n                try {\n                    context = canvas.getContext(names[i]);\n                    if (context && typeof context.getParameter == \"function\") {\n                        // WebGL is enabled\n                        return true;\n                    }\n                } catch(e) {}\n            }\n\n            // WebGL is supported, but disabled\n            return false;\n        }\n        // WebGL not supported\n        return false;\n    }\n\n    static GetErrorHTML(message = null){\n        if(message == null){\n            message = `Your graphics card does not seem to support \n                        <a href=\"http://khronos.org/webgl/wiki/Getting_a_WebGL_Implementation\">WebGL</a>. <br>\n                        Find out how to get it <a href=\"http://get.webgl.org/\">here</a>.`;\n        }\n        return `\n        <div class=\"no-webgl-support\">\n        <p style=\"text-align: center;\">${message}</p>\n        </div>\n        `\n    }\n\n}\n\nexport { Detector };","function CellAutoCell(locX, locY) {\n\tthis.x = locX;\n\tthis.y = locY;\n\n\tthis.delays = [];\n}\n\nCellAutoCell.prototype.process = function(neighbors) {\n\treturn;\n};\nCellAutoCell.prototype.countSurroundingCellsWithValue = function(neighbors, value) {\n\tvar surrounding = 0;\n\tfor (var i = 0; i < neighbors.length; i++) {\n\t\tif (neighbors[i] !== null && neighbors[i][value]) {\n\t\t\tsurrounding++;\n\t\t}\n\t}\n\treturn surrounding;\n};\nCellAutoCell.prototype.delay = function(numSteps, fn) {\n\tthis.delays.push({ steps: numSteps, action: fn });\n};\n\nCellAutoCell.prototype.reset = function(neighbors) {\n\treturn;\n};\n\nCellAutoCell.prototype.getSurroundingCellsAverageValue = function(neighbors, value) {\n\tvar summed = 0.0;\n\tfor (var i = 0; i < neighbors.length; i++) {\n\t\tif (neighbors[i] !== null && (neighbors[i][value] || neighbors[i][value] === 0)) {\n\t\t\tsummed += neighbors[i][value];\n\t\t}\n\t}\n\treturn summed / neighbors.length;//cnt;\n};\nfunction CAWorld(options) {\n\n\tthis.width = 24;\n\tthis.height = 24;\n\tthis.options = options;\n\n\tthis.wrap = false;\n\n\tthis.TOPLEFT        = { index: 0, x: -1, y: -1 };\n\tthis.TOP            = { index: 1, x:  0, y: -1 };\n\tthis.TOPRIGHT       = { index: 2, x:  1, y: -1 };\n\tthis.LEFT           = { index: 3, x: -1, y:  0 };\n\tthis.RIGHT          = { index: 4, x:  1, y:  0 };\n\tthis.BOTTOMLEFT     = { index: 5, x: -1, y:  1 };\n\tthis.BOTTOM         = { index: 6, x:  0, y:  1 };\n\tthis.BOTTOMRIGHT    = { index: 7, x:  1, y:  1 };\n\t\n\tthis.randomGenerator = Math.random;\n\n\t// square tiles by default, eight sides\n\tvar neighborhood = [null, null, null, null, null, null, null, null];\n\n\tif (this.options.hexTiles) {\n\t\t// six sides\n\t\tneighborhood = [null, null, null, null, null, null];\n\t}\n\tthis.step = function() {\n\t\tvar y, x;\n\t\tfor (y=0; y<this.height; y++) {\n\t\t\tfor (x=0; x<this.width; x++) {\n\t\t\t\tthis.grid[y][x].reset();\n\t\t\t}\n\t\t}\n\n\t\t// bottom up, left to right processing\n\t\tfor (y=this.height-1; y>=0; y--) {\n\t\t\tfor (x=this.width-1; x>=0; x--) {\n\t\t\t\tthis.fillNeighbors(neighborhood, x, y);\n\t\t\t\tvar cell = this.grid[y][x];\n\t\t\t\tcell.process(neighborhood);\n\n\t\t\t\t// perform any delays\n\t\t\t\tfor (var i=0; i<cell.delays.length; i++) {\n\t\t\t\t\tcell.delays[i].steps--;\n\t\t\t\t\tif (cell.delays[i].steps <= 0) {\n\t\t\t\t\t\t// perform action and remove delay\n\t\t\t\t\t\tcell.delays[i].action(cell);\n\t\t\t\t\t\tcell.delays.splice(i, 1);\n\t\t\t\t\t\ti--;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t};\n\n\t//var NEIGHBORLOCS = [{x:-1, y:-1}, {x:0, y:-1}, {x:1, y:-1}, {x:-1, y:0}, {x:1, y:0},{x:-1, y:1}, {x:0, y:1}, {x:1, y:1}];\n\t// square tiles by default\n\tvar NEIGHBORLOCS = [\n\t\t{ diffX : function() { return -1; }, diffY: function() { return -1; }},  // top left\n\t\t{ diffX : function() { return 0; }, diffY: function() { return -1; }},  // top\n\t\t{ diffX : function() { return 1; }, diffY: function() { return -1; }},  // top right\n\t\t{ diffX : function() { return -1; }, diffY: function() { return 0; }},  // left\n\t\t{ diffX : function() { return 1; }, diffY: function() { return 0; }},  // right\n\t\t{ diffX : function() { return -1; }, diffY: function() { return 1; }},  // bottom left\n\t\t{ diffX : function() { return 0; }, diffY: function() { return 1; }},  // bottom\n\t\t{ diffX : function() { return 1; }, diffY: function() { return 1; }}  // bottom right\n\t];\n\tif (this.options.hexTiles) {\n\t\tif (this.options.flatTopped) {\n\t\t\t// flat topped hex map,  function requires column to be passed\n\t\t\tNEIGHBORLOCS = [\n\t\t\t\t{ diffX : function() { return -1; }, diffY: function(x) { return x%2 ? -1 : 0; }},  // top left\n\t\t\t\t{ diffX : function() { return 0; }, diffY: function() { return -1; }},  // top\n\t\t\t\t{ diffX : function() { return 1; }, diffY: function(x) { return x%2 ? -1 : 0; }},  // top right\n\t\t\t\t{ diffX : function() { return 1; }, diffY: function(x) { return x%2 ? 0 : 1; }},  // bottom right\n\t\t\t\t{ diffX : function() { return 0; }, diffY: function() { return 1; }},  // bottom\n\t\t\t\t{ diffX : function() { return -1; }, diffY: function(x) { return x%2 ? 0 : 1; }}  // bottom left\n\t\t\t];\n\t\t}\n\t\telse {\n\t\t\t// pointy topped hex map, function requires row to be passed\n\t\t\tNEIGHBORLOCS = [\n\t\t\t\t{ diffX : function(x, y) { return y%2 ? 0 : -1; }, diffY: function() { return -1; }},  // top left\n\t\t\t\t{ diffX : function(x, y) { return y%2 ? 1 : 0; }, diffY: function() { return -1; }},  // top right\n\t\t\t\t{ diffX : function() { return -1; }, diffY: function() { return 0; }},  // left\n\t\t\t\t{ diffX : function() { return 1; }, diffY: function() { return 0; }},  // right\n\t\t\t\t{ diffX : function(x, y) { return y%2 ? 0 : -1; }, diffY: function() { return 1; }},  // bottom left\n\t\t\t\t{ diffX : function(x, y) { return y%2 ? 1 : 0; }, diffY: function() { return 1; }}  // bottom right\n\t\t\t];\n\t\t}\n\n\t}\n\tthis.fillNeighbors = function(neighbors, x, y) {\n\t\tfor (var i=0; i<NEIGHBORLOCS.length; i++) {\n\t\t\tvar neighborX = x + NEIGHBORLOCS[i].diffX(x, y);\n\t\t\tvar neighborY = y + NEIGHBORLOCS[i].diffY(x, y);\n\t\t\tif (this.wrap) {\n\t\t\t\t// TODO: hex map support for wrapping\n\t\t\t\tneighborX = (neighborX + this.width) % this.width;\n\t\t\t\tneighborY = (neighborY + this.height) % this.height;\n\t\t\t}\n\t\t\tif (!this.wrap && (neighborX < 0 || neighborY < 0 || neighborX >= this.width || neighborY >= this.height)) {\n\t\t\t\tneighbors[i] = null;\n\t\t\t}\n\t\t\telse {\n\t\t\t\tneighbors[i] = this.grid[neighborY][neighborX];\n\t\t\t}\n\t\t}\n\t};\n\n\tthis.initialize = function(arrayTypeDist) {\n\n\t\t// sort the cell types by distribution\n\t\tarrayTypeDist.sort(function(a, b) {\n\t\t\treturn a.distribution > b.distribution ? 1 : -1;\n\t\t});\n\n\t\tvar totalDist = 0;\n\t\t// add all distributions together\n\t\tfor (var i=0; i<arrayTypeDist.length; i++) {\n\t\t\ttotalDist += arrayTypeDist[i].distribution;\n\t\t\tarrayTypeDist[i].distribution = totalDist;\n\t\t}\n\n\t\tthis.grid = [];\n\t\tfor (var y=0; y<this.height; y++) {\n\t\t\tthis.grid[y] = [];\n\t\t\tfor (var x=0; x<this.width; x++) {\n\t\t\t\tvar random = this.randomGenerator() * 100;\n\n\t\t\t\tfor (i=0; i<arrayTypeDist.length; i++) {\n\t\t\t\t\tif (random <= arrayTypeDist[i].distribution) {\n\t\t\t\t\t\tthis.grid[y][x] = new this.cellTypes[arrayTypeDist[i].name](x, y);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t};\n\n\tthis.cellTypes = {};\n\tthis.registerCellType = function(name, cellOptions, init) {\n\t\tthis.cellTypes[name] = function(x, y) {\n\t\t\tCellAutoCell.call(this, x, y);\n\n\t\t\tif (init) {\n\t\t\t\tinit.call(this, x, y);\n\t\t\t}\n\n\t\t\tif (cellOptions) {\n\t\t\t\tfor (var key in cellOptions) {\n\t\t\t\t\tif (typeof cellOptions[key] !== 'function') {\n\t\t\t\t\t\t// properties get instance\n\t\t\t\t\t\tif (typeof cellOptions[key] === 'object') {\n\t\t\t\t\t\t\t// objects must be cloned\n\t\t\t\t\t\t\tthis[key] = JSON.parse(JSON.stringify(cellOptions[key]));\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse {\n\t\t\t\t\t\t\t// primitive\n\t\t\t\t\t\t\tthis[key] = cellOptions[key];\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t\tthis.cellTypes[name].prototype = Object.create(CellAutoCell.prototype);\n\t\tthis.cellTypes[name].prototype.constructor = this.cellTypes[name];\n\t\tthis.cellTypes[name].prototype.cellType = name;\n\n\t\tif (cellOptions) {\n\t\t\tfor (var key in cellOptions) {\n\t\t\t\tif (typeof cellOptions[key] === 'function') {\n\t\t\t\t\t// functions get prototype\n\t\t\t\t\tthis.cellTypes[name].prototype[key] = cellOptions[key];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t};\n\n\t// apply options\n\tif (options) {\n\t\tfor (var key in options) {\n\t\t\tthis[key] = options[key];\n\t\t}\n\t}\n\n}\n\nCAWorld.prototype.initializeFromGrid  = function(values, initGrid) {\n\n\tthis.grid = [];\n\tfor (var y=0; y<this.height; y++) {\n\t\tthis.grid[y] = [];\n\t\tfor (var x=0; x<this.width; x++) {\n\t\t\tfor (var i=0; i<values.length; i++) {\n\t\t\t\tif (values[i].gridValue === initGrid[y][x]) {\n\t\t\t\t\tthis.grid[y][x] = new this.cellTypes[values[i].name](x, y);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n};\n\nCAWorld.prototype.createGridFromValues = function(values, defaultValue) {\n\tvar newGrid = [];\n\n\tfor (var y=0; y<this.height; y++) {\n\t\tnewGrid[y] = [];\n\t\tfor (var x = 0; x < this.width; x++) {\n\t\t\tnewGrid[y][x] = defaultValue;\n\t\t\tvar cell = this.grid[y][x];\n\t\t\tfor (var i=0; i<values.length; i++) {\n\t\t\t\tif (cell.cellType == values[i].cellType && cell[values[i].hasProperty]) {\n\t\t\t\t\tnewGrid[y][x] = values[i].value;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\treturn newGrid;\n};\n\n;(function() {\n  var CellAuto = {\n    World: CAWorld,\n    Cell: CellAutoCell\n  };\n\n  if (typeof define === 'function' && define.amd) {\n    define('CellAuto', function () {\n      return CellAuto;\n    });\n  } else if (typeof module !== 'undefined' && module.exports) {\n    module.exports = CellAuto;\n  } else {\n    window.CellAuto = CellAuto;\n  }\n})();","import * as CellAuto from \"./vendor/cellauto.js\";\n\nexport let Worlds = {\n\n    /**\n     * Chooses a random elementary automata from a list.\n     */\n    RandomRule: function (width = 128, height = 128) {\n        let rules = [\n            18, 22, 26, 54, 60, 90, 94, 110, 126, 150\n        ];\n        let options = {\n            width: width,\n            height: height,\n            rule: rules[rules.length * Math.random() << 0], // Random rule from list\n            palette: [\n                [68, 36, 52, 255],\n                [255, 255, 255, 255]\n            ],\n            wrap: true\n        }\n        return Elementary(options);\n    },\n\n    /**\n     * Conway's Game of Life\n     * B3/S23\n     */\n    Life: function (width = 128, height = 128) {\n        let options = {\n            width: width,\n            height: height,\n            B: [3],\n            S: [2, 3],\n            palette: [\n                [68, 36, 52, 255],\n                [255, 255, 255, 255]\n            ]\n        }\n        return LifeLike(options);\n    },\n\n    /**\n     * Generates a maze-like structure.\n     * Based on rule B3/S1234 (Mazecetric).\n     */\n    Mazecetric: function(width = 96, height = 96) {\n        let options = {\n            width: width,\n            height: height,\n            B: [3],\n            S: [1, 2, 3, 4],\n            palette: [\n                [68, 36, 52, 255],\n                [255, 255, 255, 255]\n            ],\n            recommendedFrameFrequency: 5,\n        }\n        return LifeLike(options, (x, y) => {\n            // Distribution function\n            return Math.random() < 0.1;\n        });\n    },\n\n    /**\n     * B35678/S5678\n     */\n    Diamoeba: function(width = 96, height = 96) {\n        let options = {\n            width: width,\n            height: height,\n            B: [3, 5, 6, 7, 8],\n            S: [5, 6, 7, 8],\n            palette: [\n                [68, 36, 52, 255],\n                [255, 255, 255, 255]\n            ],\n            recommendedFrameFrequency: 3\n        }\n        return LifeLike(options, (x, y) => {\n            // Distribution function\n            return Math.random() < 0.2;\n        });\n    },\n\n    /**\n     * B4678/S35678\n     */\n    Anneal: function(width = 96, height = 96) {\n        let options = {\n            width: width,\n            height: height,\n            B: [4, 6, 7, 8],\n            S: [3, 5, 6, 7, 8],\n            palette: [\n                [68, 36, 52, 255],\n                [255, 255, 255, 255]\n            ],\n            recommendedFrameFrequency: 3\n        }\n        return LifeLike(options, (x, y) => {\n            // Distribution function\n            return Math.random() < 0.3;\n        });\n    },\n\n    /**\n     * CA that looks like lava.\n     * \n     * From https://sanojian.github.io/cellauto\n     */\n    Lava: function (width = 128, height = 128) {\n        // thanks to TheLastBanana on TIGSource\n\n        let world = new CellAuto.World({\n            width: width,\n            height: height,\n            wrap: true\n        });\n\n        world.palette = [\n            [34,10,21,255], [68,17,26,255], [123,16,16,255],\n            [190,45,16,255], [244,102,20,255], [254,212,97,255]\n        ];\n\n        let colors = [];\n        let index = 0;\n        for (; index < 18; ++index) { colors[index] = 1; }\n        for (; index < 22; ++index) { colors[index] = 0; }\n        for (; index < 25; ++index) { colors[index] = 1; }\n        for (; index < 27; ++index) { colors[index] = 2; }\n        for (; index < 29; ++index) { colors[index] = 3; }\n        for (; index < 32; ++index) { colors[index] = 2; }\n        for (; index < 35; ++index) { colors[index] = 0; }\n        for (; index < 36; ++index) { colors[index] = 2; }\n        for (; index < 38; ++index) { colors[index] = 4; }\n        for (; index < 42; ++index) { colors[index] = 5; }\n        for (; index < 44; ++index) { colors[index] = 4; }\n        for (; index < 46; ++index) { colors[index] = 2; }\n        for (; index < 56; ++index) { colors[index] = 1; }\n        for (; index < 64; ++index) { colors[index] = 0; }\n\n        world.registerCellType('lava', {\n            getColor: function () {\n                let v = this.value + 0.5\n                    + Math.sin(this.x / world.width * Math.PI) * 0.04\n                    + Math.sin(this.y / world.height * Math.PI) * 0.04\n                    - 0.05;\n                v = Math.min(1.0, Math.max(0.0, v));\n\n                return colors[Math.floor(colors.length * v)];\n            },\n            process: function (neighbors) {\n                if(this.droplet === true) {\n                    for (let i = 0; i < neighbors.length; i++) {\n                        if (neighbors[i] !== null && neighbors[i].value) {\n                            neighbors[i].value = 0.5 *this.value;\n                            neighbors[i].prev = 0.5 *this.prev;\n                        }\n                    }\n                    this.droplet = false;\n                    return true;\n                }\n                let avg = this.getSurroundingCellsAverageValue(neighbors, 'value');\n                this.next = 0.998 * (2 * avg - this.prev);\n\n                return true;\n            },\n            reset: function () {\n                if(Math.random() > 0.99993) {\n                    this.value = -0.25 + 0.3*Math.random();\n                    this.prev = this.value;\n                    this.droplet = true;\n                }\n                else {\n                    this.prev = this.value;\n                    this.value = this.next;\n                }\n                this.value = Math.min(0.5, Math.max(-0.5, this.value));\n                return true;\n            }\n        }, function () {\n            //init\n            this.value = 0.0;\n            this.prev = this.value;\n            this.next = this.value;\n        });\n\n        world.initialize([\n            { name: 'lava', distribution: 100 }\n        ]);\n\n        return world;\n\n    },\n\n    /**\n     * Cyclic rainbow automata.\n     * \n     * From https://sanojian.github.io/cellauto\n     */\n    CyclicRainbows: function(width = 128, height = 128) {\n        let world = new CellAuto.World({\n            width: width,\n            height: height\n        });\n\n        world.recommendedFrameFrequency = 1;\n\n        world.palette = [\n            [255,0,0,1 * 255], [255,96,0,1 * 255], [255,191,0,1 * 255], [223,255,0,1 * 255],\n            [128,255,0,1 * 255], [32,255,0,1 * 255], [0,255,64,1 * 255], [0,255,159,1 * 255],\n            [0,255,255,1 * 255], [0,159,255,1 * 255], [0,64,255,1 * 255], [32,0,255,1 * 255],\n            [127,0,255,1 * 255], [223,0,255,1 * 255], [255,0,191,1 * 255], [255,0,96,1 * 255]\n        ];\n\n        world.registerCellType('cyclic', {\n            getColor: function () {\n                return this.state;\n            },\n            process: function (neighbors) {\n                let next = (this.state + Math.floor(Math.random()*2)) % 16;\n\n                let changing = false;\n                for (let i = 0; i < neighbors.length; i++) {\n                    if (neighbors[i] !== null) {\n                        changing = changing || neighbors[i].state === next;\n                    }\n                }\n                if (changing) this.state = next;\n                return true;\n            }\n        }, function () {\n            //init\n            this.state = Math.floor(Math.random() * 16);\n        });\n\n        world.initialize([\n            { name: 'cyclic', distribution: 100 }\n        ]);\n\n        return world;\n    },\n\n    /**\n     * Simulates caves and water movement.\n     * \n     * From https://sanojian.github.io/cellauto\n     */\n    CavesWithWater: function(width = 128, height = 128) {\n        // FIRST CREATE CAVES\n        let world = new CellAuto.World({\n            width: width,\n            height: height\n        });\n\n        world.registerCellType('wall', {\n            process: function (neighbors) {\n                let surrounding = this.countSurroundingCellsWithValue(neighbors, 'wasOpen');\n                this.open = (this.wasOpen && surrounding >= 4) || surrounding >= 6;\n            },\n            reset: function () {\n                this.wasOpen = this.open;\n            }\n        }, function () {\n            //init\n            this.open = Math.random() > 0.40;\n        });\n\n        world.initialize([\n            { name: 'wall', distribution: 100 }\n        ]);\n\n        // generate our cave, 10 steps aught to do it\n        for (let i=0; i<10; i++) {\n            world.step();\n        }\n\n        let grid = world.createGridFromValues([\n            { cellType: 'wall', hasProperty: 'open', value: 0 }\n        ], 1);\n\n        // NOW USE OUR CAVES TO CREATE A NEW WORLD CONTAINING WATER\n        world = new CellAuto.World({\n            width: width,\n            height: height,\n            clearRect: true\n        });\n\n        world.palette = [\n            [89, 125, 206, 0 * 255],\n            [89, 125, 206, 1/9 * 255],\n            [89, 125, 206, 2/9 * 255],\n            [89, 125, 206, 3/9 * 255],\n            [89, 125, 206, 4/9 * 255],\n            [89, 125, 206, 5/9 * 255],\n            [89, 125, 206, 6/9 * 255],\n            [89, 125, 206, 7/9 * 255],\n            [89, 125, 206, 8/9 * 255],\n            [89, 125, 206, 1 * 255],\n            [109, 170, 44, 1 * 255],\n            [68, 36, 52, 1 * 255]\n        ];\n\n        world.registerCellType('water', {\n            getColor: function() {\n                //return 0x597DCE44;\n                return this.water;\n            },\n            process: function(neighbors) {\n                if (this.water === 0) {\n                    // already empty\n                    return;\n                }\n                // push my water out to my available neighbors\n\n                // cell below me will take all it can\n                if (neighbors[world.BOTTOM.index] !== null && this.water && neighbors[world.BOTTOM.index].water < 9) {\n                    let amt = Math.min(this.water, 9 - neighbors[world.BOTTOM.index].water);\n                    this.water-= amt;\n                    neighbors[world.BOTTOM.index].water += amt;\n                    return;\n                }\n\n                // bottom two corners take half of what I have\n                for (let i=5; i<=7; i++) {\n                    if (i!=world.BOTTOM.index && neighbors[i] !== null && this.water && neighbors[i].water < 9) {\n                        let amt = Math.min(this.water, Math.ceil((9 - neighbors[i].water)/2));\n                        this.water-= amt;\n                        neighbors[i].water += amt;\n                        return;\n                    }\n                }\n                // sides take a third of what I have\n                for (let i=3; i<=4; i++) {\n                    if (neighbors[i] !== null && neighbors[i].water < this.water) {\n                        let amt = Math.min(this.water, Math.ceil((9 - neighbors[i].water)/3));\n                        this.water-= amt;\n                        neighbors[i].water += amt;\n                        return;\n                    }\n                }\n            }\n        }, function() {\n            //init\n            this.water = Math.floor(Math.random() * 9);\n        });\n\n        world.registerCellType('rock', {\n            isSolid: true,\n            getColor: function() {\n                return this.lighted ? 10 : 11;\n            },\n            process: function(neighbors) {\n                this.lighted = neighbors[world.TOP.index] && !(neighbors[world.TOP.index].water === 9) && !neighbors[world.TOP.index].isSolid\n                    && neighbors[world.BOTTOM.index] && neighbors[world.BOTTOM.index].isSolid;\n            }\n        });\n\n        // pass in our generated cave data\n        world.initializeFromGrid([\n            { name: 'rock', gridValue: 1 },\n            { name: 'water', gridValue: 0 }\n        ], grid);\n\n        return world;\n    },\n\n    Rain: function(width = 128, height = 128) {\n        // FIRST CREATE CAVES\n        let world = new CellAuto.World({\n            width: width,\n            height: height\n        });\n\n        world.registerCellType('wall', {\n            process: function (neighbors) {\n                let surrounding = this.countSurroundingCellsWithValue(neighbors, 'wasOpen');\n                this.open = (this.wasOpen && surrounding >= 4) || surrounding >= 6;\n            },\n            reset: function () {\n                this.wasOpen = this.open;\n            }\n        }, function () {\n            //init\n            this.open = Math.random() > 0.40;\n        });\n\n        world.initialize([\n            { name: 'wall', distribution: 100 }\n        ]);\n\n        // generate our cave, 10 steps aught to do it\n        for (let i=0; i<10; i++) {\n            world.step();\n        }\n\n        let grid = world.createGridFromValues([\n            { cellType: 'wall', hasProperty: 'open', value: 0 }\n        ], 1);\n\n        // cut the top half of the caves off\n        for (let y=0; y<Math.floor(world.height/2); y++) {\n            for (let x=0; x<world.width; x++) {\n                grid[y][x] = 0;\n            }\n        }\n\n        // NOW USE OUR CAVES TO CREATE A NEW WORLD CONTAINING WATER\n        world = new CellAuto.World({\n            width: width,\n            height: height,\n            clearRect: true\n        });\n\n        world.palette = [\n            [89, 125, 206, 1],\n            [89, 125, 206, 1/9 * 255],\n            [89, 125, 206, 2/9 * 255],\n            [89, 125, 206, 3/9 * 255],\n            [89, 125, 206, 4/9 * 255],\n            [89, 125, 206, 5/9 * 255],\n            [89, 125, 206, 6/9 * 255],\n            [89, 125, 206, 7/9 * 255],\n            [89, 125, 206, 8/9 * 255],\n            [89, 125, 206, 255],\n            [109, 170, 44, 255],\n            [68, 36, 52, 255]\n        ];\n\n        world.registerCellType('air', {\n            getColor: function() {\n                //return '89, 125, 206, ' + (this.water ? Math.max(0.3, this.water/9) : 0);\n                return this.water;\n            },\n            process: function(neighbors) {\n                // rain on the top row\n                if (neighbors[world.TOP.index] === null && Math.random() < 0.02) {\n                    this.water = 5;\n                }\n                else if (this.water === 0) {\n                    // already empty\n                    return;\n                }\n\n                // push my water out to my available neighbors\n\n                // cell below me will take all it can\n                if (neighbors[world.BOTTOM.index] !== null && this.water && neighbors[world.BOTTOM.index].water < 9) {\n                    let amt = Math.min(this.water, 9 - neighbors[world.BOTTOM.index].water);\n                    this.water-= amt;\n                    neighbors[world.BOTTOM.index].water += amt;\n                    return;\n                }\n\n                // bottom two corners take half of what I have\n                for (let i=5; i<=7; i++) {\n                    if (i!=world.BOTTOM.index && neighbors[i] !== null && this.water && neighbors[i].water < 9) {\n                        let amt = Math.min(this.water, Math.ceil((9 - neighbors[i].water)/2));\n                        this.water-= amt;\n                        neighbors[i].water += amt;\n                        return;\n                    }\n                }\n                // sides take a third of what I have\n                for (let i=3; i<=4; i++) {\n                    if (neighbors[i] !== null && neighbors[i].water < this.water) {\n                        let amt = Math.min(this.water, Math.ceil((9 - neighbors[i].water)/3));\n                        this.water-= amt;\n                        neighbors[i].water += amt;\n                        return;\n                    }\n                }\n            }\n        }, function() {\n            //init\n            this.water = 0;\n        });\n\n        world.registerCellType('rock', {\n            isSolid: true,\n            getColor: function() {\n                return this.lighted ? 10 : 11;\n            },\n            process: function(neighbors) {\n                this.lighted = neighbors[world.TOP.index] && !(neighbors[world.TOP.index].water === 9) && !neighbors[world.TOP.index].isSolid\n                    && neighbors[world.BOTTOM.index] && neighbors[world.BOTTOM.index].isSolid;\n            }\n        });\n\n        // pass in our generated cave data\n        world.initializeFromGrid([\n            { name: 'rock', gridValue: 1 },\n            { name: 'air', gridValue: 0 }\n        ], grid);\n\n        return world;\n    },\n\n    /**\n     * Simulates splashing water.\n     * \n     * From https://sanojian.github.io/cellauto\n     */\n    Splashes: function(width = 128, height = 128) {\n        let world = new CellAuto.World({\n            width: width,\n            height: height\n        });\n\n        world.palette = [];\n        let colors = [];\n        for (let index=0; index<64; index++) {\n            world.palette.push([89, 125, 206, (index/64) * 255]);\n            colors[index] = 63 - index;\n        }\n\n        world.registerCellType('water', {\n            getColor: function () {\n                let v = (Math.max(2 * this.value + 0.02, 0) - 0.02) + 0.5;\n                return colors[Math.floor(colors.length * v)];\n            },\n            process: function (neighbors) {\n                if(this.droplet == true) {\n                    for (let i = 0; i < neighbors.length; i++) {\n                        if (neighbors[i] !== null && neighbors[i].value) {\n                            neighbors[i].value = 0.5 *this.value;\n                            neighbors[i].prev = 0.5 *this.prev;\n                        }\n                    }\n                    this.droplet = false;\n                    return true;\n                }\n                let avg = this.getSurroundingCellsAverageValue(neighbors, 'value');\n                this.next = 0.99 * (2 * avg - this.prev);\n                return true;\n            },\n            reset: function () {\n                if(Math.random() > 0.9999) {\n                    this.value = -0.2 + 0.25*Math.random();\n                    this.prev = this.value;\n                    this.droplet = true;\n                }\n                else {\n                    this.prev = this.value;\n                    this.value = this.next;\n                }\n                return true;\n            }\n        }, function () {\n            //init\n            this.water = true;\n            this.value = 0.0;\n            this.prev = this.value;\n            this.next = this.value;\n        });\n\n        world.initialize([\n            { name: 'water', distribution: 100 }\n        ]);\n\n        return world;\n    },\n\n    /**\n     * Rule 52928 - the CA used for Wolfram Alpha's loading animations\n     * \n     * Resources:\n     * https://www.quora.com/What-is-Wolfram-Alphas-loading-screen-a-depiction-of\n     * http://jsfiddle.net/hungrycamel/9UrzJ/\n     */\n    Wolfram: function(width = 96, height = 96) {\n        let world = new CellAuto.World({\n            width: width,\n            height: height,\n            wrap: true\n        });\n\n        world.recommendedFrameFrequency = 2;\n\n        world.palette = [\n            [255, 255, 255, 255], // Background color\n            [255, 110, 0  , 255], // dark orange\n            [255, 130, 0  , 255], //      |\n            [255, 150, 0  , 255], //      |\n            [255, 170, 0  , 255], //      V\n            [255, 180, 0  , 255]  // light orange\n        ];\n\n        let choice = Math.random();\n\n        let seedList = [\n            [\n                [0, 0, 0, 1, 0, 0, 0, 0, 0, 0], \n                [0, 2, 1, 1, 1, 1, 0, 0, 0, 0], \n                [1, 1, 3, 4, 2, 1, 1, 0, 0, 0], \n                [0, 1, 1, 1, 4, 1, 1, 0, 0, 0], \n                [0, 1, 2, 0, 1, 1, 1, 1, 0, 0], \n                [0, 1, 1, 1, 0, 0, 2, 2, 0, 0], \n                [0, 0, 2, 2, 0, 0, 1, 1, 1, 0], \n                [0, 0, 1, 1, 1, 1, 0, 2, 1, 0], \n                [0, 0, 0, 1, 1, 4, 1, 1, 1, 0], \n                [0, 0, 0, 1, 1, 2, 4, 3, 1, 1], \n                [0, 0, 0, 0, 1, 1, 1, 1, 2, 0], \n                [0, 0, 0, 0, 0, 0, 1, 0, 0, 0]\n            ], \n            [[0, 0, 0, 0, 0, 0, 1, 0], [1, 1, 1, 1, 0, 0, 1, 0], [0, 1, 0, 0, 1, 1, 1, 1], [0, 1, 0, 0, 0, 0, 0, 0]], \n            [[0, 0, 0, 0, 0, 0, 1, 1], [0, 0, 1, 1, 1, 0, 1, 1], [1, 1, 0, 1, 1, 1, 0, 0], [1, 1, 0, 0, 0, 0, 0, 0]], \n            [[0, 0, 0, 0, 0, 0, 1, 1], [0, 1, 1, 1, 1, 1, 0, 0], [0, 0, 1, 1, 1, 1, 1, 0], [1, 1, 0, 0, 0, 0, 0, 0]], \n            [[0, 0, 0, 0, 0, 0, 1, 1], [1, 0, 0, 0, 1, 1, 1, 0], [0, 1, 1, 1, 0, 0, 0, 1], [1, 1, 0, 0, 0, 0, 0, 0]], \n            [[0, 0, 0, 0, 0, 0, 1, 1], [1, 0, 0, 1, 1, 0, 1, 1], [1, 1, 0, 1, 1, 0, 0, 1], [1, 1, 0, 0, 0, 0, 0, 0]], \n            [[0, 0, 0, 0, 1, 1, 1, 0], [1, 1, 1, 0, 1, 1, 1, 1], [1, 1, 1, 1, 0, 1, 1, 1], [0, 1, 1, 1, 0, 0, 0, 0]], \n            [[0, 0, 1, 1, 1, 1, 1, 1], [1, 0, 1, 1, 0, 1, 1, 1], [1, 1, 1, 0, 1, 1, 0, 1], [1, 1, 1, 1, 1, 1, 0, 0]], \n            [[0, 1, 0, 0, 0, 1, 1, 1], [1, 0, 1, 1, 0, 1, 1, 1], [1, 1, 1, 0, 1, 1, 0, 1], [1, 1, 1, 0, 0, 0, 1, 0]], \n            [[0, 1, 1, 0, 1, 1, 1, 1], [0, 1, 0, 1, 0, 0, 1, 0], [0, 1, 0, 0, 1, 0, 1, 0], [1, 1, 1, 1, 0, 1, 1, 0]], \n            [[1, 1, 1, 0, 1, 1, 1, 0], [0, 1, 0, 0, 1, 1, 1, 0], [0, 1, 1, 1, 0, 0, 1, 0], [0, 1, 1, 1, 0, 1, 1, 1]], \n            [[1, 1, 1, 0, 1, 1, 1, 1], [1, 1, 0, 1, 1, 1, 1, 0], [0, 1, 1, 1, 1, 0, 1, 1], [1, 1, 1, 1, 0, 1, 1, 1]], \n            [[1, 1, 1, 1, 0, 0, 0, 1], [1, 1, 0, 1, 1, 0, 0, 1], [1, 0, 0, 1, 1, 0, 1, 1], [1, 0, 0, 0, 1, 1, 1, 1]], \n            [[1, 1, 1, 1, 0, 0, 1, 0], [0, 0, 1, 0, 1, 1, 0, 1], [1, 0, 1, 1, 0, 1, 0, 0], [0, 1, 0, 0, 1, 1, 1, 1]], \n            [[1, 1, 1, 1, 0, 0, 1, 0], [1, 0, 0, 1, 1, 0, 1, 1], [1, 1, 0, 1, 1, 0, 0, 1], [0, 1, 0, 0, 1, 1, 1, 1]], \n            [[1, 1, 1, 1, 0, 0, 1, 0], [1, 1, 1, 0, 1, 0, 0, 1], [1, 0, 0, 1, 0, 1, 1, 1], [0, 1, 0, 0, 1, 1, 1, 1]], \n            [[1, 1, 1, 1, 0, 0, 1, 0], [1, 1, 1, 0, 1, 1, 0, 1], [1, 0, 1, 1, 0, 1, 1, 1], [0, 1, 0, 0, 1, 1, 1, 1]], \n            [[1, 1, 1, 1, 0, 0, 1, 0], [1, 1, 1, 1, 0, 0, 1, 1], [1, 1, 0, 0, 1, 1, 1, 1], [0, 1, 0, 0, 1, 1, 1, 1]], \n            [[1, 1, 1, 1, 0, 1, 0, 1], [1, 1, 1, 0, 0, 1, 0, 0], [0, 0, 1, 0, 0, 1, 1, 1], [1, 0, 1, 0, 1, 1, 1, 1]], \n            [[1, 1, 1, 1, 0, 1, 1, 0], [0, 0, 0, 0, 0, 1, 1, 0], [0, 1, 1, 0, 0, 0, 0, 0], [0, 1, 1, 0, 1, 1, 1, 1]], \n            [[1, 1, 1, 1, 0, 1, 1, 0], [0, 1, 0, 0, 1, 0, 1, 0], [0, 1, 0, 1, 0, 0, 1, 0], [0, 1, 1, 0, 1, 1, 1, 1]], \n            [[1, 1, 1, 1, 0, 1, 1, 0], [1, 1, 1, 0, 0, 1, 1, 0], [0, 1, 1, 0, 0, 1, 1, 1], [0, 1, 1, 0, 1, 1, 1, 1]], \n            [[1, 1, 1, 1, 1, 0, 0, 0], [0, 0, 1, 1, 1, 1, 0, 0], [0, 0, 1, 1, 1, 1, 0, 0], [0, 0, 0, 1, 1, 1, 1, 1]], \n            [[1, 1, 1, 1, 1, 0, 0, 0], [1, 1, 0, 1, 1, 1, 1, 0], [0, 1, 1, 1, 1, 0, 1, 1], [0, 0, 0, 1, 1, 1, 1, 1]], \n            [[1, 1, 1, 1, 1, 0, 1, 1], [0, 0, 1, 1, 1, 0, 0, 0], [0, 0, 0, 1, 1, 1, 0, 0], [1, 1, 0, 1, 1, 1, 1, 1]], \n            [[1, 1, 1, 1, 1, 0, 1, 1], [0, 1, 1, 1, 1, 1, 0, 1], [1, 0, 1, 1, 1, 1, 1, 0], [1, 1, 0, 1, 1, 1, 1, 1]], \n            [[1, 1, 1, 1, 1, 0, 1, 1], [1, 1, 0, 1, 0, 1, 1, 0], [0, 1, 1, 0, 1, 0, 1, 1], [1, 1, 0, 1, 1, 1, 1, 1]], \n            [[1, 1, 1, 1, 1, 0, 1, 1], [1, 1, 1, 1, 0, 0, 1, 1], [1, 1, 0, 0, 1, 1, 1, 1], [1, 1, 0, 1, 1, 1, 1, 1]], \n            [[1, 1, 1, 1, 1, 1, 0, 0], [0, 0, 1, 0, 0, 1, 1, 1], [1, 1, 1, 0, 0, 1, 0, 0], [0, 0, 1, 1, 1, 1, 1, 1]], \n            [[1, 1, 1, 1, 1, 1, 0, 0], [0, 1, 1, 1, 1, 1, 1, 0], [0, 1, 1, 1, 1, 1, 1, 0], [0, 0, 1, 1, 1, 1, 1, 1]], \n            [[1, 1, 1, 1, 1, 1, 1, 0], [0, 0, 1, 0, 1, 0, 1, 1], [1, 1, 0, 1, 0, 1, 0, 0], [0, 1, 1, 1, 1, 1, 1, 1]]\n        ];\n\n        world.registerCellType('living', {\n            getColor: function () {\n                return this.state;\n            },\n            process: function (neighbors) {\n\n                let neighborOnes = neighbors.filter(function(item){\n                    return item.state == 1;\n                }).length;\n\n                if(this.state == 0) {\n                    if(neighborOnes == 3 || neighborOnes == 5 || neighborOnes == 7) \n                        this.newState = 1;\n                } else if (this.state == 1) {\n                    if(neighborOnes == 0 || neighborOnes == 1 || neighborOnes == 2 || neighborOnes == 6 || neighborOnes == 8)\n                        this.newState = 2;\n                } else if (this.state == 2) {\n                    this.newState = 3;\n                } else if (this.state == 3) {\n                    this.newState = 4;\n                } else if (this.state == 4) {\n                    this.newState = 0;\n                }\n            },\n            reset: function () {\n                this.state = this.newState;\n            }\n        }, function (x, y) {\n            // Init \n\n            // 50% chance to use a seed\n            if(choice < 0.5){\n                let seed;\n                // 25% chance to use a random seed\n                if(choice < 0.25) {\n                    seed = seedList[Math.floor(Math.random() * seedList.length)];\n                }\n                // 25% chance to use the Wolfram seed\n                else {\n                    seed = seedList[0];\n                }\n\n                let minX = Math.floor(width / 2) - Math.floor(seed[0].length / 2);\n                let maxX = Math.floor(width / 2) + Math.floor(seed[0].length / 2);\n                let minY = Math.floor(height / 2) - Math.floor(seed.length / 2);\n                let maxY = Math.floor(height / 2) + Math.floor(seed.length / 2);\n\n                this.state = 0;\n\n                // If the cell is inside of the seed array (centered in the world), then use its value\n                if (x >= minX && x < maxX && y >= minY && y < maxY) {\n                    this.state = seed[y - minY][x - minX];\n                }\n            } \n            // 50% chance to initialize with noise\n            else {\n                this.state = Math.random() < 0.15 ? 1 : 0;\n            }\n            this.newState = this.state;\n        });\n\n        world.initialize([\n           { name: 'living', distribution: 100 },\n        ]);\n\n        return world;\n    },\n\n    /**\n     * Simulates a Belousov-Zhabotinsky reaction (approximately).\n     * This one's still a little messed up, so consider it experimental.\n     * \n     * Resources:\n     * http://ccl.northwestern.edu/netlogo/models/B-ZReaction\n     * http://www.fractaldesign.net/automataalgorithm.aspx\n     */\n    BelousovZhabotinsky: function(width = 128, height = 128) {\n        let world = new CellAuto.World({\n            width: width,\n            height: height,\n            wrap: true\n        });\n\n        // Override frame frequency for this setup\n        world.recommendedFrameFrequency = 10;\n\n        // Config letiables\n        let kernel = [ // weights for neighbors. First index is for self weight\n         0, 1, 1, 1,\n            1,    1,\n            1, 1, 1\n        ].reverse();\n        let k1 = 5; // Lower gives higher tendency for a cell to be sickened by ill neighbors\n        let k2 = 1; // Lower gives higher tendency for a cell to be sickened by infected neighbors\n        let g = 5;\n        let numStates = 255;\n\n        world.palette = [];\n        for (let i = 0; i < numStates; i++) {\n            let gray = Math.floor((255 / numStates) * i);\n            world.palette.push([gray, gray, gray, 255]);\n        }\n\n        world.registerCellType('bz', {\n            getColor: function () {\n                return this.state;\n            },\n            process: function (neighbors) {\n                let healthy = 0;\n                let infected = 0;\n                let ill = 0;\n                let sumStates = this.state;\n    \n                for(let i = 0; i < neighbors.length + 1; i++) {\n                    let neighbor;\n                    if (i == 8) neighbor = this;\n                    else neighbor = neighbors[i];\n                    \n                    //if(neighbor !== null && neighbor.state){\n                        sumStates += neighbor.state * kernel[i];\n                        if(kernel[i] > 0) {\n                            if(neighbor.state == 0) healthy += 1;\n                            else if(neighbor.state < (numStates - 1)) infected += 1;\n                            else ill += 1;\n                        }\n                    //}\n                }\n\n                if(this.state == 0) {\n                    this.newState = (infected / k1) + (ill / k2);\n                } else if (this.state < (numStates) - 1) {\n                    this.newState = (sumStates / infected + ill + 1) + g;\n                    //this.newState = (sumStates / 9) + g;\n                } else {\n                    this.newState = 0;\n                }\n\n                // Make sure to set state to newstate in a second pass\n                this.newState = Math.max(0, Math.min(numStates - 1, Math.floor(this.newState)));\n\n            },\n            reset: function () {\n                this.state = this.newState;\n            }\n        }, function () {\n            // Init\n            // Generate a random state\n            this.state = Math.random() < 1.0 ? Math.floor(Math.random() * numStates) : 0;\n            this.newState = this.state;\n        });\n\n        world.initialize([\n            { name: 'bz', distribution: 100 }\n        ]);\n\n        return world;\n    }\n\n}\n\n\n/**\n * Simulates a 1D automata.\n * Expects a property `rule` in `options`, which is the integer rule of the CA.\n * \n * Not totally correct yet!\n * \n */\nfunction Elementary(options) {\n    let world = new CellAuto.World(options);\n\n    let rule = (options.rule >>> 0).toString(2);\n    while(rule.length < 8) {\n        rule = \"0\" + rule;\n    }\n\n    console.log(options.rule);\n\n    function processRule(leftAlive, centerAlive, rightAlive) {\n        let index = 0;\n        if(rightAlive) index += 1;\n        if(centerAlive) index += 2;\n        if(leftAlive) index += 4;\n        return rule[rule.length - 1 - index];\n    }\n    \n    function testRule() {\n        let lastIndex = rule.length - 1;\n        for(let i = 0; i < 8; i++) {\n            // Convert i to binary and use it to feed processRule\n            let bin = ((lastIndex - i) >>> 0).toString(2);\n            while(bin.length < 3) bin = \"0\" + bin;\n            let ruleOut = processRule(bin[0] == \"1\", bin[1] == \"1\", bin[2] == \"1\");\n\n            console.assert(ruleOut == rule[i], bin + \" \" + rule[i] + \" \" + (ruleOut == rule[i]).toString());\n        }\n    }\n    //testRule();\n\n    world.registerCellType('living', {\n        getColor: function () {\n            return this.alive ? 0 : 1;\n        },\n        process: function (neighbors) {\n            function getWasAlive(neighbor){\n                if(neighbor != null)\n                    return neighbor.wasAlive;\n                return false;\n            }\n            \n            // If the cell isn't active yet, determine its state based on its upper neighbors\n            if(!this.wasAlive) {\n                this.alive = processRule(getWasAlive(neighbors[0]), getWasAlive(neighbors[1]), getWasAlive(neighbors[2])) == \"1\";\n            }\n        },\n        reset: function () {\n            this.wasAlive = this.alive;\n        }\n    }, function (x, y) {\n        // Init\n        this.alive = (x == Math.floor(options.width / 2)) && (y == 1);\n        //this.alive = Math.random() < 0.01;\n        //this.wasAlive = this.alive;\n    });\n\n    world.initialize([\n        { name: 'living', distribution: 100 }\n    ]);\n\n    return world;\n}\n\n/**\n * Simulates a Life-like automata. Uses B/S notation.\n * See https://en.wikipedia.org/wiki/Life-like_cellular_automaton\n * \n * Expects two additional properties in `options`:\n * `B`: An array of ints representing the B component of the rule\n * `S`: An array of ints representing the S component of the rule\n */\nfunction LifeLike(options, distributionFunc) {\n    let world = new CellAuto.World(options);\n\n    world.registerCellType('living', {\n        getColor: function () {\n            return this.alive ? 0 : 1;\n        },\n        process: function (neighbors) {\n            let surrounding = this.countSurroundingCellsWithValue(neighbors, 'wasAlive');\n            this.alive = options.B.includes(surrounding) || options.S.includes(surrounding) && this.alive;\n        },\n        reset: function () {\n            this.wasAlive = this.alive;\n        }\n    }, function (x, y) {\n        // Init\n        if(distributionFunc)\n            this.alive = distributionFunc(x, y);\n        else   \n            this.alive = Math.random() < 0.5;\n    });\n\n    world.initialize([\n        { name: 'living', distribution: 100 }\n    ]);\n\n    return world;\n}"]}