{"version":3,"sources":["node_modules/browser-pack/_prelude.js","src/dust.js","src/gui.js","src/main.js","src/utils/webgl-detect.js","src/vendor/cellauto.js","src/worlds.js"],"names":["e","t","n","r","s","o","u","a","require","i","f","Error","code","l","exports","call","length","1","module","_cellauto","_worlds","FrameCounter","Dust","container","initFinishedCallback","_this","this","_classCallCheck","worldNames","Object","keys","Worlds","worldOptions","name","Math","random","app","PIXI","Application","antialias","transparent","resolution","appendChild","view","ticker","add","delta","OnUpdate","framecounter","stop","loader","load","res","loadedResources","Setup","start","world","width","height","frameFrequency","recommendedFrameFrequency","renderer","resize","style","cssText","border","backgroundColor","textureCanvas","document","createElement","textureCtx","getContext","baseTexture","BaseTexture","fromCanvas","sprite","Sprite","Texture","Rectangle","x","y","anchor","set","filter","Filter","fragShader","data","filters","stage","removeChildren","addChild","UpdateTexture","IncrementFrame","uniforms","time","step","render","index","ctx","fillStyle","fillRect","pix","createImageData","grid","newState","state","paletteIndex","getColor","colorRGBA","palette","ex","console","error","putImageData","update","frameLimit","arguments","undefined","frameCount","passedFrames","GUI","dust","dat","warn","gui","min","max","listen","getOwnPropertyNames","onChange","_webglDetect","_dust","_gui","getElementById","Detector","HasWebGL","Init","log","innerHTML","GetErrorHTML","classList","window","WebGLRenderingContext","canvas","names","context","getParameter","message","CellAutoCell","locX","locY","delays","CAWorld","options","wrap","TOPLEFT","TOP","TOPRIGHT","LEFT","RIGHT","BOTTOMLEFT","BOTTOM","BOTTOMRIGHT","randomGenerator","neighborhood","hexTiles","reset","fillNeighbors","cell","process","steps","action","splice","NEIGHBORLOCS","diffX","diffY","flatTopped","neighbors","neighborX","neighborY","initialize","arrayTypeDist","sort","b","distribution","totalDist","cellTypes","registerCellType","cellOptions","init","key","_typeof","JSON","parse","stringify","prototype","create","constructor","cellType","countSurroundingCellsWithValue","value","surrounding","delay","numSteps","fn","push","getSurroundingCellsAverageValue","summed","initializeFromGrid","values","initGrid","gridValue","createGridFromValues","defaultValue","newGrid","hasProperty","CellAuto","World","Cell","define","amd","Life","alive","wasAlive","Lava","colors","v","sin","PI","floor","droplet","prev","avg","next","Maze","simulated","CyclicRainbows","changing","CavesWithWater","open","wasOpen","clearRect","water","amt","ceil","isSolid","lighted","Rain","Splashes","Wolfram","choice","seedList","neighborOnes","item","seed","minX","maxX","minY","maxY","BelousovZhabotinsky","kernel","reverse","gray","healthy","infected","ill","sumStates","neighbor","numStates"],"mappings":"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EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAAK,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,MACnG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAAK,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAAK,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAAK,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,MACnG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAAK,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAAK,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAAK,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,MACnG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAAK,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAAK,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAAK,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,MACnG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAAK,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAAK,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAAK,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,MACnG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAAK,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAAK,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAAK,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,MACnG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAAK,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAAK,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAAK,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,MACnG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAAK,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAAK,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAAK,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,MACnG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAAK,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAAK,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAAK,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,MACnG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAAK,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAAK,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAAK,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,MACnG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAAK,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAAK,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAAK,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,MACnG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAAK,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAAK,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAAK,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,MACnG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAAK,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAAK,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAAK,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,MACnG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAAK,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAAK,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAAK,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,MACnG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAAK,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAAK,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAAK,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,MACnG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAAK,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAAK,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAAK,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,MACnG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAAK,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAAK,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAAK,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,MACnG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAAK,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAAK,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAAK,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,MACnG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAAK,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAAK,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAAK,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,MACnG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAAK,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAAK,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAAK,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,MACnG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAAK,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAAK,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAAK,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,MACnG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAAK,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAAK,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAAK,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,MACnG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAAK,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAAK,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAAK,EAAG,EAAG,EAAG,EAA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","file":"dust.min.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","import * as CellAuto from \"./vendor/cellauto.js\";\nimport { Worlds } from \"./worlds.js\";\n\nexport class Dust {\n    constructor(container, initFinishedCallback) {\n        this.container = container;\n\n        var worldNames = Object.keys(Worlds);\n        this.worldOptions = {\n            name: worldNames[worldNames.length * Math.random() << 0], // Random startup world\n            //width: 128, // Can force a width/height here\n            //height: 128\n        }\n\n        // Create the app and put its canvas into `container`\n        this.app = new PIXI.Application(\n            {\n                antialias: false, \n                transparent: false, \n                resolution: 1\n            }\n        );\n        this.container.appendChild(this.app.view);\n\n        // Start the update loop\n        this.app.ticker.add((delta) => {\n            this.OnUpdate(delta);\n        });\n\n        this.framecounter = new FrameCounter(1, null);\n\n        // Stop application wait for setup to finish\n        this.app.stop();\n\n        // Load resources needed for the program to run\n        PIXI.loader\n            .add('fragShader', '../resources/dust.frag')\n            .load((loader, res) => {\n                // Loading has finished\n                this.loadedResources = res;\n                this.Setup();\n                this.app.start();\n                initFinishedCallback();\n            });\n    }\n\n    /**\n     * Reusable method for setting up the simulation from `this.worldOptions`.\n     * Also works as a reset function if you call this without changing\n     * `this.worldOptions.name` beforehand.\n     */\n    Setup() {\n\n        // Create the world from the string\n        this.world = Worlds[this.worldOptions.name].call(this, this.worldOptions.width, this.worldOptions.height);\n        this.framecounter.frameFrequency = this.world.recommendedFrameFrequency || 1;\n\n        this.app.renderer.resize(this.world.width, this.world.height);\n\n        // Remove canvas filtering through css\n        this.app.renderer.view.style.cssText = ` \n            image-rendering: optimizeSpeed; \n            image-rendering: -moz-crisp-edges; \n            image-rendering: -webkit-optimize-contrast; \n            image-rendering: optimize-contrast; \n            image-rendering: pixelated; \n            -ms-interpolation-mode: nearest-neighbor; \n        `;\n        this.app.renderer.view.style.border = \"1px dashed green\";\n        this.app.renderer.view.style.width = \"100%\";\n        this.app.renderer.view.style.height = \"100%\";\n        this.app.renderer.backgroundColor = 0xffffff;\n\n        // Create a sprite from a blank canvas\n        this.textureCanvas = document.createElement('canvas');\n        this.textureCanvas.width = this.world.width;\n        this.textureCanvas.height = this.world.height;\n        this.textureCtx = this.textureCanvas.getContext('2d'); // Used later to update texture\n\n        this.baseTexture = new PIXI.BaseTexture.fromCanvas(this.textureCanvas);\n        this.sprite = new PIXI.Sprite(\n            new PIXI.Texture(this.baseTexture, new PIXI.Rectangle(0, 0, this.world.width, this.world.height))\n        );\n\n        // Center the sprite\n        this.sprite.x = this.world.width / 2;\n        this.sprite.y = this.world.height / 2;\n        this.sprite.anchor.set(0.5);\n\n        // Create the shader for the sprite\n        this.filter = new PIXI.Filter(null, this.loadedResources.fragShader.data);\n        this.sprite.filters = [this.filter];\n\n        this.app.stage.removeChildren(); // Remove any attached children (for case where changing presets)\n        this.app.stage.addChild(this.sprite);\n\n        // Update the texture from the initial state of the world\n        this.UpdateTexture();\n    }\n\n    /**\n     * Called every frame. Continues indefinitely after being called once.\n     */\n    OnUpdate(delta) {\n        var noskip = this.framecounter.IncrementFrame();\n        if(noskip) {\n            this.filter.uniforms.time += delta;\n            this.world.step();\n            this.UpdateTexture();\n            this.app.render();\n        }\n\n    }\n\n    /**\n     * Updates the texture representing the world.\n     * Writes cell colors to the texture canvas and updates `baseTexture` from it,\n     * which makes Pixi update the sprite.\n     */\n    UpdateTexture() {\n        \n        var index = 0;\n        var ctx = this.textureCtx;\t\t\n        ctx.fillStyle = \"black\";\n        ctx.fillRect(0, 0, this.textureCanvas.width, this.textureCanvas.height);\n        var pix = ctx.createImageData(this.textureCanvas.width, this.textureCanvas.height);\t\t\n        for (var y = 0; y < this.textureCanvas.height; y++) {\t\t\t\n            for (var x = 0; x < this.textureCanvas.width; x++) {\n                // Swap buffers if used\n                if(this.world.grid[y][x].newState != null)\n                    this.world.grid[y][x].state = this.world.grid[y][x].newState;\n                var paletteIndex = this.world.grid[y][x].getColor();\n                try {\t\t\t\t\n                    var colorRGBA = this.world.palette[paletteIndex];\t\n                    pix.data[index++] = colorRGBA[0];\t\t\t\t\n                    pix.data[index++] = colorRGBA[1];\t\t\t\t\n                    pix.data[index++] = colorRGBA[2];\t\t\t\t\n                    pix.data[index++] = colorRGBA[3];\t\n                } catch (ex) {\n                    console.error(paletteIndex);\n                    throw new Error(ex);\n                }\t\n            }\t\t\n        } \t\t\n        ctx.putImageData(pix, 0, 0);\n\n        // Tell Pixi to update the texture referenced by this ctx.\n        this.baseTexture.update();\n\n    }\n\n}\n\n/**\n * Convenience class for restricting the refresh rate of the simulation.\n */\nclass FrameCounter {\n    constructor(frameFrequency, frameLimit = null) {\n        // The number of frames ingested\n        this.frameCount = 0;\n\n        // The number of frames allowed to run\n        this.passedFrames = 0;\n\n        // Frame will run every `frameFrequency` frames that pass\n        this.frameFrequency = frameFrequency;\n\n        // If set, class will stop allowing frames after `frameLimit` \n        // passedFrames have been allowed.\n        this.frameLimit = frameLimit;\n    }\n\n    /**\n     * Returns true once every `frameFrequency` times it is called.\n     */\n    IncrementFrame(){\n        this.frameCount += 1;\n        if(this.frameCount % this.frameFrequency == 0) {\n            // If we've reached the frame limit\n            if(this.frameLimit != null && this.passedFrames >= this.frameLimit)\n                return false;\n\n            this.frameCount = 0;\n            this.passedFrames += 1;\n            return true;\n        }\n        return false;\n    }\n}","import { Worlds } from \"./worlds.js\";\n\nexport class GUI {\n\n    /**\n     * Creates and attaches a GUI to the page if DAT.GUI is included.\n     */\n    static Init(dust){\n        if(typeof(dat) === \"undefined\"){\n            console.warn(\"No DAT.GUI instance found. Import on this page to use!\");\n            return;\n        }\n\n        var gui = new dat.GUI();\n\n        gui.add(dust.framecounter, 'frameFrequency').min(1).max(30).step(1).listen();\n\n        gui.add(dust.worldOptions, 'name', Object.getOwnPropertyNames(Worlds)).onChange(() => {\n            dust.Setup();\n        }).name(\"Preset\");\n\n        gui.add(dust, \"Setup\").name(\"Reset\");\n    }\n\n}","import { Detector } from \"./utils/webgl-detect.js\";\nimport { Dust } from \"./dust.js\";\nimport { GUI } from \"./gui.js\";\n\nlet container = document.getElementById(\"dust-container\");\n\nif ( !Detector.HasWebGL() ) {\n    //exit(\"WebGL is not supported on this browser.\");\n    console.log(\"WebGL is not supported on this browser.\");\n    container.innerHTML = Detector.GetErrorHTML();\n    container.classList.add(\"no-webgl\");\n}\nelse {\n    let dust = new Dust(container, () => {\n        // Dust is now fully loaded\n        GUI.Init(dust);\n    });\n}","class Detector {\n\n    //http://stackoverflow.com/questions/11871077/proper-way-to-detect-webgl-support\n    static HasWebGL() {\n        if (!!window.WebGLRenderingContext) {\n            var canvas = document.createElement(\"canvas\"),\n                    names = [\"webgl\", \"experimental-webgl\", \"moz-webgl\", \"webkit-3d\"],\n                context = false;\n\n            for(var i=0;i<4;i++) {\n                try {\n                    context = canvas.getContext(names[i]);\n                    if (context && typeof context.getParameter == \"function\") {\n                        // WebGL is enabled\n                        return true;\n                    }\n                } catch(e) {}\n            }\n\n            // WebGL is supported, but disabled\n            return false;\n        }\n        // WebGL not supported\n        return false;\n    }\n\n    static GetErrorHTML(message = null){\n        if(message == null){\n            message = `Your graphics card does not seem to support \n                        <a href=\"http://khronos.org/webgl/wiki/Getting_a_WebGL_Implementation\">WebGL</a>. <br>\n                        Find out how to get it <a href=\"http://get.webgl.org/\">here</a>.`;\n        }\n        return `\n        <div class=\"no-webgl-support\">\n        <p style=\"text-align: center;\">${message}</p>\n        </div>\n        `\n    }\n\n}\n\nexport { Detector };","function CellAutoCell(locX, locY) {\n\tthis.x = locX;\n\tthis.y = locY;\n\n\tthis.delays = [];\n}\n\nCellAutoCell.prototype.process = function(neighbors) {\n\treturn;\n};\nCellAutoCell.prototype.countSurroundingCellsWithValue = function(neighbors, value) {\n\tvar surrounding = 0;\n\tfor (var i = 0; i < neighbors.length; i++) {\n\t\tif (neighbors[i] !== null && neighbors[i][value]) {\n\t\t\tsurrounding++;\n\t\t}\n\t}\n\treturn surrounding;\n};\nCellAutoCell.prototype.delay = function(numSteps, fn) {\n\tthis.delays.push({ steps: numSteps, action: fn });\n};\n\nCellAutoCell.prototype.reset = function(neighbors) {\n\treturn;\n};\n\nCellAutoCell.prototype.getSurroundingCellsAverageValue = function(neighbors, value) {\n\tvar summed = 0.0;\n\tfor (var i = 0; i < neighbors.length; i++) {\n\t\tif (neighbors[i] !== null && (neighbors[i][value] || neighbors[i][value] === 0)) {\n\t\t\tsummed += neighbors[i][value];\n\t\t}\n\t}\n\treturn summed / neighbors.length;//cnt;\n};\nfunction CAWorld(options) {\n\n\tthis.width = 24;\n\tthis.height = 24;\n\tthis.options = options;\n\n\tthis.wrap = false;\n\n\tthis.TOPLEFT        = { index: 0, x: -1, y: -1 };\n\tthis.TOP            = { index: 1, x:  0, y: -1 };\n\tthis.TOPRIGHT       = { index: 2, x:  1, y: -1 };\n\tthis.LEFT           = { index: 3, x: -1, y:  0 };\n\tthis.RIGHT          = { index: 4, x:  1, y:  0 };\n\tthis.BOTTOMLEFT     = { index: 5, x: -1, y:  1 };\n\tthis.BOTTOM         = { index: 6, x:  0, y:  1 };\n\tthis.BOTTOMRIGHT    = { index: 7, x:  1, y:  1 };\n\t\n\tthis.randomGenerator = Math.random;\n\n\t// square tiles by default, eight sides\n\tvar neighborhood = [null, null, null, null, null, null, null, null];\n\n\tif (this.options.hexTiles) {\n\t\t// six sides\n\t\tneighborhood = [null, null, null, null, null, null];\n\t}\n\tthis.step = function() {\n\t\tvar y, x;\n\t\tfor (y=0; y<this.height; y++) {\n\t\t\tfor (x=0; x<this.width; x++) {\n\t\t\t\tthis.grid[y][x].reset();\n\t\t\t}\n\t\t}\n\n\t\t// bottom up, left to right processing\n\t\tfor (y=this.height-1; y>=0; y--) {\n\t\t\tfor (x=this.width-1; x>=0; x--) {\n\t\t\t\tthis.fillNeighbors(neighborhood, x, y);\n\t\t\t\tvar cell = this.grid[y][x];\n\t\t\t\tcell.process(neighborhood);\n\n\t\t\t\t// perform any delays\n\t\t\t\tfor (var i=0; i<cell.delays.length; i++) {\n\t\t\t\t\tcell.delays[i].steps--;\n\t\t\t\t\tif (cell.delays[i].steps <= 0) {\n\t\t\t\t\t\t// perform action and remove delay\n\t\t\t\t\t\tcell.delays[i].action(cell);\n\t\t\t\t\t\tcell.delays.splice(i, 1);\n\t\t\t\t\t\ti--;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t};\n\n\t//var NEIGHBORLOCS = [{x:-1, y:-1}, {x:0, y:-1}, {x:1, y:-1}, {x:-1, y:0}, {x:1, y:0},{x:-1, y:1}, {x:0, y:1}, {x:1, y:1}];\n\t// square tiles by default\n\tvar NEIGHBORLOCS = [\n\t\t{ diffX : function() { return -1; }, diffY: function() { return -1; }},  // top left\n\t\t{ diffX : function() { return 0; }, diffY: function() { return -1; }},  // top\n\t\t{ diffX : function() { return 1; }, diffY: function() { return -1; }},  // top right\n\t\t{ diffX : function() { return -1; }, diffY: function() { return 0; }},  // left\n\t\t{ diffX : function() { return 1; }, diffY: function() { return 0; }},  // right\n\t\t{ diffX : function() { return -1; }, diffY: function() { return 1; }},  // bottom left\n\t\t{ diffX : function() { return 0; }, diffY: function() { return 1; }},  // bottom\n\t\t{ diffX : function() { return 1; }, diffY: function() { return 1; }}  // bottom right\n\t];\n\tif (this.options.hexTiles) {\n\t\tif (this.options.flatTopped) {\n\t\t\t// flat topped hex map,  function requires column to be passed\n\t\t\tNEIGHBORLOCS = [\n\t\t\t\t{ diffX : function() { return -1; }, diffY: function(x) { return x%2 ? -1 : 0; }},  // top left\n\t\t\t\t{ diffX : function() { return 0; }, diffY: function() { return -1; }},  // top\n\t\t\t\t{ diffX : function() { return 1; }, diffY: function(x) { return x%2 ? -1 : 0; }},  // top right\n\t\t\t\t{ diffX : function() { return 1; }, diffY: function(x) { return x%2 ? 0 : 1; }},  // bottom right\n\t\t\t\t{ diffX : function() { return 0; }, diffY: function() { return 1; }},  // bottom\n\t\t\t\t{ diffX : function() { return -1; }, diffY: function(x) { return x%2 ? 0 : 1; }}  // bottom left\n\t\t\t];\n\t\t}\n\t\telse {\n\t\t\t// pointy topped hex map, function requires row to be passed\n\t\t\tNEIGHBORLOCS = [\n\t\t\t\t{ diffX : function(x, y) { return y%2 ? 0 : -1; }, diffY: function() { return -1; }},  // top left\n\t\t\t\t{ diffX : function(x, y) { return y%2 ? 1 : 0; }, diffY: function() { return -1; }},  // top right\n\t\t\t\t{ diffX : function() { return -1; }, diffY: function() { return 0; }},  // left\n\t\t\t\t{ diffX : function() { return 1; }, diffY: function() { return 0; }},  // right\n\t\t\t\t{ diffX : function(x, y) { return y%2 ? 0 : -1; }, diffY: function() { return 1; }},  // bottom left\n\t\t\t\t{ diffX : function(x, y) { return y%2 ? 1 : 0; }, diffY: function() { return 1; }}  // bottom right\n\t\t\t];\n\t\t}\n\n\t}\n\tthis.fillNeighbors = function(neighbors, x, y) {\n\t\tfor (var i=0; i<NEIGHBORLOCS.length; i++) {\n\t\t\tvar neighborX = x + NEIGHBORLOCS[i].diffX(x, y);\n\t\t\tvar neighborY = y + NEIGHBORLOCS[i].diffY(x, y);\n\t\t\tif (this.wrap) {\n\t\t\t\t// TODO: hex map support for wrapping\n\t\t\t\tneighborX = (neighborX + this.width) % this.width;\n\t\t\t\tneighborY = (neighborY + this.height) % this.height;\n\t\t\t}\n\t\t\tif (!this.wrap && (neighborX < 0 || neighborY < 0 || neighborX >= this.width || neighborY >= this.height)) {\n\t\t\t\tneighbors[i] = null;\n\t\t\t}\n\t\t\telse {\n\t\t\t\tneighbors[i] = this.grid[neighborY][neighborX];\n\t\t\t}\n\t\t}\n\t};\n\n\tthis.initialize = function(arrayTypeDist) {\n\n\t\t// sort the cell types by distribution\n\t\tarrayTypeDist.sort(function(a, b) {\n\t\t\treturn a.distribution > b.distribution ? 1 : -1;\n\t\t});\n\n\t\tvar totalDist = 0;\n\t\t// add all distributions together\n\t\tfor (var i=0; i<arrayTypeDist.length; i++) {\n\t\t\ttotalDist += arrayTypeDist[i].distribution;\n\t\t\tarrayTypeDist[i].distribution = totalDist;\n\t\t}\n\n\t\tthis.grid = [];\n\t\tfor (var y=0; y<this.height; y++) {\n\t\t\tthis.grid[y] = [];\n\t\t\tfor (var x=0; x<this.width; x++) {\n\t\t\t\tvar random = this.randomGenerator() * 100;\n\n\t\t\t\tfor (i=0; i<arrayTypeDist.length; i++) {\n\t\t\t\t\tif (random <= arrayTypeDist[i].distribution) {\n\t\t\t\t\t\tthis.grid[y][x] = new this.cellTypes[arrayTypeDist[i].name](x, y);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t};\n\n\tthis.cellTypes = {};\n\tthis.registerCellType = function(name, cellOptions, init) {\n\t\tthis.cellTypes[name] = function(x, y) {\n\t\t\tCellAutoCell.call(this, x, y);\n\n\t\t\tif (init) {\n\t\t\t\tinit.call(this, x, y);\n\t\t\t}\n\n\t\t\tif (cellOptions) {\n\t\t\t\tfor (var key in cellOptions) {\n\t\t\t\t\tif (typeof cellOptions[key] !== 'function') {\n\t\t\t\t\t\t// properties get instance\n\t\t\t\t\t\tif (typeof cellOptions[key] === 'object') {\n\t\t\t\t\t\t\t// objects must be cloned\n\t\t\t\t\t\t\tthis[key] = JSON.parse(JSON.stringify(cellOptions[key]));\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse {\n\t\t\t\t\t\t\t// primitive\n\t\t\t\t\t\t\tthis[key] = cellOptions[key];\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t\tthis.cellTypes[name].prototype = Object.create(CellAutoCell.prototype);\n\t\tthis.cellTypes[name].prototype.constructor = this.cellTypes[name];\n\t\tthis.cellTypes[name].prototype.cellType = name;\n\n\t\tif (cellOptions) {\n\t\t\tfor (var key in cellOptions) {\n\t\t\t\tif (typeof cellOptions[key] === 'function') {\n\t\t\t\t\t// functions get prototype\n\t\t\t\t\tthis.cellTypes[name].prototype[key] = cellOptions[key];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t};\n\n\t// apply options\n\tif (options) {\n\t\tfor (var key in options) {\n\t\t\tthis[key] = options[key];\n\t\t}\n\t}\n\n}\n\nCAWorld.prototype.initializeFromGrid  = function(values, initGrid) {\n\n\tthis.grid = [];\n\tfor (var y=0; y<this.height; y++) {\n\t\tthis.grid[y] = [];\n\t\tfor (var x=0; x<this.width; x++) {\n\t\t\tfor (var i=0; i<values.length; i++) {\n\t\t\t\tif (values[i].gridValue === initGrid[y][x]) {\n\t\t\t\t\tthis.grid[y][x] = new this.cellTypes[values[i].name](x, y);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n};\n\nCAWorld.prototype.createGridFromValues = function(values, defaultValue) {\n\tvar newGrid = [];\n\n\tfor (var y=0; y<this.height; y++) {\n\t\tnewGrid[y] = [];\n\t\tfor (var x = 0; x < this.width; x++) {\n\t\t\tnewGrid[y][x] = defaultValue;\n\t\t\tvar cell = this.grid[y][x];\n\t\t\tfor (var i=0; i<values.length; i++) {\n\t\t\t\tif (cell.cellType == values[i].cellType && cell[values[i].hasProperty]) {\n\t\t\t\t\tnewGrid[y][x] = values[i].value;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\treturn newGrid;\n};\n\n;(function() {\n  var CellAuto = {\n    World: CAWorld,\n    Cell: CellAutoCell\n  };\n\n  if (typeof define === 'function' && define.amd) {\n    define('CellAuto', function () {\n      return CellAuto;\n    });\n  } else if (typeof module !== 'undefined' && module.exports) {\n    module.exports = CellAuto;\n  } else {\n    window.CellAuto = CellAuto;\n  }\n})();","import * as CellAuto from \"./vendor/cellauto.js\";\n\nexport var Worlds = {\n\n    /**\n     * Conway's Game of Life.\n     * \n     * From https://sanojian.github.io/cellauto\n     */\n    Life: function(width = 96, height = 96) {\n        var world = new CellAuto.World({\n            width: width,\n            height: height\n        });\n\n        world.palette = [\n            [68, 36, 52, 255],\n            [255, 255, 255, 255]\n        ];\n\n        world.registerCellType('living', {\n            getColor: function () {\n                return this.alive ? 0 : 1;\n            },\n            process: function (neighbors) {\n                var surrounding = this.countSurroundingCellsWithValue(neighbors, 'wasAlive');\n                this.alive = surrounding === 3 || surrounding === 2 && this.alive;\n            },\n            reset: function () {\n                this.wasAlive = this.alive;\n            }\n        }, function () {\n            // Init\n            this.alive = Math.random() > 0.5;\n        });\n\n        world.initialize([\n            { name: 'living', distribution: 100 }\n        ]);\n\n        return world;\n    },\n\n    /**\n     * CA that looks like lava.\n     * \n     * From https://sanojian.github.io/cellauto\n     */\n    Lava: function (width = 128, height = 128) {\n        // thanks to TheLastBanana on TIGSource\n\n        var world = new CellAuto.World({\n            width: width,\n            height: height,\n            wrap: true\n        });\n\n        world.palette = [\n            [34,10,21,255], [68,17,26,255], [123,16,16,255],\n            [190,45,16,255], [244,102,20,255], [254,212,97,255]\n        ];\n\n        var colors = [];\n        var index = 0;\n        for (; index < 18; ++index) { colors[index] = 1; }\n        for (; index < 22; ++index) { colors[index] = 0; }\n        for (; index < 25; ++index) { colors[index] = 1; }\n        for (; index < 27; ++index) { colors[index] = 2; }\n        for (; index < 29; ++index) { colors[index] = 3; }\n        for (; index < 32; ++index) { colors[index] = 2; }\n        for (; index < 35; ++index) { colors[index] = 0; }\n        for (; index < 36; ++index) { colors[index] = 2; }\n        for (; index < 38; ++index) { colors[index] = 4; }\n        for (; index < 42; ++index) { colors[index] = 5; }\n        for (; index < 44; ++index) { colors[index] = 4; }\n        for (; index < 46; ++index) { colors[index] = 2; }\n        for (; index < 56; ++index) { colors[index] = 1; }\n        for (; index < 64; ++index) { colors[index] = 0; }\n\n        world.registerCellType('lava', {\n            getColor: function () {\n                var v = this.value + 0.5\n                    + Math.sin(this.x / world.width * Math.PI) * 0.04\n                    + Math.sin(this.y / world.height * Math.PI) * 0.04\n                    - 0.05;\n                v = Math.min(1.0, Math.max(0.0, v));\n\n                return colors[Math.floor(colors.length * v)];\n            },\n            process: function (neighbors) {\n                if(this.droplet === true) {\n                    for (var i = 0; i < neighbors.length; i++) {\n                        if (neighbors[i] !== null && neighbors[i].value) {\n                            neighbors[i].value = 0.5 *this.value;\n                            neighbors[i].prev = 0.5 *this.prev;\n                        }\n                    }\n                    this.droplet = false;\n                    return true;\n                }\n                var avg = this.getSurroundingCellsAverageValue(neighbors, 'value');\n                this.next = 0.998 * (2 * avg - this.prev);\n\n                return true;\n            },\n            reset: function () {\n                if(Math.random() > 0.99993) {\n                    this.value = -0.25 + 0.3*Math.random();\n                    this.prev = this.value;\n                    this.droplet = true;\n                }\n                else {\n                    this.prev = this.value;\n                    this.value = this.next;\n                }\n                this.value = Math.min(0.5, Math.max(-0.5, this.value));\n                return true;\n            }\n        }, function () {\n            //init\n            this.value = 0.0;\n            this.prev = this.value;\n            this.next = this.value;\n        });\n\n        world.initialize([\n            { name: 'lava', distribution: 100 }\n        ]);\n\n        return world;\n\n    },\n\n    /**\n     * Generates a maze-like structure.\n     * \n     * From https://sanojian.github.io/cellauto\n     */\n    Maze: function(width = 128, height = 128) {\n        // thanks to SuperDisk on TIGSource forums!\n\n        var world = new CellAuto.World({\n            width: width,\n            height: height\n        });\n\n        world.palette = [\n            [68, 36, 52, 255],\n            [255, 255, 255, 255]\n        ];\n\n        world.registerCellType('living', {\n            getColor: function () {\n                return this.alive ? 0 : 1;\n            },\n            process: function (neighbors) {\n                var surrounding = this.countSurroundingCellsWithValue(neighbors, 'wasAlive');\n\n                if (this.simulated < 20) {\n                    this.alive = surrounding === 1 || surrounding === 2 && this.alive;\n                }\n                if (this.simulated > 20 && surrounding == 2) {\n                    this.alive = true;\n                }\n                this.simulated += 1;\n            },\n            reset: function () {\n                this.wasAlive = this.alive;\n            }\n        }, function () {\n            //init\n            this.alive = Math.random() > 0.5;\n            this.simulated = 0;\n        });\n\n        world.initialize([\n            { name: 'living', distribution: 100 }\n        ]);\n\n        return world;\n    },\n\n    /**\n     * Cyclic rainbow automata.\n     * \n     * From https://sanojian.github.io/cellauto\n     */\n    CyclicRainbows: function(width = 128, height = 128) {\n        var world = new CellAuto.World({\n            width: width,\n            height: height\n        });\n\n        world.recommendedFrameFrequency = 1;\n\n        world.palette = [\n            [255,0,0,1 * 255], [255,96,0,1 * 255], [255,191,0,1 * 255], [223,255,0,1 * 255],\n            [128,255,0,1 * 255], [32,255,0,1 * 255], [0,255,64,1 * 255], [0,255,159,1 * 255],\n            [0,255,255,1 * 255], [0,159,255,1 * 255], [0,64,255,1 * 255], [32,0,255,1 * 255],\n            [127,0,255,1 * 255], [223,0,255,1 * 255], [255,0,191,1 * 255], [255,0,96,1 * 255]\n        ];\n\n        world.registerCellType('cyclic', {\n            getColor: function () {\n                return this.state;\n            },\n            process: function (neighbors) {\n                var next = (this.state + Math.floor(Math.random()*2)) % 16;\n\n                var changing = false;\n                for (var i = 0; i < neighbors.length; i++) {\n                    if (neighbors[i] !== null) {\n                        changing = changing || neighbors[i].state === next;\n                    }\n                }\n                if (changing) this.state = next;\n                return true;\n            }\n        }, function () {\n            //init\n            this.state = Math.floor(Math.random() * 16);\n        });\n\n        world.initialize([\n            { name: 'cyclic', distribution: 100 }\n        ]);\n\n        return world;\n    },\n\n    /**\n     * Simulates caves and water movement.\n     * \n     * From https://sanojian.github.io/cellauto\n     */\n    CavesWithWater: function(width = 128, height = 128) {\n        // FIRST CREATE CAVES\n        var world = new CellAuto.World({\n            width: width,\n            height: height\n        });\n\n        world.registerCellType('wall', {\n            process: function (neighbors) {\n                var surrounding = this.countSurroundingCellsWithValue(neighbors, 'wasOpen');\n                this.open = (this.wasOpen && surrounding >= 4) || surrounding >= 6;\n            },\n            reset: function () {\n                this.wasOpen = this.open;\n            }\n        }, function () {\n            //init\n            this.open = Math.random() > 0.40;\n        });\n\n        world.initialize([\n            { name: 'wall', distribution: 100 }\n        ]);\n\n        // generate our cave, 10 steps aught to do it\n        for (var i=0; i<10; i++) {\n            world.step();\n        }\n\n        var grid = world.createGridFromValues([\n            { cellType: 'wall', hasProperty: 'open', value: 0 }\n        ], 1);\n\n        // NOW USE OUR CAVES TO CREATE A NEW WORLD CONTAINING WATER\n        world = new CellAuto.World({\n            width: width,\n            height: height,\n            clearRect: true\n        });\n\n        world.palette = [\n            [89, 125, 206, 0 * 255],\n            [89, 125, 206, 1/9 * 255],\n            [89, 125, 206, 2/9 * 255],\n            [89, 125, 206, 3/9 * 255],\n            [89, 125, 206, 4/9 * 255],\n            [89, 125, 206, 5/9 * 255],\n            [89, 125, 206, 6/9 * 255],\n            [89, 125, 206, 7/9 * 255],\n            [89, 125, 206, 8/9 * 255],\n            [89, 125, 206, 1 * 255],\n            [109, 170, 44, 1 * 255],\n            [68, 36, 52, 1 * 255]\n        ];\n\n        world.registerCellType('water', {\n            getColor: function() {\n                //return 0x597DCE44;\n                return this.water;\n            },\n            process: function(neighbors) {\n                if (this.water === 0) {\n                    // already empty\n                    return;\n                }\n                // push my water out to my available neighbors\n\n                // cell below me will take all it can\n                if (neighbors[world.BOTTOM.index] !== null && this.water && neighbors[world.BOTTOM.index].water < 9) {\n                    var amt = Math.min(this.water, 9 - neighbors[world.BOTTOM.index].water);\n                    this.water-= amt;\n                    neighbors[world.BOTTOM.index].water += amt;\n                    return;\n                }\n\n                // bottom two corners take half of what I have\n                for (var i=5; i<=7; i++) {\n                    if (i!=world.BOTTOM.index && neighbors[i] !== null && this.water && neighbors[i].water < 9) {\n                        var amt = Math.min(this.water, Math.ceil((9 - neighbors[i].water)/2));\n                        this.water-= amt;\n                        neighbors[i].water += amt;\n                        return;\n                    }\n                }\n                // sides take a third of what I have\n                for (i=3; i<=4; i++) {\n                    if (neighbors[i] !== null && neighbors[i].water < this.water) {\n                        var amt = Math.min(this.water, Math.ceil((9 - neighbors[i].water)/3));\n                        this.water-= amt;\n                        neighbors[i].water += amt;\n                        return;\n                    }\n                }\n            }\n        }, function() {\n            //init\n            this.water = Math.floor(Math.random() * 9);\n        });\n\n        world.registerCellType('rock', {\n            isSolid: true,\n            getColor: function() {\n                return this.lighted ? 10 : 11;\n            },\n            process: function(neighbors) {\n                this.lighted = neighbors[world.TOP.index] && !(neighbors[world.TOP.index].water === 9) && !neighbors[world.TOP.index].isSolid\n                    && neighbors[world.BOTTOM.index] && neighbors[world.BOTTOM.index].isSolid;\n            }\n        });\n\n        // pass in our generated cave data\n        world.initializeFromGrid([\n            { name: 'rock', gridValue: 1 },\n            { name: 'water', gridValue: 0 }\n        ], grid);\n\n        return world;\n    },\n\n    Rain: function(width = 128, height = 128) {\n        // FIRST CREATE CAVES\n        var world = new CellAuto.World({\n            width: width,\n            height: height\n        });\n\n        world.registerCellType('wall', {\n            process: function (neighbors) {\n                var surrounding = this.countSurroundingCellsWithValue(neighbors, 'wasOpen');\n                this.open = (this.wasOpen && surrounding >= 4) || surrounding >= 6;\n            },\n            reset: function () {\n                this.wasOpen = this.open;\n            }\n        }, function () {\n            //init\n            this.open = Math.random() > 0.40;\n        });\n\n        world.initialize([\n            { name: 'wall', distribution: 100 }\n        ]);\n\n        // generate our cave, 10 steps aught to do it\n        for (var i=0; i<10; i++) {\n            world.step();\n        }\n\n        var grid = world.createGridFromValues([\n            { cellType: 'wall', hasProperty: 'open', value: 0 }\n        ], 1);\n\n        // cut the top half of the caves off\n        for (var y=0; y<Math.floor(world.height/2); y++) {\n            for (var x=0; x<world.width; x++) {\n                grid[y][x] = 0;\n            }\n        }\n\n        // NOW USE OUR CAVES TO CREATE A NEW WORLD CONTAINING WATER\n        world = new CellAuto.World({\n            width: width,\n            height: height,\n            clearRect: true\n        });\n\n        world.palette = [\n            [89, 125, 206, 1],\n            [89, 125, 206, 1/9 * 255],\n            [89, 125, 206, 2/9 * 255],\n            [89, 125, 206, 3/9 * 255],\n            [89, 125, 206, 4/9 * 255],\n            [89, 125, 206, 5/9 * 255],\n            [89, 125, 206, 6/9 * 255],\n            [89, 125, 206, 7/9 * 255],\n            [89, 125, 206, 8/9 * 255],\n            [89, 125, 206, 255],\n            [109, 170, 44, 255],\n            [68, 36, 52, 255]\n        ];\n\n        world.registerCellType('air', {\n            getColor: function() {\n                //return '89, 125, 206, ' + (this.water ? Math.max(0.3, this.water/9) : 0);\n                return this.water;\n            },\n            process: function(neighbors) {\n                // rain on the top row\n                if (neighbors[world.TOP.index] === null && Math.random() < 0.02) {\n                    this.water = 5;\n                }\n                else if (this.water === 0) {\n                    // already empty\n                    return;\n                }\n\n                // push my water out to my available neighbors\n\n                // cell below me will take all it can\n                if (neighbors[world.BOTTOM.index] !== null && this.water && neighbors[world.BOTTOM.index].water < 9) {\n                    var amt = Math.min(this.water, 9 - neighbors[world.BOTTOM.index].water);\n                    this.water-= amt;\n                    neighbors[world.BOTTOM.index].water += amt;\n                    return;\n                }\n\n                // bottom two corners take half of what I have\n                for (var i=5; i<=7; i++) {\n                    if (i!=world.BOTTOM.index && neighbors[i] !== null && this.water && neighbors[i].water < 9) {\n                        var amt = Math.min(this.water, Math.ceil((9 - neighbors[i].water)/2));\n                        this.water-= amt;\n                        neighbors[i].water += amt;\n                        return;\n                    }\n                }\n                // sides take a third of what I have\n                for (i=3; i<=4; i++) {\n                    if (neighbors[i] !== null && neighbors[i].water < this.water) {\n                        var amt = Math.min(this.water, Math.ceil((9 - neighbors[i].water)/3));\n                        this.water-= amt;\n                        neighbors[i].water += amt;\n                        return;\n                    }\n                }\n            }\n        }, function() {\n            //init\n            this.water = 0;\n        });\n\n        world.registerCellType('rock', {\n            isSolid: true,\n            getColor: function() {\n                return this.lighted ? 10 : 11;\n            },\n            process: function(neighbors) {\n                this.lighted = neighbors[world.TOP.index] && !(neighbors[world.TOP.index].water === 9) && !neighbors[world.TOP.index].isSolid\n                    && neighbors[world.BOTTOM.index] && neighbors[world.BOTTOM.index].isSolid;\n            }\n        });\n\n        // pass in our generated cave data\n        world.initializeFromGrid([\n            { name: 'rock', gridValue: 1 },\n            { name: 'air', gridValue: 0 }\n        ], grid);\n\n        return world;\n    },\n\n    /**\n     * Simulates splashing water.\n     * \n     * From https://sanojian.github.io/cellauto\n     */\n    Splashes: function(width = 128, height = 128) {\n        var world = new CellAuto.World({\n            width: width,\n            height: height\n        });\n\n        world.palette = [];\n        var colors = [];\n        for (var index=0; index<64; index++) {\n            world.palette.push([89, 125, 206, (index/64) * 255]);\n            colors[index] = 63 - index;\n        }\n\n        world.registerCellType('water', {\n            getColor: function () {\n                var v = (Math.max(2 * this.value + 0.02, 0) - 0.02) + 0.5;\n                return colors[Math.floor(colors.length * v)];\n            },\n            process: function (neighbors) {\n                if(this.droplet == true) {\n                    for (var i = 0; i < neighbors.length; i++) {\n                        if (neighbors[i] !== null && neighbors[i].value) {\n                            neighbors[i].value = 0.5 *this.value;\n                            neighbors[i].prev = 0.5 *this.prev;\n                        }\n                    }\n                    this.droplet = false;\n                    return true;\n                }\n                var avg = this.getSurroundingCellsAverageValue(neighbors, 'value');\n                this.next = 0.99 * (2 * avg - this.prev);\n                return true;\n            },\n            reset: function () {\n                if(Math.random() > 0.9999) {\n                    this.value = -0.2 + 0.25*Math.random();\n                    this.prev = this.value;\n                    this.droplet = true;\n                }\n                else {\n                    this.prev = this.value;\n                    this.value = this.next;\n                }\n                return true;\n            }\n        }, function () {\n            //init\n            this.water = true;\n            this.value = 0.0;\n            this.prev = this.value;\n            this.next = this.value;\n        });\n\n        world.initialize([\n            { name: 'water', distribution: 100 }\n        ]);\n\n        return world;\n    },\n\n    /**\n     * Rule 52928 - the CA used for Wolfram Alpha's loading animations\n     * \n     * Resources:\n     * https://www.quora.com/What-is-Wolfram-Alphas-loading-screen-a-depiction-of\n     * http://jsfiddle.net/hungrycamel/9UrzJ/\n     */\n    Wolfram: function(width = 96, height = 96) {\n        var world = new CellAuto.World({\n            width: width,\n            height: height,\n            wrap: true\n        });\n\n        world.recommendedFrameFrequency = 2;\n\n        world.palette = [\n            [255, 255, 255, 255], // Background color\n            [255, 110, 0  , 255], // dark orange\n            [255, 130, 0  , 255], //      |\n            [255, 150, 0  , 255], //      |\n            [255, 170, 0  , 255], //      V\n            [255, 180, 0  , 255]  // light orange\n        ];\n\n        var choice = Math.random();\n\n        var seedList = [\n            [\n                [0, 0, 0, 1, 0, 0, 0, 0, 0, 0], \n                [0, 2, 1, 1, 1, 1, 0, 0, 0, 0], \n                [1, 1, 3, 4, 2, 1, 1, 0, 0, 0], \n                [0, 1, 1, 1, 4, 1, 1, 0, 0, 0], \n                [0, 1, 2, 0, 1, 1, 1, 1, 0, 0], \n                [0, 1, 1, 1, 0, 0, 2, 2, 0, 0], \n                [0, 0, 2, 2, 0, 0, 1, 1, 1, 0], \n                [0, 0, 1, 1, 1, 1, 0, 2, 1, 0], \n                [0, 0, 0, 1, 1, 4, 1, 1, 1, 0], \n                [0, 0, 0, 1, 1, 2, 4, 3, 1, 1], \n                [0, 0, 0, 0, 1, 1, 1, 1, 2, 0], \n                [0, 0, 0, 0, 0, 0, 1, 0, 0, 0]\n            ], \n            [[0, 0, 0, 0, 0, 0, 1, 0], [1, 1, 1, 1, 0, 0, 1, 0], [0, 1, 0, 0, 1, 1, 1, 1], [0, 1, 0, 0, 0, 0, 0, 0]], \n            [[0, 0, 0, 0, 0, 0, 1, 1], [0, 0, 1, 1, 1, 0, 1, 1], [1, 1, 0, 1, 1, 1, 0, 0], [1, 1, 0, 0, 0, 0, 0, 0]], \n            [[0, 0, 0, 0, 0, 0, 1, 1], [0, 1, 1, 1, 1, 1, 0, 0], [0, 0, 1, 1, 1, 1, 1, 0], [1, 1, 0, 0, 0, 0, 0, 0]], \n            [[0, 0, 0, 0, 0, 0, 1, 1], [1, 0, 0, 0, 1, 1, 1, 0], [0, 1, 1, 1, 0, 0, 0, 1], [1, 1, 0, 0, 0, 0, 0, 0]], \n            [[0, 0, 0, 0, 0, 0, 1, 1], [1, 0, 0, 1, 1, 0, 1, 1], [1, 1, 0, 1, 1, 0, 0, 1], [1, 1, 0, 0, 0, 0, 0, 0]], \n            [[0, 0, 0, 0, 1, 1, 1, 0], [1, 1, 1, 0, 1, 1, 1, 1], [1, 1, 1, 1, 0, 1, 1, 1], [0, 1, 1, 1, 0, 0, 0, 0]], \n            [[0, 0, 1, 1, 1, 1, 1, 1], [1, 0, 1, 1, 0, 1, 1, 1], [1, 1, 1, 0, 1, 1, 0, 1], [1, 1, 1, 1, 1, 1, 0, 0]], \n            [[0, 1, 0, 0, 0, 1, 1, 1], [1, 0, 1, 1, 0, 1, 1, 1], [1, 1, 1, 0, 1, 1, 0, 1], [1, 1, 1, 0, 0, 0, 1, 0]], \n            [[0, 1, 1, 0, 1, 1, 1, 1], [0, 1, 0, 1, 0, 0, 1, 0], [0, 1, 0, 0, 1, 0, 1, 0], [1, 1, 1, 1, 0, 1, 1, 0]], \n            [[1, 1, 1, 0, 1, 1, 1, 0], [0, 1, 0, 0, 1, 1, 1, 0], [0, 1, 1, 1, 0, 0, 1, 0], [0, 1, 1, 1, 0, 1, 1, 1]], \n            [[1, 1, 1, 0, 1, 1, 1, 1], [1, 1, 0, 1, 1, 1, 1, 0], [0, 1, 1, 1, 1, 0, 1, 1], [1, 1, 1, 1, 0, 1, 1, 1]], \n            [[1, 1, 1, 1, 0, 0, 0, 1], [1, 1, 0, 1, 1, 0, 0, 1], [1, 0, 0, 1, 1, 0, 1, 1], [1, 0, 0, 0, 1, 1, 1, 1]], \n            [[1, 1, 1, 1, 0, 0, 1, 0], [0, 0, 1, 0, 1, 1, 0, 1], [1, 0, 1, 1, 0, 1, 0, 0], [0, 1, 0, 0, 1, 1, 1, 1]], \n            [[1, 1, 1, 1, 0, 0, 1, 0], [1, 0, 0, 1, 1, 0, 1, 1], [1, 1, 0, 1, 1, 0, 0, 1], [0, 1, 0, 0, 1, 1, 1, 1]], \n            [[1, 1, 1, 1, 0, 0, 1, 0], [1, 1, 1, 0, 1, 0, 0, 1], [1, 0, 0, 1, 0, 1, 1, 1], [0, 1, 0, 0, 1, 1, 1, 1]], \n            [[1, 1, 1, 1, 0, 0, 1, 0], [1, 1, 1, 0, 1, 1, 0, 1], [1, 0, 1, 1, 0, 1, 1, 1], [0, 1, 0, 0, 1, 1, 1, 1]], \n            [[1, 1, 1, 1, 0, 0, 1, 0], [1, 1, 1, 1, 0, 0, 1, 1], [1, 1, 0, 0, 1, 1, 1, 1], [0, 1, 0, 0, 1, 1, 1, 1]], \n            [[1, 1, 1, 1, 0, 1, 0, 1], [1, 1, 1, 0, 0, 1, 0, 0], [0, 0, 1, 0, 0, 1, 1, 1], [1, 0, 1, 0, 1, 1, 1, 1]], \n            [[1, 1, 1, 1, 0, 1, 1, 0], [0, 0, 0, 0, 0, 1, 1, 0], [0, 1, 1, 0, 0, 0, 0, 0], [0, 1, 1, 0, 1, 1, 1, 1]], \n            [[1, 1, 1, 1, 0, 1, 1, 0], [0, 1, 0, 0, 1, 0, 1, 0], [0, 1, 0, 1, 0, 0, 1, 0], [0, 1, 1, 0, 1, 1, 1, 1]], \n            [[1, 1, 1, 1, 0, 1, 1, 0], [1, 1, 1, 0, 0, 1, 1, 0], [0, 1, 1, 0, 0, 1, 1, 1], [0, 1, 1, 0, 1, 1, 1, 1]], \n            [[1, 1, 1, 1, 1, 0, 0, 0], [0, 0, 1, 1, 1, 1, 0, 0], [0, 0, 1, 1, 1, 1, 0, 0], [0, 0, 0, 1, 1, 1, 1, 1]], \n            [[1, 1, 1, 1, 1, 0, 0, 0], [1, 1, 0, 1, 1, 1, 1, 0], [0, 1, 1, 1, 1, 0, 1, 1], [0, 0, 0, 1, 1, 1, 1, 1]], \n            [[1, 1, 1, 1, 1, 0, 1, 1], [0, 0, 1, 1, 1, 0, 0, 0], [0, 0, 0, 1, 1, 1, 0, 0], [1, 1, 0, 1, 1, 1, 1, 1]], \n            [[1, 1, 1, 1, 1, 0, 1, 1], [0, 1, 1, 1, 1, 1, 0, 1], [1, 0, 1, 1, 1, 1, 1, 0], [1, 1, 0, 1, 1, 1, 1, 1]], \n            [[1, 1, 1, 1, 1, 0, 1, 1], [1, 1, 0, 1, 0, 1, 1, 0], [0, 1, 1, 0, 1, 0, 1, 1], [1, 1, 0, 1, 1, 1, 1, 1]], \n            [[1, 1, 1, 1, 1, 0, 1, 1], [1, 1, 1, 1, 0, 0, 1, 1], [1, 1, 0, 0, 1, 1, 1, 1], [1, 1, 0, 1, 1, 1, 1, 1]], \n            [[1, 1, 1, 1, 1, 1, 0, 0], [0, 0, 1, 0, 0, 1, 1, 1], [1, 1, 1, 0, 0, 1, 0, 0], [0, 0, 1, 1, 1, 1, 1, 1]], \n            [[1, 1, 1, 1, 1, 1, 0, 0], [0, 1, 1, 1, 1, 1, 1, 0], [0, 1, 1, 1, 1, 1, 1, 0], [0, 0, 1, 1, 1, 1, 1, 1]], \n            [[1, 1, 1, 1, 1, 1, 1, 0], [0, 0, 1, 0, 1, 0, 1, 1], [1, 1, 0, 1, 0, 1, 0, 0], [0, 1, 1, 1, 1, 1, 1, 1]]\n        ];\n\n        world.registerCellType('living', {\n            getColor: function () {\n                return this.state;\n            },\n            process: function (neighbors) {\n\n                var neighborOnes = neighbors.filter(function(item){\n                    return item.state == 1;\n                }).length;\n\n                if(this.state == 0) {\n                    if(neighborOnes == 3 || neighborOnes == 5 || neighborOnes == 7) \n                        this.newState = 1;\n                } else if (this.state == 1) {\n                    if(neighborOnes == 0 || neighborOnes == 1 || neighborOnes == 2 || neighborOnes == 6 || neighborOnes == 8)\n                        this.newState = 2;\n                } else if (this.state == 2) {\n                    this.newState = 3;\n                } else if (this.state == 3) {\n                    this.newState = 4;\n                } else if (this.state == 4) {\n                    this.newState = 0;\n                }\n            },\n            reset: function () {\n\n            }\n        }, function (x, y) {\n            // Init \n\n            // 50% chance to use a seed\n            if(choice < 0.5){\n                var seed;\n                // 25% chance to use a random seed\n                if(choice < 0.25) {\n                    seed = seedList[Math.floor(Math.random() * seedList.length)];\n                }\n                // 25% chance to use the Wolfram seed\n                else {\n                    seed = seedList[0];\n                }\n\n                var minX = Math.floor(width / 2) - Math.floor(seed[0].length / 2);\n                var maxX = Math.floor(width / 2) + Math.floor(seed[0].length / 2);\n                var minY = Math.floor(height / 2) - Math.floor(seed.length / 2);\n                var maxY = Math.floor(height / 2) + Math.floor(seed.length / 2);\n\n                this.state = 0;\n\n                // If the cell is inside of the seed array (centered in the world), then use its value\n                if (x >= minX && x < maxX && y >= minY && y < maxY) {\n                    this.state = seed[y - minY][x - minX];\n                }\n            } \n            // 50% chance to initialize with noise\n            else {\n                this.state = Math.random() < 0.15 ? 1 : 0;\n            }\n            this.newState = this.state;\n        });\n\n        world.initialize([\n           { name: 'living', distribution: 100 },\n        ]);\n\n        return world;\n    },\n\n    /**\n     * Simulates a Belousov-Zhabotinsky reaction (approximately).\n     * This one's still a little messed up, so consider it experimental.\n     * \n     * Resources:\n     * http://ccl.northwestern.edu/netlogo/models/B-ZReaction\n     * http://www.fractaldesign.net/automataalgorithm.aspx\n     */\n    BelousovZhabotinsky: function(width = 128, height = 128) {\n        var world = new CellAuto.World({\n            width: width,\n            height: height,\n            wrap: true\n        });\n\n        // Override frame frequency for this setup\n        world.recommendedFrameFrequency = 10;\n\n        // Config variables\n        var kernel = [ // weights for neighbors. First index is for self weight\n         0, 1, 1, 1,\n            1,    1,\n            1, 1, 1\n        ].reverse();\n        var k1 = 5; // Lower gives higher tendency for a cell to be sickened by ill neighbors\n        var k2 = 1; // Lower gives higher tendency for a cell to be sickened by infected neighbors\n        var g = 5;\n        var numStates = 255;\n\n        world.palette = [];\n        for (var i = 0; i < numStates; i++) {\n            var gray = Math.floor((255 / numStates) * i);\n            world.palette.push([gray, gray, gray, 255]);\n        }\n\n        world.registerCellType('bz', {\n            getColor: function () {\n                return this.state;\n            },\n            process: function (neighbors) {\n                var healthy = 0;\n                var infected = 0;\n                var ill = 0;\n                var sumStates = this.state;\n    \n                for(var i = 0; i < neighbors.length + 1; i++) {\n                    var neighbor;\n                    if (i == 8) neighbor = this;\n                    else neighbor = neighbors[i];\n                    \n                    //if(neighbor !== null && neighbor.state){\n                        sumStates += neighbor.state * kernel[i];\n                        if(kernel[i] > 0) {\n                            if(neighbor.state == 0) healthy += 1;\n                            else if(neighbor.state < (numStates - 1)) infected += 1;\n                            else ill += 1;\n                        }\n                    //}\n                }\n\n                if(this.state == 0) {\n                    this.newState = (infected / k1) + (ill / k2);\n                } else if (this.state < (numStates) - 1) {\n                    this.newState = (sumStates / infected + ill + 1) + g;\n                    //this.newState = (sumStates / 9) + g;\n                } else {\n                    this.newState = 0;\n                }\n\n                // Make sure to set state to newstate in a second pass\n                this.newState = Math.max(0, Math.min(numStates - 1, Math.floor(this.newState)));\n\n            },\n            reset: function () {\n\n            }\n        }, function () {\n            // Init\n            // Generate a random state\n            this.state = Math.random() < 1.0 ? Math.floor(Math.random() * numStates) : 0;\n            this.newState = this.state;\n        });\n\n        world.initialize([\n            { name: 'bz', distribution: 100 }\n        ]);\n\n        return world;\n    }\n\n}"]}