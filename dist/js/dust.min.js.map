{"version":3,"sources":["node_modules/browser-pack/_prelude.js","src/dust.js","src/gui.js","src/main.js","src/utils/webgl-detect.js","src/vendor/cellauto.js","src/worlds.js"],"names":["e","t","n","r","s","o","u","a","require","i","f","Error","code","l","exports","call","length","1","module","_cellauto","_worlds","FrameCounter","Dust","container","initFinishedCallback","_this","this","_classCallCheck","Object","keys","Worlds","worldOptions","name","app","PIXI","Application","antialias","transparent","resolution","appendChild","view","ticker","add","delta","OnUpdate","framecounter","stop","loader","load","res","loadedResources","Setup","start","world","width","height","err","frameFrequency","recommendedFrameFrequency","renderer","resize","style","cssText","border","backgroundColor","textureCanvas","document","createElement","textureCtx","getContext","baseTexture","BaseTexture","fromCanvas","sprite","Sprite","Texture","Rectangle","x","y","anchor","set","filter","Filter","fragShader","data","filters","stage","removeChildren","addChild","UpdateTexture","IncrementFrame","uniforms","time","step","render","index","ctx","fillStyle","fillRect","pix","createImageData","paletteIndex","grid","getColor","colorRGBA","palette","putImageData","update","frameLimit","arguments","undefined","frameCount","passedFrames","GUI","dust","dat","console","warn","gui","min","max","listen","getOwnPropertyNames","onChange","_webglDetect","_dust","_gui","getElementById","Detector","HasWebGL","Init","log","innerHTML","GetErrorHTML","classList","window","WebGLRenderingContext","canvas","names","context","getParameter","message","CellAutoCell","locX","locY","delays","CAWorld","options","wrap","TOPLEFT","TOP","TOPRIGHT","LEFT","RIGHT","BOTTOMLEFT","BOTTOM","BOTTOMRIGHT","randomGenerator","Math","random","neighborhood","hexTiles","reset","fillNeighbors","cell","process","steps","action","splice","NEIGHBORLOCS","diffX","diffY","flatTopped","neighbors","neighborX","neighborY","initialize","arrayTypeDist","sort","b","distribution","totalDist","cellTypes","registerCellType","cellOptions","init","key","_typeof","JSON","parse","stringify","prototype","create","constructor","cellType","countSurroundingCellsWithValue","value","surrounding","delay","numSteps","fn","push","getSurroundingCellsAverageValue","summed","initializeFromGrid","values","initGrid","gridValue","createGridFromValues","defaultValue","newGrid","hasProperty","CellAuto","World","Cell","define","amd","Elementary","processRule","leftAlive","centerAlive","rightAlive","rule","toString","alive","getWasAlive","neighbor","wasAlive","floor","LifeLike","distributionFunc","B","includes","S","RandomRule","rules","Life","Mazecetric","Diamoeba","Anneal","Lava","colors","v","sin","PI","droplet","prev","avg","next","CyclicRainbows","state","changing","CavesWithWater","open","wasOpen","clearRect","water","amt","ceil","isSolid","lighted","Rain","Splashes","Wolfram","choice","seedList","neighborOnes","item","newState","seed","minX","maxX","minY","maxY","BelousovZhabotinsky","kernel","reverse","gray","healthy","infected","ill","sumStates","numStates"],"mappings":"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AAG,EAAG,EAAG,EAAG,EAAG,IAAK,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAAK,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAAK,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,MACnG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAAK,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAAK,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAAK,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,MACnG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAAK,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAAK,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAAK,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,MACnG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAAK,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAAK,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAAK,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,MACnG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAAK,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAAK,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAAK,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,MACnG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAAK,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAAK,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAAK,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,MACnG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAAK,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAAK,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAAK,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,MACnG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAAK,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAAK,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAAK,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,MACnG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAAK,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAAK,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAAK,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,MACnG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAAK,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAAK,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAAK,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,MACnG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAAK,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAAK,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAAK,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,MACnG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAAK,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAAK,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAAK,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,MACnG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAAK,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAAK,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAAK,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,MACnG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAAK,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAAK,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAAK,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,MACnG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAAK,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAAK,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAAK,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,MACnG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAAK,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAAK,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAAK,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,MACnG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAAK,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAAK,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAAK,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,MACnG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAAK,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAAK,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAAK,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,MACnG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAAK,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAAK,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAAK,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,MACnG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAAK,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAAK,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAAK,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,MACnG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAAK,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAAK,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAAK,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,MACnG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAAK,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAAK,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAAK,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,MACnG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAAK,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG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","file":"dust.min.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","import * as CellAuto from \"./vendor/cellauto.js\";\nimport { Worlds } from \"./worlds.js\";\n\nexport class Dust {\n    constructor(container, initFinishedCallback) {\n        this.container = container;\n\n        var worldNames = Object.keys(Worlds);\n        this.worldOptions = {\n            //name: worldNames[worldNames.length * Math.random() << 0], // Random startup world\n            name: \"CyclicRainbows\",\n            //width: 128, // Can force a width/height here\n            //height: 128,\n        }\n\n        // Create the app and put its canvas into `container`\n        this.app = new PIXI.Application(\n            {\n                antialias: false, \n                transparent: false, \n                resolution: 1\n            }\n        );\n        this.container.appendChild(this.app.view);\n\n        // Start the update loop\n        this.app.ticker.add((delta) => {\n            this.OnUpdate(delta);\n        });\n\n        this.framecounter = new FrameCounter(1, null);\n\n        // Stop application and wait for setup to finish\n        this.app.stop();\n\n        // Load resources needed for the program to run\n        PIXI.loader\n            .add('fragShader', '../resources/dust.frag')\n            .load((loader, res) => {\n                // Loading has finished\n                this.loadedResources = res;\n                this.Setup();\n                this.app.start();\n                initFinishedCallback();\n            });\n    }\n\n    /**\n     * Reusable method for setting up the simulation from `this.worldOptions`.\n     * Also works as a reset function if you call this without changing\n     * `this.worldOptions.name` beforehand.\n     */\n    Setup() {\n\n        // Create the world from the string\n        try {\n            this.world = Worlds[this.worldOptions.name].call(this, this.worldOptions.width, this.worldOptions.height);\n        } catch (err) {\n            throw \"World with the name \" + this.worldOptions.name + \" does not exist!\";\n        }\n        this.framecounter.frameFrequency = this.world.recommendedFrameFrequency || 1;\n\n        this.app.renderer.resize(this.world.width, this.world.height);\n\n        // Remove canvas filtering through css\n        this.app.renderer.view.style.cssText = ` \n            image-rendering: optimizeSpeed; \n            image-rendering: -moz-crisp-edges; \n            image-rendering: -webkit-optimize-contrast; \n            image-rendering: optimize-contrast;\n            image-rendering: -o-crisp-edges; \n            image-rendering: pixelated; \n            -ms-interpolation-mode: nearest-neighbor; \n        `;\n        this.app.renderer.view.style.border = \"1px dashed green\";\n        this.app.renderer.view.style.width = \"100%\";\n        this.app.renderer.view.style.height = \"100%\";\n        this.app.renderer.backgroundColor = 0xffffff;\n\n        // Create a sprite from a blank canvas\n        this.textureCanvas = document.createElement('canvas');\n        this.textureCanvas.width = this.world.width;\n        this.textureCanvas.height = this.world.height;\n        this.textureCtx = this.textureCanvas.getContext('2d'); // Used later to update texture\n\n        this.baseTexture = new PIXI.BaseTexture.fromCanvas(this.textureCanvas);\n        this.sprite = new PIXI.Sprite(\n            new PIXI.Texture(this.baseTexture, new PIXI.Rectangle(0, 0, this.world.width, this.world.height))\n        );\n\n        // Center the sprite\n        this.sprite.x = this.world.width / 2;\n        this.sprite.y = this.world.height / 2;\n        this.sprite.anchor.set(0.5);\n\n        // Create the shader for the sprite\n        this.filter = new PIXI.Filter(null, this.loadedResources.fragShader.data);\n        this.sprite.filters = [this.filter];\n\n        this.app.stage.removeChildren(); // Remove any attached children (for case where changing presets)\n        this.app.stage.addChild(this.sprite);\n\n        // Update the texture from the initial state of the world\n        this.UpdateTexture();\n    }\n\n    /**\n     * Called every frame. Continues indefinitely after being called once.\n     */\n    OnUpdate(delta) {\n        var noskip = this.framecounter.IncrementFrame();\n        if(noskip) {\n            this.filter.uniforms.time += delta;\n            this.world.step();\n            this.UpdateTexture();\n            this.app.render();\n        }\n\n    }\n\n    /**\n     * Updates the texture representing the world.\n     * Writes cell colors to the texture canvas and updates `baseTexture` from it,\n     * which makes Pixi update the sprite.\n     */\n    UpdateTexture() {\n        \n        var index = 0;\n        var ctx = this.textureCtx;\t\t\n        ctx.fillStyle = \"black\";\n        ctx.fillRect(0, 0, this.textureCanvas.width, this.textureCanvas.height);\n        var pix = ctx.createImageData(this.textureCanvas.width, this.textureCanvas.height);\t\t\n        for (var y = 0; y < this.textureCanvas.height; y++) {\t\t\t\n            for (var x = 0; x < this.textureCanvas.width; x++) {\n                var paletteIndex = this.world.grid[y][x].getColor();\n                var colorRGBA = this.world.palette[paletteIndex];\n                if(colorRGBA != null) {\n                    pix.data[index++] = colorRGBA[0];\t\t\t\t\n                    pix.data[index++] = colorRGBA[1];\t\t\t\t\n                    pix.data[index++] = colorRGBA[2];\t\t\t\t\n                    pix.data[index++] = colorRGBA[3];\t\n                } else {\n                    throw \"Palette index out of bounds: \" + paletteIndex;\n                }\n            }\t\t\n        } \t\t\n        ctx.putImageData(pix, 0, 0);\n\n        // Tell Pixi to update the texture referenced by this ctx.\n        this.baseTexture.update();\n\n    }\n\n}\n\n/**\n * Convenience class for restricting the refresh rate of the simulation.\n */\nclass FrameCounter {\n    constructor(frameFrequency, frameLimit = null) {\n        // The number of frames ingested\n        this.frameCount = 0;\n\n        // The number of frames allowed to run\n        this.passedFrames = 0;\n\n        // Frame will run every `frameFrequency` frames that pass\n        this.frameFrequency = frameFrequency;\n\n        // If set, class will stop allowing frames after `frameLimit` \n        // passedFrames have been allowed.\n        this.frameLimit = frameLimit;\n    }\n\n    /**\n     * Returns true once every `frameFrequency` times it is called.\n     */\n    IncrementFrame(){\n        this.frameCount += 1;\n        if(this.frameCount % this.frameFrequency == 0) {\n            // If we've reached the frame limit\n            if(this.frameLimit != null && this.passedFrames >= this.frameLimit)\n                return false;\n\n            this.frameCount = 0;\n            this.passedFrames += 1;\n            return true;\n        }\n        return false;\n    }\n}","import { Worlds } from \"./worlds.js\";\n\nexport class GUI {\n\n    /**\n     * Creates and attaches a GUI to the page if DAT.GUI is included.\n     */\n    static Init(dust){\n        if(typeof(dat) === \"undefined\"){\n            console.warn(\"No DAT.GUI instance found. Import on this page to use!\");\n            return;\n        }\n\n        var gui = new dat.GUI();\n\n        gui.add(dust.framecounter, 'frameFrequency').min(1).max(30).step(1).listen();\n\n        gui.add(dust.worldOptions, 'name', Object.getOwnPropertyNames(Worlds)).onChange(() => {\n            dust.Setup();\n        }).name(\"Preset\");\n\n        gui.add(dust, \"Setup\").name(\"Reset\");\n    }\n\n}","import { Detector } from \"./utils/webgl-detect.js\";\nimport { Dust } from \"./dust.js\";\nimport { GUI } from \"./gui.js\";\n\nlet container = document.getElementById(\"dust-container\");\n\nif ( !Detector.HasWebGL() ) {\n    //exit(\"WebGL is not supported on this browser.\");\n    console.log(\"WebGL is not supported on this browser.\");\n    container.innerHTML = Detector.GetErrorHTML();\n    container.classList.add(\"no-webgl\");\n}\nelse {\n    let dust = new Dust(container, () => {\n        // Dust is now fully loaded\n        GUI.Init(dust);\n    });\n}","class Detector {\n\n    //http://stackoverflow.com/questions/11871077/proper-way-to-detect-webgl-support\n    static HasWebGL() {\n        if (!!window.WebGLRenderingContext) {\n            var canvas = document.createElement(\"canvas\"),\n                    names = [\"webgl\", \"experimental-webgl\", \"moz-webgl\", \"webkit-3d\"],\n                context = false;\n\n            for(var i=0;i<4;i++) {\n                try {\n                    context = canvas.getContext(names[i]);\n                    if (context && typeof context.getParameter == \"function\") {\n                        // WebGL is enabled\n                        return true;\n                    }\n                } catch(e) {}\n            }\n\n            // WebGL is supported, but disabled\n            return false;\n        }\n        // WebGL not supported\n        return false;\n    }\n\n    static GetErrorHTML(message = null){\n        if(message == null){\n            message = `Your graphics card does not seem to support \n                        <a href=\"http://khronos.org/webgl/wiki/Getting_a_WebGL_Implementation\">WebGL</a>. <br>\n                        Find out how to get it <a href=\"http://get.webgl.org/\">here</a>.`;\n        }\n        return `\n        <div class=\"no-webgl-support\">\n        <p style=\"text-align: center;\">${message}</p>\n        </div>\n        `\n    }\n\n}\n\nexport { Detector };","function CellAutoCell(locX, locY) {\n\tthis.x = locX;\n\tthis.y = locY;\n\n\tthis.delays = [];\n}\n\nCellAutoCell.prototype.process = function(neighbors) {\n\treturn;\n};\nCellAutoCell.prototype.countSurroundingCellsWithValue = function(neighbors, value) {\n\tvar surrounding = 0;\n\tfor (var i = 0; i < neighbors.length; i++) {\n\t\tif (neighbors[i] !== null && neighbors[i][value]) {\n\t\t\tsurrounding++;\n\t\t}\n\t}\n\treturn surrounding;\n};\nCellAutoCell.prototype.delay = function(numSteps, fn) {\n\tthis.delays.push({ steps: numSteps, action: fn });\n};\n\nCellAutoCell.prototype.reset = function(neighbors) {\n\treturn;\n};\n\nCellAutoCell.prototype.getSurroundingCellsAverageValue = function(neighbors, value) {\n\tvar summed = 0.0;\n\tfor (var i = 0; i < neighbors.length; i++) {\n\t\tif (neighbors[i] !== null && (neighbors[i][value] || neighbors[i][value] === 0)) {\n\t\t\tsummed += neighbors[i][value];\n\t\t}\n\t}\n\treturn summed / neighbors.length;//cnt;\n};\nfunction CAWorld(options) {\n\n\tthis.width = 24;\n\tthis.height = 24;\n\tthis.options = options;\n\n\tthis.wrap = false;\n\n\tthis.TOPLEFT        = { index: 0, x: -1, y: -1 };\n\tthis.TOP            = { index: 1, x:  0, y: -1 };\n\tthis.TOPRIGHT       = { index: 2, x:  1, y: -1 };\n\tthis.LEFT           = { index: 3, x: -1, y:  0 };\n\tthis.RIGHT          = { index: 4, x:  1, y:  0 };\n\tthis.BOTTOMLEFT     = { index: 5, x: -1, y:  1 };\n\tthis.BOTTOM         = { index: 6, x:  0, y:  1 };\n\tthis.BOTTOMRIGHT    = { index: 7, x:  1, y:  1 };\n\t\n\tthis.randomGenerator = Math.random;\n\n\t// square tiles by default, eight sides\n\tvar neighborhood = [null, null, null, null, null, null, null, null];\n\n\tif (this.options.hexTiles) {\n\t\t// six sides\n\t\tneighborhood = [null, null, null, null, null, null];\n\t}\n\tthis.step = function() {\n\t\tvar y, x;\n\t\tfor (y=0; y<this.height; y++) {\n\t\t\tfor (x=0; x<this.width; x++) {\n\t\t\t\tthis.grid[y][x].reset();\n\t\t\t}\n\t\t}\n\n\t\t// bottom up, left to right processing\n\t\tfor (y=this.height-1; y>=0; y--) {\n\t\t\tfor (x=this.width-1; x>=0; x--) {\n\t\t\t\tthis.fillNeighbors(neighborhood, x, y);\n\t\t\t\tvar cell = this.grid[y][x];\n\t\t\t\tcell.process(neighborhood);\n\n\t\t\t\t// perform any delays\n\t\t\t\tfor (var i=0; i<cell.delays.length; i++) {\n\t\t\t\t\tcell.delays[i].steps--;\n\t\t\t\t\tif (cell.delays[i].steps <= 0) {\n\t\t\t\t\t\t// perform action and remove delay\n\t\t\t\t\t\tcell.delays[i].action(cell);\n\t\t\t\t\t\tcell.delays.splice(i, 1);\n\t\t\t\t\t\ti--;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t};\n\n\t//var NEIGHBORLOCS = [{x:-1, y:-1}, {x:0, y:-1}, {x:1, y:-1}, {x:-1, y:0}, {x:1, y:0},{x:-1, y:1}, {x:0, y:1}, {x:1, y:1}];\n\t// square tiles by default\n\tvar NEIGHBORLOCS = [\n\t\t{ diffX : function() { return -1; }, diffY: function() { return -1; }},  // top left\n\t\t{ diffX : function() { return 0; }, diffY: function() { return -1; }},  // top\n\t\t{ diffX : function() { return 1; }, diffY: function() { return -1; }},  // top right\n\t\t{ diffX : function() { return -1; }, diffY: function() { return 0; }},  // left\n\t\t{ diffX : function() { return 1; }, diffY: function() { return 0; }},  // right\n\t\t{ diffX : function() { return -1; }, diffY: function() { return 1; }},  // bottom left\n\t\t{ diffX : function() { return 0; }, diffY: function() { return 1; }},  // bottom\n\t\t{ diffX : function() { return 1; }, diffY: function() { return 1; }}  // bottom right\n\t];\n\tif (this.options.hexTiles) {\n\t\tif (this.options.flatTopped) {\n\t\t\t// flat topped hex map,  function requires column to be passed\n\t\t\tNEIGHBORLOCS = [\n\t\t\t\t{ diffX : function() { return -1; }, diffY: function(x) { return x%2 ? -1 : 0; }},  // top left\n\t\t\t\t{ diffX : function() { return 0; }, diffY: function() { return -1; }},  // top\n\t\t\t\t{ diffX : function() { return 1; }, diffY: function(x) { return x%2 ? -1 : 0; }},  // top right\n\t\t\t\t{ diffX : function() { return 1; }, diffY: function(x) { return x%2 ? 0 : 1; }},  // bottom right\n\t\t\t\t{ diffX : function() { return 0; }, diffY: function() { return 1; }},  // bottom\n\t\t\t\t{ diffX : function() { return -1; }, diffY: function(x) { return x%2 ? 0 : 1; }}  // bottom left\n\t\t\t];\n\t\t}\n\t\telse {\n\t\t\t// pointy topped hex map, function requires row to be passed\n\t\t\tNEIGHBORLOCS = [\n\t\t\t\t{ diffX : function(x, y) { return y%2 ? 0 : -1; }, diffY: function() { return -1; }},  // top left\n\t\t\t\t{ diffX : function(x, y) { return y%2 ? 1 : 0; }, diffY: function() { return -1; }},  // top right\n\t\t\t\t{ diffX : function() { return -1; }, diffY: function() { return 0; }},  // left\n\t\t\t\t{ diffX : function() { return 1; }, diffY: function() { return 0; }},  // right\n\t\t\t\t{ diffX : function(x, y) { return y%2 ? 0 : -1; }, diffY: function() { return 1; }},  // bottom left\n\t\t\t\t{ diffX : function(x, y) { return y%2 ? 1 : 0; }, diffY: function() { return 1; }}  // bottom right\n\t\t\t];\n\t\t}\n\n\t}\n\tthis.fillNeighbors = function(neighbors, x, y) {\n\t\tfor (var i=0; i<NEIGHBORLOCS.length; i++) {\n\t\t\tvar neighborX = x + NEIGHBORLOCS[i].diffX(x, y);\n\t\t\tvar neighborY = y + NEIGHBORLOCS[i].diffY(x, y);\n\t\t\tif (this.wrap) {\n\t\t\t\t// TODO: hex map support for wrapping\n\t\t\t\tneighborX = (neighborX + this.width) % this.width;\n\t\t\t\tneighborY = (neighborY + this.height) % this.height;\n\t\t\t}\n\t\t\tif (!this.wrap && (neighborX < 0 || neighborY < 0 || neighborX >= this.width || neighborY >= this.height)) {\n\t\t\t\tneighbors[i] = null;\n\t\t\t}\n\t\t\telse {\n\t\t\t\tneighbors[i] = this.grid[neighborY][neighborX];\n\t\t\t}\n\t\t}\n\t};\n\n\tthis.initialize = function(arrayTypeDist) {\n\n\t\t// sort the cell types by distribution\n\t\tarrayTypeDist.sort(function(a, b) {\n\t\t\treturn a.distribution > b.distribution ? 1 : -1;\n\t\t});\n\n\t\tvar totalDist = 0;\n\t\t// add all distributions together\n\t\tfor (var i=0; i<arrayTypeDist.length; i++) {\n\t\t\ttotalDist += arrayTypeDist[i].distribution;\n\t\t\tarrayTypeDist[i].distribution = totalDist;\n\t\t}\n\n\t\tthis.grid = [];\n\t\tfor (var y=0; y<this.height; y++) {\n\t\t\tthis.grid[y] = [];\n\t\t\tfor (var x=0; x<this.width; x++) {\n\t\t\t\tvar random = this.randomGenerator() * 100;\n\n\t\t\t\tfor (i=0; i<arrayTypeDist.length; i++) {\n\t\t\t\t\tif (random <= arrayTypeDist[i].distribution) {\n\t\t\t\t\t\tthis.grid[y][x] = new this.cellTypes[arrayTypeDist[i].name](x, y);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t};\n\n\tthis.cellTypes = {};\n\tthis.registerCellType = function(name, cellOptions, init) {\n\t\tthis.cellTypes[name] = function(x, y) {\n\t\t\tCellAutoCell.call(this, x, y);\n\n\t\t\tif (init) {\n\t\t\t\tinit.call(this, x, y);\n\t\t\t}\n\n\t\t\tif (cellOptions) {\n\t\t\t\tfor (var key in cellOptions) {\n\t\t\t\t\tif (typeof cellOptions[key] !== 'function') {\n\t\t\t\t\t\t// properties get instance\n\t\t\t\t\t\tif (typeof cellOptions[key] === 'object') {\n\t\t\t\t\t\t\t// objects must be cloned\n\t\t\t\t\t\t\tthis[key] = JSON.parse(JSON.stringify(cellOptions[key]));\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse {\n\t\t\t\t\t\t\t// primitive\n\t\t\t\t\t\t\tthis[key] = cellOptions[key];\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t\tthis.cellTypes[name].prototype = Object.create(CellAutoCell.prototype);\n\t\tthis.cellTypes[name].prototype.constructor = this.cellTypes[name];\n\t\tthis.cellTypes[name].prototype.cellType = name;\n\n\t\tif (cellOptions) {\n\t\t\tfor (var key in cellOptions) {\n\t\t\t\tif (typeof cellOptions[key] === 'function') {\n\t\t\t\t\t// functions get prototype\n\t\t\t\t\tthis.cellTypes[name].prototype[key] = cellOptions[key];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t};\n\n\t// apply options\n\tif (options) {\n\t\tfor (var key in options) {\n\t\t\tthis[key] = options[key];\n\t\t}\n\t}\n\n}\n\nCAWorld.prototype.initializeFromGrid  = function(values, initGrid) {\n\n\tthis.grid = [];\n\tfor (var y=0; y<this.height; y++) {\n\t\tthis.grid[y] = [];\n\t\tfor (var x=0; x<this.width; x++) {\n\t\t\tfor (var i=0; i<values.length; i++) {\n\t\t\t\tif (values[i].gridValue === initGrid[y][x]) {\n\t\t\t\t\tthis.grid[y][x] = new this.cellTypes[values[i].name](x, y);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n};\n\nCAWorld.prototype.createGridFromValues = function(values, defaultValue) {\n\tvar newGrid = [];\n\n\tfor (var y=0; y<this.height; y++) {\n\t\tnewGrid[y] = [];\n\t\tfor (var x = 0; x < this.width; x++) {\n\t\t\tnewGrid[y][x] = defaultValue;\n\t\t\tvar cell = this.grid[y][x];\n\t\t\tfor (var i=0; i<values.length; i++) {\n\t\t\t\tif (cell.cellType == values[i].cellType && cell[values[i].hasProperty]) {\n\t\t\t\t\tnewGrid[y][x] = values[i].value;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\treturn newGrid;\n};\n\n;(function() {\n  var CellAuto = {\n    World: CAWorld,\n    Cell: CellAutoCell\n  };\n\n  if (typeof define === 'function' && define.amd) {\n    define('CellAuto', function () {\n      return CellAuto;\n    });\n  } else if (typeof module !== 'undefined' && module.exports) {\n    module.exports = CellAuto;\n  } else {\n    window.CellAuto = CellAuto;\n  }\n})();","import * as CellAuto from \"./vendor/cellauto.js\";\n\nexport var Worlds = {\n\n    /**\n     * Chooses a random elementary automata from a list.\n     */\n    RandomRule: function (width = 128, height = 128) {\n        var rules = [\n            18, 22, 26, 54, 60, 90, 94, 110, 126, 150\n        ];\n        var options = {\n            width: width,\n            height: height,\n            rule: rules[rules.length * Math.random() << 0], // Random rule from list\n            palette: [\n                [68, 36, 52, 255],\n                [255, 255, 255, 255]\n            ],\n            wrap: true\n        }\n        return Elementary(options);\n    },\n\n    /**\n     * Conway's Game of Life\n     * B3/S23\n     */\n    Life: function (width = 128, height = 128) {\n        var options = {\n            width: width,\n            height: height,\n            B: [3],\n            S: [2, 3],\n            palette: [\n                [68, 36, 52, 255],\n                [255, 255, 255, 255]\n            ]\n        }\n        return LifeLike(options);\n    },\n\n    /**\n     * Generates a maze-like structure.\n     * Based on rule B3/S1234 (Mazecetric).\n     */\n    Mazecetric: function(width = 96, height = 96) {\n        var options = {\n            width: width,\n            height: height,\n            B: [3],\n            S: [1, 2, 3, 4],\n            palette: [\n                [68, 36, 52, 255],\n                [255, 255, 255, 255]\n            ],\n            recommendedFrameFrequency: 5,\n        }\n        return LifeLike(options, (x, y) => {\n            // Distribution function\n            return Math.random() < 0.1;\n        });\n    },\n\n    /**\n     * B35678/S5678\n     */\n    Diamoeba: function(width = 96, height = 96) {\n        var options = {\n            width: width,\n            height: height,\n            B: [3, 5, 6, 7, 8],\n            S: [5, 6, 7, 8],\n            palette: [\n                [68, 36, 52, 255],\n                [255, 255, 255, 255]\n            ],\n            recommendedFrameFrequency: 3\n        }\n        return LifeLike(options, (x, y) => {\n            // Distribution function\n            return Math.random() < 0.2;\n        });\n    },\n\n    /**\n     * B4678/S35678\n     */\n    Anneal: function(width = 96, height = 96) {\n        var options = {\n            width: width,\n            height: height,\n            B: [4, 6, 7, 8],\n            S: [3, 5, 6, 7, 8],\n            palette: [\n                [68, 36, 52, 255],\n                [255, 255, 255, 255]\n            ],\n            recommendedFrameFrequency: 3\n        }\n        return LifeLike(options, (x, y) => {\n            // Distribution function\n            return Math.random() < 0.3;\n        });\n    },\n\n    /**\n     * CA that looks like lava.\n     * \n     * From https://sanojian.github.io/cellauto\n     */\n    Lava: function (width = 128, height = 128) {\n        // thanks to TheLastBanana on TIGSource\n\n        var world = new CellAuto.World({\n            width: width,\n            height: height,\n            wrap: true\n        });\n\n        world.palette = [\n            [34,10,21,255], [68,17,26,255], [123,16,16,255],\n            [190,45,16,255], [244,102,20,255], [254,212,97,255]\n        ];\n\n        var colors = [];\n        var index = 0;\n        for (; index < 18; ++index) { colors[index] = 1; }\n        for (; index < 22; ++index) { colors[index] = 0; }\n        for (; index < 25; ++index) { colors[index] = 1; }\n        for (; index < 27; ++index) { colors[index] = 2; }\n        for (; index < 29; ++index) { colors[index] = 3; }\n        for (; index < 32; ++index) { colors[index] = 2; }\n        for (; index < 35; ++index) { colors[index] = 0; }\n        for (; index < 36; ++index) { colors[index] = 2; }\n        for (; index < 38; ++index) { colors[index] = 4; }\n        for (; index < 42; ++index) { colors[index] = 5; }\n        for (; index < 44; ++index) { colors[index] = 4; }\n        for (; index < 46; ++index) { colors[index] = 2; }\n        for (; index < 56; ++index) { colors[index] = 1; }\n        for (; index < 64; ++index) { colors[index] = 0; }\n\n        world.registerCellType('lava', {\n            getColor: function () {\n                var v = this.value + 0.5\n                    + Math.sin(this.x / world.width * Math.PI) * 0.04\n                    + Math.sin(this.y / world.height * Math.PI) * 0.04\n                    - 0.05;\n                v = Math.min(1.0, Math.max(0.0, v));\n\n                return colors[Math.floor(colors.length * v)];\n            },\n            process: function (neighbors) {\n                if(this.droplet === true) {\n                    for (var i = 0; i < neighbors.length; i++) {\n                        if (neighbors[i] !== null && neighbors[i].value) {\n                            neighbors[i].value = 0.5 *this.value;\n                            neighbors[i].prev = 0.5 *this.prev;\n                        }\n                    }\n                    this.droplet = false;\n                    return true;\n                }\n                var avg = this.getSurroundingCellsAverageValue(neighbors, 'value');\n                this.next = 0.998 * (2 * avg - this.prev);\n\n                return true;\n            },\n            reset: function () {\n                if(Math.random() > 0.99993) {\n                    this.value = -0.25 + 0.3*Math.random();\n                    this.prev = this.value;\n                    this.droplet = true;\n                }\n                else {\n                    this.prev = this.value;\n                    this.value = this.next;\n                }\n                this.value = Math.min(0.5, Math.max(-0.5, this.value));\n                return true;\n            }\n        }, function () {\n            //init\n            this.value = 0.0;\n            this.prev = this.value;\n            this.next = this.value;\n        });\n\n        world.initialize([\n            { name: 'lava', distribution: 100 }\n        ]);\n\n        return world;\n\n    },\n\n    /**\n     * Cyclic rainbow automata.\n     * \n     * From https://sanojian.github.io/cellauto\n     */\n    CyclicRainbows: function(width = 128, height = 128) {\n        var world = new CellAuto.World({\n            width: width,\n            height: height\n        });\n\n        world.recommendedFrameFrequency = 1;\n\n        world.palette = [\n            [255,0,0,1 * 255], [255,96,0,1 * 255], [255,191,0,1 * 255], [223,255,0,1 * 255],\n            [128,255,0,1 * 255], [32,255,0,1 * 255], [0,255,64,1 * 255], [0,255,159,1 * 255],\n            [0,255,255,1 * 255], [0,159,255,1 * 255], [0,64,255,1 * 255], [32,0,255,1 * 255],\n            [127,0,255,1 * 255], [223,0,255,1 * 255], [255,0,191,1 * 255], [255,0,96,1 * 255]\n        ];\n\n        world.registerCellType('cyclic', {\n            getColor: function () {\n                return this.state;\n            },\n            process: function (neighbors) {\n                var next = (this.state + Math.floor(Math.random()*2)) % 16;\n\n                var changing = false;\n                for (var i = 0; i < neighbors.length; i++) {\n                    if (neighbors[i] !== null) {\n                        changing = changing || neighbors[i].state === next;\n                    }\n                }\n                if (changing) this.state = next;\n                return true;\n            }\n        }, function () {\n            //init\n            this.state = Math.floor(Math.random() * 16);\n        });\n\n        world.initialize([\n            { name: 'cyclic', distribution: 100 }\n        ]);\n\n        return world;\n    },\n\n    /**\n     * Simulates caves and water movement.\n     * \n     * From https://sanojian.github.io/cellauto\n     */\n    CavesWithWater: function(width = 128, height = 128) {\n        // FIRST CREATE CAVES\n        var world = new CellAuto.World({\n            width: width,\n            height: height\n        });\n\n        world.registerCellType('wall', {\n            process: function (neighbors) {\n                var surrounding = this.countSurroundingCellsWithValue(neighbors, 'wasOpen');\n                this.open = (this.wasOpen && surrounding >= 4) || surrounding >= 6;\n            },\n            reset: function () {\n                this.wasOpen = this.open;\n            }\n        }, function () {\n            //init\n            this.open = Math.random() > 0.40;\n        });\n\n        world.initialize([\n            { name: 'wall', distribution: 100 }\n        ]);\n\n        // generate our cave, 10 steps aught to do it\n        for (var i=0; i<10; i++) {\n            world.step();\n        }\n\n        var grid = world.createGridFromValues([\n            { cellType: 'wall', hasProperty: 'open', value: 0 }\n        ], 1);\n\n        // NOW USE OUR CAVES TO CREATE A NEW WORLD CONTAINING WATER\n        world = new CellAuto.World({\n            width: width,\n            height: height,\n            clearRect: true\n        });\n\n        world.palette = [\n            [89, 125, 206, 0 * 255],\n            [89, 125, 206, 1/9 * 255],\n            [89, 125, 206, 2/9 * 255],\n            [89, 125, 206, 3/9 * 255],\n            [89, 125, 206, 4/9 * 255],\n            [89, 125, 206, 5/9 * 255],\n            [89, 125, 206, 6/9 * 255],\n            [89, 125, 206, 7/9 * 255],\n            [89, 125, 206, 8/9 * 255],\n            [89, 125, 206, 1 * 255],\n            [109, 170, 44, 1 * 255],\n            [68, 36, 52, 1 * 255]\n        ];\n\n        world.registerCellType('water', {\n            getColor: function() {\n                //return 0x597DCE44;\n                return this.water;\n            },\n            process: function(neighbors) {\n                if (this.water === 0) {\n                    // already empty\n                    return;\n                }\n                // push my water out to my available neighbors\n\n                // cell below me will take all it can\n                if (neighbors[world.BOTTOM.index] !== null && this.water && neighbors[world.BOTTOM.index].water < 9) {\n                    var amt = Math.min(this.water, 9 - neighbors[world.BOTTOM.index].water);\n                    this.water-= amt;\n                    neighbors[world.BOTTOM.index].water += amt;\n                    return;\n                }\n\n                // bottom two corners take half of what I have\n                for (var i=5; i<=7; i++) {\n                    if (i!=world.BOTTOM.index && neighbors[i] !== null && this.water && neighbors[i].water < 9) {\n                        var amt = Math.min(this.water, Math.ceil((9 - neighbors[i].water)/2));\n                        this.water-= amt;\n                        neighbors[i].water += amt;\n                        return;\n                    }\n                }\n                // sides take a third of what I have\n                for (i=3; i<=4; i++) {\n                    if (neighbors[i] !== null && neighbors[i].water < this.water) {\n                        var amt = Math.min(this.water, Math.ceil((9 - neighbors[i].water)/3));\n                        this.water-= amt;\n                        neighbors[i].water += amt;\n                        return;\n                    }\n                }\n            }\n        }, function() {\n            //init\n            this.water = Math.floor(Math.random() * 9);\n        });\n\n        world.registerCellType('rock', {\n            isSolid: true,\n            getColor: function() {\n                return this.lighted ? 10 : 11;\n            },\n            process: function(neighbors) {\n                this.lighted = neighbors[world.TOP.index] && !(neighbors[world.TOP.index].water === 9) && !neighbors[world.TOP.index].isSolid\n                    && neighbors[world.BOTTOM.index] && neighbors[world.BOTTOM.index].isSolid;\n            }\n        });\n\n        // pass in our generated cave data\n        world.initializeFromGrid([\n            { name: 'rock', gridValue: 1 },\n            { name: 'water', gridValue: 0 }\n        ], grid);\n\n        return world;\n    },\n\n    Rain: function(width = 128, height = 128) {\n        // FIRST CREATE CAVES\n        var world = new CellAuto.World({\n            width: width,\n            height: height\n        });\n\n        world.registerCellType('wall', {\n            process: function (neighbors) {\n                var surrounding = this.countSurroundingCellsWithValue(neighbors, 'wasOpen');\n                this.open = (this.wasOpen && surrounding >= 4) || surrounding >= 6;\n            },\n            reset: function () {\n                this.wasOpen = this.open;\n            }\n        }, function () {\n            //init\n            this.open = Math.random() > 0.40;\n        });\n\n        world.initialize([\n            { name: 'wall', distribution: 100 }\n        ]);\n\n        // generate our cave, 10 steps aught to do it\n        for (var i=0; i<10; i++) {\n            world.step();\n        }\n\n        var grid = world.createGridFromValues([\n            { cellType: 'wall', hasProperty: 'open', value: 0 }\n        ], 1);\n\n        // cut the top half of the caves off\n        for (var y=0; y<Math.floor(world.height/2); y++) {\n            for (var x=0; x<world.width; x++) {\n                grid[y][x] = 0;\n            }\n        }\n\n        // NOW USE OUR CAVES TO CREATE A NEW WORLD CONTAINING WATER\n        world = new CellAuto.World({\n            width: width,\n            height: height,\n            clearRect: true\n        });\n\n        world.palette = [\n            [89, 125, 206, 1],\n            [89, 125, 206, 1/9 * 255],\n            [89, 125, 206, 2/9 * 255],\n            [89, 125, 206, 3/9 * 255],\n            [89, 125, 206, 4/9 * 255],\n            [89, 125, 206, 5/9 * 255],\n            [89, 125, 206, 6/9 * 255],\n            [89, 125, 206, 7/9 * 255],\n            [89, 125, 206, 8/9 * 255],\n            [89, 125, 206, 255],\n            [109, 170, 44, 255],\n            [68, 36, 52, 255]\n        ];\n\n        world.registerCellType('air', {\n            getColor: function() {\n                //return '89, 125, 206, ' + (this.water ? Math.max(0.3, this.water/9) : 0);\n                return this.water;\n            },\n            process: function(neighbors) {\n                // rain on the top row\n                if (neighbors[world.TOP.index] === null && Math.random() < 0.02) {\n                    this.water = 5;\n                }\n                else if (this.water === 0) {\n                    // already empty\n                    return;\n                }\n\n                // push my water out to my available neighbors\n\n                // cell below me will take all it can\n                if (neighbors[world.BOTTOM.index] !== null && this.water && neighbors[world.BOTTOM.index].water < 9) {\n                    var amt = Math.min(this.water, 9 - neighbors[world.BOTTOM.index].water);\n                    this.water-= amt;\n                    neighbors[world.BOTTOM.index].water += amt;\n                    return;\n                }\n\n                // bottom two corners take half of what I have\n                for (var i=5; i<=7; i++) {\n                    if (i!=world.BOTTOM.index && neighbors[i] !== null && this.water && neighbors[i].water < 9) {\n                        var amt = Math.min(this.water, Math.ceil((9 - neighbors[i].water)/2));\n                        this.water-= amt;\n                        neighbors[i].water += amt;\n                        return;\n                    }\n                }\n                // sides take a third of what I have\n                for (i=3; i<=4; i++) {\n                    if (neighbors[i] !== null && neighbors[i].water < this.water) {\n                        var amt = Math.min(this.water, Math.ceil((9 - neighbors[i].water)/3));\n                        this.water-= amt;\n                        neighbors[i].water += amt;\n                        return;\n                    }\n                }\n            }\n        }, function() {\n            //init\n            this.water = 0;\n        });\n\n        world.registerCellType('rock', {\n            isSolid: true,\n            getColor: function() {\n                return this.lighted ? 10 : 11;\n            },\n            process: function(neighbors) {\n                this.lighted = neighbors[world.TOP.index] && !(neighbors[world.TOP.index].water === 9) && !neighbors[world.TOP.index].isSolid\n                    && neighbors[world.BOTTOM.index] && neighbors[world.BOTTOM.index].isSolid;\n            }\n        });\n\n        // pass in our generated cave data\n        world.initializeFromGrid([\n            { name: 'rock', gridValue: 1 },\n            { name: 'air', gridValue: 0 }\n        ], grid);\n\n        return world;\n    },\n\n    /**\n     * Simulates splashing water.\n     * \n     * From https://sanojian.github.io/cellauto\n     */\n    Splashes: function(width = 128, height = 128) {\n        var world = new CellAuto.World({\n            width: width,\n            height: height\n        });\n\n        world.palette = [];\n        var colors = [];\n        for (var index=0; index<64; index++) {\n            world.palette.push([89, 125, 206, (index/64) * 255]);\n            colors[index] = 63 - index;\n        }\n\n        world.registerCellType('water', {\n            getColor: function () {\n                var v = (Math.max(2 * this.value + 0.02, 0) - 0.02) + 0.5;\n                return colors[Math.floor(colors.length * v)];\n            },\n            process: function (neighbors) {\n                if(this.droplet == true) {\n                    for (var i = 0; i < neighbors.length; i++) {\n                        if (neighbors[i] !== null && neighbors[i].value) {\n                            neighbors[i].value = 0.5 *this.value;\n                            neighbors[i].prev = 0.5 *this.prev;\n                        }\n                    }\n                    this.droplet = false;\n                    return true;\n                }\n                var avg = this.getSurroundingCellsAverageValue(neighbors, 'value');\n                this.next = 0.99 * (2 * avg - this.prev);\n                return true;\n            },\n            reset: function () {\n                if(Math.random() > 0.9999) {\n                    this.value = -0.2 + 0.25*Math.random();\n                    this.prev = this.value;\n                    this.droplet = true;\n                }\n                else {\n                    this.prev = this.value;\n                    this.value = this.next;\n                }\n                return true;\n            }\n        }, function () {\n            //init\n            this.water = true;\n            this.value = 0.0;\n            this.prev = this.value;\n            this.next = this.value;\n        });\n\n        world.initialize([\n            { name: 'water', distribution: 100 }\n        ]);\n\n        return world;\n    },\n\n    /**\n     * Rule 52928 - the CA used for Wolfram Alpha's loading animations\n     * \n     * Resources:\n     * https://www.quora.com/What-is-Wolfram-Alphas-loading-screen-a-depiction-of\n     * http://jsfiddle.net/hungrycamel/9UrzJ/\n     */\n    Wolfram: function(width = 96, height = 96) {\n        var world = new CellAuto.World({\n            width: width,\n            height: height,\n            wrap: true\n        });\n\n        world.recommendedFrameFrequency = 2;\n\n        world.palette = [\n            [255, 255, 255, 255], // Background color\n            [255, 110, 0  , 255], // dark orange\n            [255, 130, 0  , 255], //      |\n            [255, 150, 0  , 255], //      |\n            [255, 170, 0  , 255], //      V\n            [255, 180, 0  , 255]  // light orange\n        ];\n\n        var choice = Math.random();\n\n        var seedList = [\n            [\n                [0, 0, 0, 1, 0, 0, 0, 0, 0, 0], \n                [0, 2, 1, 1, 1, 1, 0, 0, 0, 0], \n                [1, 1, 3, 4, 2, 1, 1, 0, 0, 0], \n                [0, 1, 1, 1, 4, 1, 1, 0, 0, 0], \n                [0, 1, 2, 0, 1, 1, 1, 1, 0, 0], \n                [0, 1, 1, 1, 0, 0, 2, 2, 0, 0], \n                [0, 0, 2, 2, 0, 0, 1, 1, 1, 0], \n                [0, 0, 1, 1, 1, 1, 0, 2, 1, 0], \n                [0, 0, 0, 1, 1, 4, 1, 1, 1, 0], \n                [0, 0, 0, 1, 1, 2, 4, 3, 1, 1], \n                [0, 0, 0, 0, 1, 1, 1, 1, 2, 0], \n                [0, 0, 0, 0, 0, 0, 1, 0, 0, 0]\n            ], \n            [[0, 0, 0, 0, 0, 0, 1, 0], [1, 1, 1, 1, 0, 0, 1, 0], [0, 1, 0, 0, 1, 1, 1, 1], [0, 1, 0, 0, 0, 0, 0, 0]], \n            [[0, 0, 0, 0, 0, 0, 1, 1], [0, 0, 1, 1, 1, 0, 1, 1], [1, 1, 0, 1, 1, 1, 0, 0], [1, 1, 0, 0, 0, 0, 0, 0]], \n            [[0, 0, 0, 0, 0, 0, 1, 1], [0, 1, 1, 1, 1, 1, 0, 0], [0, 0, 1, 1, 1, 1, 1, 0], [1, 1, 0, 0, 0, 0, 0, 0]], \n            [[0, 0, 0, 0, 0, 0, 1, 1], [1, 0, 0, 0, 1, 1, 1, 0], [0, 1, 1, 1, 0, 0, 0, 1], [1, 1, 0, 0, 0, 0, 0, 0]], \n            [[0, 0, 0, 0, 0, 0, 1, 1], [1, 0, 0, 1, 1, 0, 1, 1], [1, 1, 0, 1, 1, 0, 0, 1], [1, 1, 0, 0, 0, 0, 0, 0]], \n            [[0, 0, 0, 0, 1, 1, 1, 0], [1, 1, 1, 0, 1, 1, 1, 1], [1, 1, 1, 1, 0, 1, 1, 1], [0, 1, 1, 1, 0, 0, 0, 0]], \n            [[0, 0, 1, 1, 1, 1, 1, 1], [1, 0, 1, 1, 0, 1, 1, 1], [1, 1, 1, 0, 1, 1, 0, 1], [1, 1, 1, 1, 1, 1, 0, 0]], \n            [[0, 1, 0, 0, 0, 1, 1, 1], [1, 0, 1, 1, 0, 1, 1, 1], [1, 1, 1, 0, 1, 1, 0, 1], [1, 1, 1, 0, 0, 0, 1, 0]], \n            [[0, 1, 1, 0, 1, 1, 1, 1], [0, 1, 0, 1, 0, 0, 1, 0], [0, 1, 0, 0, 1, 0, 1, 0], [1, 1, 1, 1, 0, 1, 1, 0]], \n            [[1, 1, 1, 0, 1, 1, 1, 0], [0, 1, 0, 0, 1, 1, 1, 0], [0, 1, 1, 1, 0, 0, 1, 0], [0, 1, 1, 1, 0, 1, 1, 1]], \n            [[1, 1, 1, 0, 1, 1, 1, 1], [1, 1, 0, 1, 1, 1, 1, 0], [0, 1, 1, 1, 1, 0, 1, 1], [1, 1, 1, 1, 0, 1, 1, 1]], \n            [[1, 1, 1, 1, 0, 0, 0, 1], [1, 1, 0, 1, 1, 0, 0, 1], [1, 0, 0, 1, 1, 0, 1, 1], [1, 0, 0, 0, 1, 1, 1, 1]], \n            [[1, 1, 1, 1, 0, 0, 1, 0], [0, 0, 1, 0, 1, 1, 0, 1], [1, 0, 1, 1, 0, 1, 0, 0], [0, 1, 0, 0, 1, 1, 1, 1]], \n            [[1, 1, 1, 1, 0, 0, 1, 0], [1, 0, 0, 1, 1, 0, 1, 1], [1, 1, 0, 1, 1, 0, 0, 1], [0, 1, 0, 0, 1, 1, 1, 1]], \n            [[1, 1, 1, 1, 0, 0, 1, 0], [1, 1, 1, 0, 1, 0, 0, 1], [1, 0, 0, 1, 0, 1, 1, 1], [0, 1, 0, 0, 1, 1, 1, 1]], \n            [[1, 1, 1, 1, 0, 0, 1, 0], [1, 1, 1, 0, 1, 1, 0, 1], [1, 0, 1, 1, 0, 1, 1, 1], [0, 1, 0, 0, 1, 1, 1, 1]], \n            [[1, 1, 1, 1, 0, 0, 1, 0], [1, 1, 1, 1, 0, 0, 1, 1], [1, 1, 0, 0, 1, 1, 1, 1], [0, 1, 0, 0, 1, 1, 1, 1]], \n            [[1, 1, 1, 1, 0, 1, 0, 1], [1, 1, 1, 0, 0, 1, 0, 0], [0, 0, 1, 0, 0, 1, 1, 1], [1, 0, 1, 0, 1, 1, 1, 1]], \n            [[1, 1, 1, 1, 0, 1, 1, 0], [0, 0, 0, 0, 0, 1, 1, 0], [0, 1, 1, 0, 0, 0, 0, 0], [0, 1, 1, 0, 1, 1, 1, 1]], \n            [[1, 1, 1, 1, 0, 1, 1, 0], [0, 1, 0, 0, 1, 0, 1, 0], [0, 1, 0, 1, 0, 0, 1, 0], [0, 1, 1, 0, 1, 1, 1, 1]], \n            [[1, 1, 1, 1, 0, 1, 1, 0], [1, 1, 1, 0, 0, 1, 1, 0], [0, 1, 1, 0, 0, 1, 1, 1], [0, 1, 1, 0, 1, 1, 1, 1]], \n            [[1, 1, 1, 1, 1, 0, 0, 0], [0, 0, 1, 1, 1, 1, 0, 0], [0, 0, 1, 1, 1, 1, 0, 0], [0, 0, 0, 1, 1, 1, 1, 1]], \n            [[1, 1, 1, 1, 1, 0, 0, 0], [1, 1, 0, 1, 1, 1, 1, 0], [0, 1, 1, 1, 1, 0, 1, 1], [0, 0, 0, 1, 1, 1, 1, 1]], \n            [[1, 1, 1, 1, 1, 0, 1, 1], [0, 0, 1, 1, 1, 0, 0, 0], [0, 0, 0, 1, 1, 1, 0, 0], [1, 1, 0, 1, 1, 1, 1, 1]], \n            [[1, 1, 1, 1, 1, 0, 1, 1], [0, 1, 1, 1, 1, 1, 0, 1], [1, 0, 1, 1, 1, 1, 1, 0], [1, 1, 0, 1, 1, 1, 1, 1]], \n            [[1, 1, 1, 1, 1, 0, 1, 1], [1, 1, 0, 1, 0, 1, 1, 0], [0, 1, 1, 0, 1, 0, 1, 1], [1, 1, 0, 1, 1, 1, 1, 1]], \n            [[1, 1, 1, 1, 1, 0, 1, 1], [1, 1, 1, 1, 0, 0, 1, 1], [1, 1, 0, 0, 1, 1, 1, 1], [1, 1, 0, 1, 1, 1, 1, 1]], \n            [[1, 1, 1, 1, 1, 1, 0, 0], [0, 0, 1, 0, 0, 1, 1, 1], [1, 1, 1, 0, 0, 1, 0, 0], [0, 0, 1, 1, 1, 1, 1, 1]], \n            [[1, 1, 1, 1, 1, 1, 0, 0], [0, 1, 1, 1, 1, 1, 1, 0], [0, 1, 1, 1, 1, 1, 1, 0], [0, 0, 1, 1, 1, 1, 1, 1]], \n            [[1, 1, 1, 1, 1, 1, 1, 0], [0, 0, 1, 0, 1, 0, 1, 1], [1, 1, 0, 1, 0, 1, 0, 0], [0, 1, 1, 1, 1, 1, 1, 1]]\n        ];\n\n        world.registerCellType('living', {\n            getColor: function () {\n                return this.state;\n            },\n            process: function (neighbors) {\n\n                var neighborOnes = neighbors.filter(function(item){\n                    return item.state == 1;\n                }).length;\n\n                if(this.state == 0) {\n                    if(neighborOnes == 3 || neighborOnes == 5 || neighborOnes == 7) \n                        this.newState = 1;\n                } else if (this.state == 1) {\n                    if(neighborOnes == 0 || neighborOnes == 1 || neighborOnes == 2 || neighborOnes == 6 || neighborOnes == 8)\n                        this.newState = 2;\n                } else if (this.state == 2) {\n                    this.newState = 3;\n                } else if (this.state == 3) {\n                    this.newState = 4;\n                } else if (this.state == 4) {\n                    this.newState = 0;\n                }\n            },\n            reset: function () {\n                this.state = this.newState;\n            }\n        }, function (x, y) {\n            // Init \n\n            // 50% chance to use a seed\n            if(choice < 0.5){\n                var seed;\n                // 25% chance to use a random seed\n                if(choice < 0.25) {\n                    seed = seedList[Math.floor(Math.random() * seedList.length)];\n                }\n                // 25% chance to use the Wolfram seed\n                else {\n                    seed = seedList[0];\n                }\n\n                var minX = Math.floor(width / 2) - Math.floor(seed[0].length / 2);\n                var maxX = Math.floor(width / 2) + Math.floor(seed[0].length / 2);\n                var minY = Math.floor(height / 2) - Math.floor(seed.length / 2);\n                var maxY = Math.floor(height / 2) + Math.floor(seed.length / 2);\n\n                this.state = 0;\n\n                // If the cell is inside of the seed array (centered in the world), then use its value\n                if (x >= minX && x < maxX && y >= minY && y < maxY) {\n                    this.state = seed[y - minY][x - minX];\n                }\n            } \n            // 50% chance to initialize with noise\n            else {\n                this.state = Math.random() < 0.15 ? 1 : 0;\n            }\n            this.newState = this.state;\n        });\n\n        world.initialize([\n           { name: 'living', distribution: 100 },\n        ]);\n\n        return world;\n    },\n\n    /**\n     * Simulates a Belousov-Zhabotinsky reaction (approximately).\n     * This one's still a little messed up, so consider it experimental.\n     * \n     * Resources:\n     * http://ccl.northwestern.edu/netlogo/models/B-ZReaction\n     * http://www.fractaldesign.net/automataalgorithm.aspx\n     */\n    BelousovZhabotinsky: function(width = 128, height = 128) {\n        var world = new CellAuto.World({\n            width: width,\n            height: height,\n            wrap: true\n        });\n\n        // Override frame frequency for this setup\n        world.recommendedFrameFrequency = 10;\n\n        // Config variables\n        var kernel = [ // weights for neighbors. First index is for self weight\n         0, 1, 1, 1,\n            1,    1,\n            1, 1, 1\n        ].reverse();\n        var k1 = 5; // Lower gives higher tendency for a cell to be sickened by ill neighbors\n        var k2 = 1; // Lower gives higher tendency for a cell to be sickened by infected neighbors\n        var g = 5;\n        var numStates = 255;\n\n        world.palette = [];\n        for (var i = 0; i < numStates; i++) {\n            var gray = Math.floor((255 / numStates) * i);\n            world.palette.push([gray, gray, gray, 255]);\n        }\n\n        world.registerCellType('bz', {\n            getColor: function () {\n                return this.state;\n            },\n            process: function (neighbors) {\n                var healthy = 0;\n                var infected = 0;\n                var ill = 0;\n                var sumStates = this.state;\n    \n                for(var i = 0; i < neighbors.length + 1; i++) {\n                    var neighbor;\n                    if (i == 8) neighbor = this;\n                    else neighbor = neighbors[i];\n                    \n                    //if(neighbor !== null && neighbor.state){\n                        sumStates += neighbor.state * kernel[i];\n                        if(kernel[i] > 0) {\n                            if(neighbor.state == 0) healthy += 1;\n                            else if(neighbor.state < (numStates - 1)) infected += 1;\n                            else ill += 1;\n                        }\n                    //}\n                }\n\n                if(this.state == 0) {\n                    this.newState = (infected / k1) + (ill / k2);\n                } else if (this.state < (numStates) - 1) {\n                    this.newState = (sumStates / infected + ill + 1) + g;\n                    //this.newState = (sumStates / 9) + g;\n                } else {\n                    this.newState = 0;\n                }\n\n                // Make sure to set state to newstate in a second pass\n                this.newState = Math.max(0, Math.min(numStates - 1, Math.floor(this.newState)));\n\n            },\n            reset: function () {\n                this.state = this.newState;\n            }\n        }, function () {\n            // Init\n            // Generate a random state\n            this.state = Math.random() < 1.0 ? Math.floor(Math.random() * numStates) : 0;\n            this.newState = this.state;\n        });\n\n        world.initialize([\n            { name: 'bz', distribution: 100 }\n        ]);\n\n        return world;\n    }\n\n}\n\n\n/**\n * Simulates a 1D automata.\n * Expects a property `rule` in `options`, which is the integer rule of the CA.\n * \n * Not totally correct yet!\n * \n */\nfunction Elementary(options) {\n    var world = new CellAuto.World(options);\n\n    var rule = (options.rule >>> 0).toString(2);\n    while(rule.length < 8) {\n        rule = \"0\" + rule;\n    }\n\n    console.log(options.rule);\n\n    function processRule(leftAlive, centerAlive, rightAlive) {\n        var index = 0;\n        if(rightAlive) index += 1;\n        if(centerAlive) index += 2;\n        if(leftAlive) index += 4;\n        return rule[rule.length - 1 - index];\n    }\n    \n    function testRule() {\n        var lastIndex = rule.length - 1;\n        for(var i = 0; i < 8; i++) {\n            // Convert i to binary and use it to feed processRule\n            var bin = ((lastIndex - i) >>> 0).toString(2);\n            while(bin.length < 3) bin = \"0\" + bin;\n            var ruleOut = processRule(bin[0] == \"1\", bin[1] == \"1\", bin[2] == \"1\");\n\n            console.assert(ruleOut == rule[i], bin + \" \" + rule[i] + \" \" + (ruleOut == rule[i]).toString());\n        }\n    }\n    //testRule();\n\n    world.registerCellType('living', {\n        getColor: function () {\n            return this.alive ? 0 : 1;\n        },\n        process: function (neighbors) {\n            function getWasAlive(neighbor){\n                if(neighbor != null)\n                    return neighbor.wasAlive;\n                return false;\n            }\n            \n            // If the cell isn't active yet, determine its state based on its upper neighbors\n            if(!this.wasAlive) {\n                this.alive = processRule(getWasAlive(neighbors[0]), getWasAlive(neighbors[1]), getWasAlive(neighbors[2])) == \"1\";\n            }\n        },\n        reset: function () {\n            this.wasAlive = this.alive;\n        }\n    }, function (x, y) {\n        // Init\n        this.alive = (x == Math.floor(options.width / 2)) && (y == 1);\n        //this.alive = Math.random() < 0.01;\n        //this.wasAlive = this.alive;\n    });\n\n    world.initialize([\n        { name: 'living', distribution: 100 }\n    ]);\n\n    return world;\n}\n\n/**\n * Simulates a Life-like automata. Uses B/S notation.\n * See https://en.wikipedia.org/wiki/Life-like_cellular_automaton\n * \n * Expects two additional properties in `options`:\n * `B`: An array of ints representing the B component of the rule\n * `S`: An array of ints representing the S component of the rule\n */\nfunction LifeLike(options, distributionFunc) {\n    var world = new CellAuto.World(options);\n\n    world.registerCellType('living', {\n        getColor: function () {\n            return this.alive ? 0 : 1;\n        },\n        process: function (neighbors) {\n            var surrounding = this.countSurroundingCellsWithValue(neighbors, 'wasAlive');\n            this.alive = options.B.includes(surrounding) || options.S.includes(surrounding) && this.alive;\n        },\n        reset: function () {\n            this.wasAlive = this.alive;\n        }\n    }, function (x, y) {\n        // Init\n        if(distributionFunc)\n            this.alive = distributionFunc(x, y);\n        else   \n            this.alive = Math.random() < 0.5;\n    });\n\n    world.initialize([\n        { name: 'living', distribution: 100 }\n    ]);\n\n    return world;\n}"]}